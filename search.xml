<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第六章 - 動畫</title>
    <url>/2020/10/09/lesson-jq-06-animate/</url>
    <content><![CDATA[<h1 id="撰寫中…"><a href="#撰寫中…" class="headerlink" title="撰寫中…"></a>撰寫中…</h1>]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第五章 - 事件處理</title>
    <url>/2020/10/07/lesson-jq-05-events/</url>
    <content><![CDATA[<h1 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a>事件處理</h1><p>事件處理是網頁互動行為很重要的核心，通常當一個事件發生時，會去呼叫一個事件處理程序（event handler）的回呼函式，也就是事件發生時要做的事情。jQuery 對事件有許多特別的貼心設定。</p>
<a id="more"></a>

<h1 id="事件觸發"><a href="#事件觸發" class="headerlink" title="事件觸發"></a>事件觸發</h1><p>要觸發一個事件要有三個步驟，第一個是<code>指定選取對象</code>、第二個是<code>指派事件</code>、第三個是<code>傳遞一個函式</code>，在語意上是<strong>誰、在甚麼時候、做了甚麼事情</strong>，事件觸發有下列兩種方式。</p>
<h2 id="一、使用事件名稱直接觸發"><a href="#一、使用事件名稱直接觸發" class="headerlink" title="一、使用事件名稱直接觸發"></a>一、使用事件名稱直接觸發</h2><p>此方法為便捷方式，是方法二的捷徑，但只能夠用在 DOM 元素已經存在時有作用，在網頁讀取完畢時，若 DOM 元素還不存在，也就是後來產生的 DOM 元素，無法使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myElement&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert($(<span class="built_in">this</span>).text())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="二、使用-on-方法觸發"><a href="#二、使用-on-方法觸發" class="headerlink" title="二、使用 on()方法觸發"></a>二、使用 on()方法觸發</h2><p>建議使用這種方式，on 方法提供了事件處理程序所有功能，而且語意上與 JavaScript 的 addEventListener() 相似，其實，on 是以 addEventListener 實作，且第三個參數是 false，也就是 jQuery 事件是以「事件冒泡」來實作，而不是「事件捕獲」，這很符合 JavaScript addEventListener 第三參數 useCapture 的預設 false。該方法又分為「直接綁定」與「委派綁定」。</p>
<blockquote>
<p>.on(events [, selector ] [, data ], handler)</p>
</blockquote>
<ul>
<li>events 可以多個事件，空格分隔事件名稱。</li>
<li>指定 css selector 為委派綁定，參考下方。</li>
<li>指定 data（可以任何資料類型），當事件發生時將通過 event.data 傳遞。</li>
</ul>
<div class="admonition warning"><p>請忘記 bind() 與 live()，on() 都可以做到。</p>
</div>

<h3 id="直接綁定"><a href="#直接綁定" class="headerlink" title="直接綁定"></a>直接綁定</h3><p>當 selector 省略或是 null，事件處理程序稱為直接綁定，會發生在選定的元素上，也就是呼叫該事件的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myElement&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert($(<span class="built_in">this</span>).text())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="委派綁定"><a href="#委派綁定" class="headerlink" title="委派綁定"></a>委派綁定</h3><p>又稱為事件委派(delegation)，當提供 selector 參數時，事件處理程序稱為委派綁定。<strong>事件不被綁定元素所使用，而只對綁定元素的後代 selector 使用</strong>，委派事件綁定的優勢在於<strong>可以處理來自後代元素的事件，也就是程式後來產生的後代 DOM 元素</strong>。</p>
<pre><code>委託事件處理程序不適用於SVG。</code></pre>
<h3 id="多事件觸發"><a href="#多事件觸發" class="headerlink" title="多事件觸發"></a>多事件觸發</h3><p>on 可以使用多種事件觸發，以下 click，keypress 都會觸發不具名函式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;click keypress&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;#lightBox&#x27;</span>).hide()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h1><p>可以使用 off() 來移除事件，要移除元素的所有事件，不要傳任何參數給 off()函式，這是殺傷力很強的方式，大部分情況下不會移除元素所有的事件處理程序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;input[type=&quot;submit&quot;]&#x27;</span>).off()</span><br></pre></td></tr></table></figure>

<p>也可以指定移除的事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">this</span>).off(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>named space 命名空間移除特定目標的事件，可以為事件命名一個名字，這樣移除時可以指定該名稱。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).on(<span class="string">&#x27;click.main&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;click1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).on(<span class="string">&#x27;click.sub&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;click2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除 sub</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).off(<span class="string">&#x27;click.sub&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="事件類型"><a href="#事件類型" class="headerlink" title="事件類型"></a>事件類型</h1><table>
<thead>
<tr>
<th>分類</th>
<th>事件名稱</th>
</tr>
</thead>
<tbody><tr>
<td>鍵　　　盤</td>
<td>keydown,keyup,keypress</td>
</tr>
<tr>
<td>滑　　　鼠</td>
<td>click,dblclick,hover,mousedown,mouseenter,mouseleave,mouseup,,mousemove,mouseout,mouseover,toggle</td>
</tr>
<tr>
<td>表　　　單</td>
<td>blur,change,focus,focusin,focusout,select,submit,reset</td>
</tr>
<tr>
<td>瀏　覽　器</td>
<td>error,resize,scroll</td>
</tr>
<tr>
<td>文　　　件</td>
<td>load,unload,ready</td>
</tr>
</tbody></table>
<h1 id="事件應用"><a href="#事件應用" class="headerlink" title="事件應用"></a>事件應用</h1><h2 id="hover-事件"><a href="#hover-事件" class="headerlink" title="hover 事件"></a>hover 事件</h2><p>hover 是常使用的滑鼠事件，它是由 mouseenter 與 mouseleave 來實作，可由 e.type 確認，它可以傳入兩個匿名函式分別給 mouseenter 與 mouseleave 使用。如果只傳入一個引數給 hover()，那個函式會同時被用作 mouseenter 與 mouseleave 事件的處理器。</p>
<blockquote>
<p>.hover(handlerIn, handlerOut)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;a&#x27;</span>).hover(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.type)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.type)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>兩種滑鼠移入、移出的操作，<strong>第一種說明了 on 也可以物件實字來操作多種事件</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一種用 on 並傳入一個選項物件</span></span><br><span class="line">$(<span class="string">&#x27;img&#x27;</span>).on(&#123;</span><br><span class="line">  mouseover: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">0.1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mouseout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二種用 hover()，使用兩個參數</span></span><br><span class="line">$(<span class="string">&#x27;img&#x27;</span>).hover(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">0.1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="事件物件"><a href="#事件物件" class="headerlink" title="事件物件"></a>事件物件</h1><p>事件物件（event object），當一個或多集合 jQuery 物件觸發事件時，會記錄著該物件包含與該次事件有關的資訊屬性與方法，被稱為事件物件（<a href="https://api.jquery.com/category/events/event-object/">Event Object</a>），它會被帶入第一參數，通常以<code>e</code>作為參數名稱。事件物件主要基於 W3C 的標準，也結合了業界的事件標準，jQuery 從原生的 JavaScript Event 物件中複製了常用屬性到每個 jQuery Event 物件中，因此屬性、方法名稱一樣，<strong>但對某些特定事件類型來說，其中部分屬性的值會是 undefined</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e) <span class="comment">// 事件物件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="e-target"><a href="#e-target" class="headerlink" title="e.target"></a>e.target</h2><p>event.target 屬性即實際被點擊的元素，可以記為最深處的目標，儲存著發生事件的目標元素，透過這個屬性可以確定 DOM 中首先接收到事件的元素。而且，this 引用的是處理事件的 DOM 元素，藉由 event.target 與 this 比對，可以做出以下的判斷。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#switcher&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.target == <span class="built_in">this</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#switcher&#x27;</span>.button).toggleClass(<span class="string">&#x27;hidden&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>或者是當 event.target 是 a 時忽略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(event.target).is(<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">return</span> <span class="comment">// 忽略發生於連結上的事件</span></span><br></pre></td></tr></table></figure>

<h2 id="e-currentTarget"><a href="#e-currentTarget" class="headerlink" title="e.currentTarget"></a>e.currentTarget</h2><p>currentTarget 屬性指出哪個元素註冊了事件，<code>永遠與 this 相同</code>。如果 target 與 currentTarget 不同，表示所處理的事件就是自其發生處產生氣泡上浮後的事件，可以透過 is()方法來測試 target 元素。</p>
<h2 id="e-clientX、e-clientY"><a href="#e-clientX、e-clientY" class="headerlink" title="e.clientX、e.clientY"></a>e.clientX、e.clientY</h2><p>事件觸發時，返回滑鼠相對瀏覽器可視區域左上角的偏移量，<strong>固定不隨頁面而改變</strong>，可視區域不包括工具欄和滾動條。兼容性：所有瀏覽器均支持。</p>
<h2 id="e-pageX、e-pageY"><a href="#e-pageX、e-pageY" class="headerlink" title="e.pageX、e.pageY"></a>e.pageX、e.pageY</h2><p>事件觸發時，滑鼠游標到 document 文件左上角的偏移量，<strong>會隨著頁面卷軸滾動而改變</strong>，這 2 個屬性雖不是標準屬性，但得到了廣泛支持，除了 IE6/7/8。</p>
<h2 id="e-offsetX、e-offsetY"><a href="#e-offsetX、e-offsetY" class="headerlink" title="e.offsetX、e.offsetY"></a>e.offsetX、e.offsetY</h2><p>事件觸發時，滑鼠游標<strong>相對父元素左上角的偏移量</strong>，左上角的基準點在不同瀏覽器各有不同，IE 以內容區左上角為基準點不包括邊框。Chrome 以邊框左上角為基準點。</p>
<h2 id="e-screenX、e-screenY"><a href="#e-screenX、e-screenY" class="headerlink" title="e.screenX、e.screenY"></a>e.screenX、e.screenY</h2><p>事件觸發時，滑鼠游標相對於螢幕顯示器螢幕左上角的 X,Y 坐標。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;e.clientX&#x27;</span>, e.clientX, <span class="string">&#x27;e.clientY&#x27;</span>, e.clientY)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;e.pageX&#x27;</span>, e.pageX, <span class="string">&#x27;e.pageY&#x27;</span>, e.pageY)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;e.offsetX&#x27;</span>, e.offsetX, <span class="string">&#x27;e.offsetY&#x27;</span>, e.offsetY)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;e.screenX&#x27;</span>, e.screenX, <span class="string">&#x27;e.screenY&#x27;</span>, e.screenY)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="e-preventDefault"><a href="#e-preventDefault" class="headerlink" title="e.preventDefault()"></a>e.preventDefault()</h2><p>阻止瀏覽器事件預設回應的函式，此函式是事件物件的一部分，可以在事件處理函式內存取。若網頁有個連結，點擊連結時通常瀏覽器會連結到該網址，如果要阻止它的預設行為。當在事件的環境中完成了某些作用，例如頁面滾動到錨點 id 的位置，通常會用到 e.preventDefault()。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;a&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault() <span class="comment">// 連結無作用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也可以寫成以下這樣：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#menu&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">//事件不會發生</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="event-stopPropagation"><a href="#event-stopPropagation" class="headerlink" title="event.stopPropagation()"></a>event.stopPropagation()</h2><p>阻止事件冒泡，event.stopPropagation() 可以阻止 click 事件冒泡到父元素，透過呼叫 event.stopPropagation() 就可以避免其他所有 DOM 元素回應這個事件。點擊按鈕的事件會被按鈕處理，而且只會被按鈕處理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#theLink&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="鍵盤事件的事件物件屬性"><a href="#鍵盤事件的事件物件屬性" class="headerlink" title="鍵盤事件的事件物件屬性"></a>鍵盤事件的事件物件屬性</h2><table>
<thead>
<tr>
<th>鍵盤事件</th>
<th>解說</th>
</tr>
</thead>
<tbody><tr>
<td>keyCode</td>
<td>當 keypress 事件時，返回 character code；當 keydown 或 keyup 事件時，返回 key code</td>
</tr>
<tr>
<td>which</td>
<td>當按下滑鼠按鍵，取得是哪個按鍵，值同 keyCode</td>
</tr>
<tr>
<td>charCode</td>
<td>當 keypress 事件時，返回 character code</td>
</tr>
<tr>
<td>altKey</td>
<td>布林值 (boolean)，用來判斷使用者是否有按 alt 鍵</td>
</tr>
<tr>
<td>ctrlKey</td>
<td>布林值 (boolean)，用來判斷使用者是否有按 ctrl 鍵</td>
</tr>
<tr>
<td>shiftKey</td>
<td>若事件發生時 shift 按著則為 true;</td>
</tr>
<tr>
<td>metaKey</td>
<td>布林值 (boolean)，用來判斷使用者是否有按 meta 鍵</td>
</tr>
</tbody></table>
<ul>
<li><p>metaKey<br>若是原生的事件物件沒有 metaKey 屬性，jQuery 會將此設為與 ctrlKey 屬性相同的值。MacOS 中會是 Command 鍵設定 metaKey 屬性。</p>
</li>
<li><p>which</p>
<p>jQuery 正規化（normalize）這個非標準事件屬性，指出在事件中按下了哪個滑鼠鍵或鍵盤按鍵。<br>對鍵盤事件來說，若是原生的事件沒有定義 which，但定義了 charCode 或 keyCode，which 會被設為這些屬性所定義的值。<br>對滑鼠事件來說，若是 which 無定義，但 button 屬性有定義，which 會依據 button 的值來設定。</p>
<p>0 代表沒有按下任何滑鼠按鍵。<br>1 代表按下左鍵。<br>2 代表按下中鍵。<br>3 代表按下右鍵。（某些瀏覽器不會為右鍵點擊產生滑鼠事件）</p>
</li>
</ul>
<p><a href="https://www.fooish.com/posts/ascii-code-table.html">ASCII character 對照表</a><br><a href="https://www.fooish.com/javascript/dom/keyboard-event-key-codes.html">Key codes 對照表</a></p>
<h2 id="其他事件物件屬性"><a href="#其他事件物件屬性" class="headerlink" title="其他事件物件屬性"></a>其他事件物件屬性</h2><table>
<thead>
<tr>
<th>常用</th>
<th>解說</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>返回事件類型，例如 “click”</td>
</tr>
<tr>
<td>timeStamp</td>
<td>事件發生時的時間 timestamp (單位是 milliseconds 毫秒)</td>
</tr>
<tr>
<td>eventPhase</td>
<td>返回為一個數字，表示事件處於目前所處的傳播狀態 (event flow)</td>
</tr>
<tr>
<td></td>
<td>有這些值：0: None，1: capturing phase。2: target phase，3: bubbling phase</td>
</tr>
<tr>
<td>data</td>
<td>用於 on()函式傳遞資料給事件處理函式的 jQuery 物件。</td>
</tr>
</tbody></table>
<ul>
<li>timeStamp<br>事件發生的時間點，格式為 Date.getTime()方法所回傳那樣，單位式毫秒。jQuery 會自行設定這個屬性，以避開 FireFox 一個存在已久的臭蟲。</li>
</ul>
<h1 id="事件旅行"><a href="#事件旅行" class="headerlink" title="事件旅行"></a>事件旅行</h1><p>事件旅行指的是事件傳遞的順序，分為「事件捕獲」、「事件冒泡」兩種，也就是 HTML 層級間若有事件存在，那麼點擊某一個元素，會依據這兩種其中一種方式來傳遞事件。而在 jQuery 裡面， 已經將 addEventListener 的第三參數設定為 false，也就是「事件冒泡」，所以事件傳遞會由內而外。</p>
<h2 id="事件捕獲（event-capturing）"><a href="#事件捕獲（event-capturing）" class="headerlink" title="事件捕獲（event capturing）"></a>事件捕獲（event capturing）</h2><p>事件傳遞會由外而內，addEventListener 第三參數為 true。</p>
<h2 id="事件冒泡（event-bubbling）"><a href="#事件冒泡（event-bubbling）" class="headerlink" title="事件冒泡（event bubbling）"></a>事件冒泡（event bubbling）</h2><p>事件傳遞會由內而外，addEventListener 第三參數為 false。</p>
<h2 id="事件冒泡範例"><a href="#事件冒泡範例" class="headerlink" title="事件冒泡範例"></a>事件冒泡範例</h2><p>點擊「我是最裡面」，傳遞會由 a &gt; inner &gt; outer &gt; document。a 設定 e.preventDefault()因此連結會無效，若再設定 e.stopPropagation() 可以阻止事件冒泡傳遞，就不會觸發其他事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  html,</span><br><span class="line">  body &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#777</span>;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  a &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.example.com&quot;</span>&gt;</span>我是最裡面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;document&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.outer&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;outer&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.inner&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;inner&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    e.preventDefault() <span class="comment">// 連結預設無效</span></span></span><br><span class="line"><span class="javascript">    e.stopPropagation() <span class="comment">// 阻止事件冒泡傳遞</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第四章 - 元素的位置與大小</title>
    <url>/2020/10/07/lesson-jq-04.geometry/</url>
    <content><![CDATA[<h1 id="寬度與高度"><a href="#寬度與高度" class="headerlink" title="寬度與高度"></a>寬度與高度</h1><p>有三種設置及查詢元素的寬度（width）、高度（height）的方式。</p>
<h2 id="width-與-height"><a href="#width-與-height" class="headerlink" title="width() 與 height()"></a>width() 與 height()</h2><p>width()與 height()方法回傳基本寬度與高度，不包括內距（padding）、邊框（border）、外距（margin），css box-sizing 也可能會影響到 width()的計算，也就是說 padding、border 會被包含在 width 裡面。</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:200px;height:200px;border:1px solid#333;box-sizing:border-box;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;.box&#x27;</span>).width() <span class="comment">// 返回 198，注意無單位</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>注意的是，css('width') 和 width() 兩者的差異在於，前者返回有單位的'200px'，後者只有無單位的整數 200。</p>
</div>

<p>width(value) 與 height(value) 可以設定寬度與高度，value 可以設定 <code>數字</code> 、 <code>px</code> 、 <code>%</code> 、 <code>auto</code> ，如果未設定任何單位，則預設為 px。如果傳入的是數字，會被視為以像素為單位的尺寸大小，如果傳入的是字串值，會被用作 CSS width 或 height 屬性的值，因此可以套用任何 CSS 單位，但不能設定 Window 或 Document 物件的寬度或高度。</p>
<h2 id="innerWidth-與-innerHeight"><a href="#innerWidth-與-innerHeight" class="headerlink" title="innerWidth() 與 innerHeight()"></a>innerWidth() 與 innerHeight()</h2><p>innerWidth() 與 innerHeight() 回傳元素的寬度或高度加上它內距（padding），但不包括邊框（border）。</p>
<blockquote>
<p>可參考 JavaScript 的 clientWidth、clientHeight 屬性</p>
</blockquote>
<h2 id="outerWidth-與-outerHeight"><a href="#outerWidth-與-outerHeight" class="headerlink" title="outerWidth() 與 outerHeight()"></a>outerWidth() 與 outerHeight()</h2><p>outerWidth() 與 outerHeight() 通常回傳元素的寬度或高度，加上其內距（padding）、邊框（border），但若傳入 true 值給上面任何一個方法，它們也會將該元素外距的大小計算在內。例如 outerWidth(true)，預設是 false。</p>
<blockquote>
<p>可參考 JavaScript 的 offsetWidth、offsetHeight 屬性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;innerWidth&#x27;</span>, $(<span class="built_in">this</span>).innerWidth(), <span class="string">&#x27;clientWidth&#x27;</span>, <span class="built_in">this</span>.clientWidth)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;outerWidth&#x27;</span>, $(<span class="built_in">this</span>).outerWidth(), <span class="string">&#x27;offsetWidth&#x27;</span>, <span class="built_in">this</span>.offsetWidth)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="捲軸的偏移量"><a href="#捲軸的偏移量" class="headerlink" title="捲軸的偏移量"></a>捲軸的偏移量</h1><h2 id="scrollTop-與-scrollLeft"><a href="#scrollTop-與-scrollLeft" class="headerlink" title="scrollTop() 與 scrollLeft()"></a>scrollTop() 與 scrollLeft()</h2><p>可查詢元素在捲動軸（scrollbar）的偏移量，或設定元素在捲動軸的偏移量（px）。可用於 Window 物件，也可用於文件元素，而在 document 上呼叫時，它會設定內含該文件的 window 的捲動軸位置。有別於其他 setters，不能傳入一個函式給 scrollTop()或 scrollLeft()。scrollTop()為垂直偏移量，scrollLeft()為水平偏移量。如果滾動條位於最頂部，或者元素不可滾動，則此數字為 0。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">&#x27;scroll&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="built_in">window</span>).scrollTop())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="元素的座標"><a href="#元素的座標" class="headerlink" title="元素的座標"></a>元素的座標</h1><h2 id="offset"><a href="#offset" class="headerlink" title="offset()"></a>offset()</h2><p>返回元素相對於文件的座標位置，並以物件形式回傳這個物件的 left 與 top 屬性存有元素的 X 與 Y 座標（數字）。如果傳入一個具有 top、left 屬性的物件給此方法，它會設定所指定的位置。必要時它會設定 CSS position 屬性來讓元素的位置可被設定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pos = $(<span class="string">&#x27;#a&#x27;</span>).offset() <span class="comment">// 回傳一個 jQuery物件 並且具有 top、left 屬性</span></span><br><span class="line">pos.top = <span class="number">100</span> <span class="comment">// 更改這個物件 top 屬性</span></span><br><span class="line">pos.left = <span class="number">100</span> <span class="comment">// 更改這個物件 left 屬性</span></span><br><span class="line">$(<span class="string">&#x27;#a&#x27;</span>).offset(pos) <span class="comment">// 回傳此物件，重新設定元素位置</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用回呼函式</li>
</ul>
<blockquote>
<p>$(selector).offset(function(index, oldOffset))</p>
</blockquote>
<blockquote>
<p>可參考 JavaScript 的 offsetTop、offsetLeft 屬性</p>
</blockquote>
<h2 id="position"><a href="#position" class="headerlink" title="position()"></a>position()</h2><p>position()方法類似 offset()，它只能作為 getter，返回匹配元素相對於父元素的位置（偏移），該方法返回的對象包含兩個整型屬性：top 和 left，以像素計。此方法只對可見元素有效。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).position().left</span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).position().top</span><br></pre></td></tr></table></figure>

<h2 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent()"></a>offsetParent()</h2><p><strong>獲取被定位的最近祖先元素對象</strong>，每個元素都有個 offsetParent 屬性，用來指定元素的位置是相對於誰。已定位的元素永遠都是他們子裔元素的 offsetParent，jQuery 只會把已定位的元素當作 offsetParent，而 jQuery 物件的 offsetParent()方法則會把每個元素對應至最接近它的已定位祖（ancestor）元素，或最後是 body 元素。</p>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 - 插入、取代、刪除元素</title>
    <url>/2020/10/02/lesson-jq-03.insert-replace/</url>
    <content><![CDATA[<h1 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h1><p>before()、prepend()、append()、after()都是用來指定要被插入至文件的內容，皆取一個引數，可以是用來指定新內容的「純文字」或 「HTML 字串」，也可以是個「jQuery 物件」。</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以選擇器為主，指定要插入的內容，此方式可以有函式引數</span></span><br><span class="line">$(selector).append(content)</span><br></pre></td></tr></table></figure>

<p>插入的位置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[before] &lt;p&gt; [prepend] 我是內容 [append] &lt;&#x2F;p&gt; [after]</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).append(<span class="string">&#x27;&lt;span&gt;P結束標籤前面&lt;/span&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).prepend(<span class="string">&#x27;&lt;span&gt;p開始標籤後面&lt;/span&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).before(<span class="string">&#x27;&lt;span&gt;p開始標籤前面&lt;/span&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).after(<span class="string">&#x27;&lt;span&gt;p開始標籤後面&lt;/span&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>這四個更動文件結構的方法也都接受函式，<br>append()、prepend()，第二個引數是指當下選擇目標的 HTML 字串表示的<strong>原內容</strong>，<br>before()、after() 不會有第二引數。</p>
<blockquote>
<p>$(selector).append(function(index,oldContent))<br>$(selector).prepend(function(index,oldContent))<br>$(selector).before(function(index))<br>$(selector).after(function(index))</p>
</blockquote>
<hr>
<h1 id="replaceWith-取代元素"><a href="#replaceWith-取代元素" class="headerlink" title="replaceWith() 取代元素"></a>replaceWith() 取代元素</h1><p>replaceWith() 方法用指定的 HTML 內容或元素替換被選元素。<br>replaceWith()與 replaceAll()作用相同。差異在於語法：內容和選擇器的位置，以及 replaceAll()無法使用函數進行替換。</p>
<p>跟上面四個插入內容一樣可接受函式：</p>
<blockquote>
<p>$(selector).replaceWith(function(index,oldContent))</p>
</blockquote>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;hr&#x27;</span>).replaceWith(<span class="string">&#x27;&lt;br&gt;&#x27;</span>) <span class="comment">// 用 &lt;br&gt; 取代 &lt;hr&gt; 元素，hr被取代後不會存在於文件中</span></span><br><span class="line">$(<span class="string">&#x27;h2&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用 h1 取代 h2，內容不變</span></span><br><span class="line">  <span class="keyword">var</span> h2 = $(<span class="built_in">this</span>)</span><br><span class="line">  h2.replaceWith(<span class="string">&#x27;&lt;h1&gt;&#x27;</span> + h2.html() + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用 map()，在每個 h1 開頭加上章節符號</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstChild <span class="comment">//回傳 firstChild， 是 js 屬性</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .before(<span class="string">&#x27;§&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner first&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner second&quot;</span>&gt;</span>And<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner third&quot;</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// replaceWith()　以選擇器開始，指定要插入的內容</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;div.second&#x27;</span>).replaceWith(<span class="string">&#x27;&lt;h2&gt;New heading&lt;/h2&gt;&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// replaceAll()　反過來以建立內容開始，並插入指定的位置</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;&lt;h2&gt;New heading&lt;/h2&gt;&#x27;</span>).replaceAll(<span class="string">&#x27;.inner&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上五個方法都是在目標元素上呼叫，並傳入要插入的內容作為引數。<br>也可以反過來，用內容來呼叫，並傳入目標元素作為引數。<br>它們是 appendTo()、prependTo()、insertAfter、insertBefore()、replaceAll()，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以內容為主，指定要被插入到哪個選擇器，選擇器可以是一個 jQuery 物件、Element、文字節點，這種方式沒有函式引數</span></span><br><span class="line">$(content).appendTo(selector)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="clone-複製元素"><a href="#clone-複製元素" class="headerlink" title="clone() 複製元素"></a>clone() 複製元素</h1><p>clone() 複製出一份選取集合的副本（包含所有的後代子孫以及文字），<br>如果想要將文件上的元素複製到新的位置，而非移動它們，必須先用 clone() 方法來複製它們的副本。<br>clone()會製作並回傳每個所選元素（連同這些元素的所有子元素）的副本。</p>
<p>但是，回傳的 jQuery 物件中的元素尚未成為文件的一部分，要使用上面提到的的方法<strong>插入</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;clone&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.google.com&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 複製 a元素到 p</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> content = $(<span class="string">&#x27;a.clone&#x27;</span>).clone()</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;p.box&#x27;</span>).append(content)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="刪除元素"><a href="#刪除元素" class="headerlink" title="刪除元素"></a>刪除元素</h1><h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><p>只有清空子元素，移除每個所選元素全部的子元素（包括文字節點），不會更動到所選元素本身。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .hello 裡面的子元素及內容會被清空</span></span><br><span class="line">$(<span class="string">&#x27;.hello&#x27;</span>).empty()</span><br></pre></td></tr></table></figure>

<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p>連同自己以及子孫元素都一併從 DOM 樹中移除，而且還會移除任何先前已繫結的事件處理器。<br>remove()通常不帶引數，並會移除 jQuery 物件中所有的元素。不過如果傳入一個引數，那個引數會被視為選擇器，當然，也可以使用 filter 來篩選。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以指定要移除的對象</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).remove(<span class="string">&#x27;.hello&#x27;</span>)</span><br><span class="line"><span class="comment">// 這種做法相當於使用 filter</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).filter(<span class="string">&#x27;.hello&#x27;</span>).remove()</span><br></pre></td></tr></table></figure>

<h2 id="detach"><a href="#detach" class="headerlink" title="detach()"></a>detach()</h2><p>detach() 就像 remove()，但不會移除事件處理器與資料。仍會保留所有事件處理器，若只想暫時自文件中移除某些元素，之後還要放回去的話，detach()會比較適合。<br>會在記憶體中保留一份相同的複製資料。</p>
<h2 id="unwrap-、wrap-、wrap"><a href="#unwrap-、wrap-、wrap" class="headerlink" title="unwrap()、wrap()、wrap"></a>unwrap()、wrap()、wrap</h2><ul>
<li>.unwrap 是解包裹的概念，它會將選擇到的元素集合的父元素移除掉。</li>
<li>.wrap 是包裹的概念，它會將選擇到的元素集合，<strong>每一個</strong>都加上一個父元素。</li>
<li>.wrapAll 是全包裹的概念，它會將選擇到的元素集合，全部包裹在一個指定的父元素中。</li>
</ul>
<p>不同於 remove()、detach()，unwrap()並不接受一個額外的選擇器引數。</p>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 - 變更及取得內容</title>
    <url>/2020/10/02/lesson-jq-02.set-and-get/</url>
    <content><![CDATA[<h1 id="變更及取得內容"><a href="#變更及取得內容" class="headerlink" title="變更及取得內容"></a>變更及取得內容</h1><p>jQuery 變更與取得元素的內容非常容易：</p>
<ul>
<li>變更內容：$(選擇器).html(變更的內容)</li>
<li>取得內容：$(選擇器).html()</li>
</ul>
<a id="more"></a>

<p>需要注意的是 jQuery 物件與正常的 DOM 物件不同，使用者不能夠為 jQuery 物件呼叫 DOM 屬性或方法，也不能夠為 DOM 物件呼叫 jQuery 的方法和屬性。因此須知道當下操縱的是 DOM 物件，還是 jQuery 物件，這樣才能正確使用各自物件的方法、屬性。接著，介紹各種常用變更及取得的設定：</p>
<hr>
<h1 id="text-、html-取得與設定元素內容"><a href="#text-、html-取得與設定元素內容" class="headerlink" title="text()、html() 取得與設定元素內容"></a>text()、html() 取得與設定元素內容</h1><p>text()與 html()方法用來查詢與設定一或多個元素的純文字或 HTML 內容。<br>text() 不帶引數呼叫時，回傳所有符合元素裡面的所有純文字內容。它等同於 JavaScript 的 textContent 與 innerText。<br>html() 不帶引數呼叫時，回傳第一個符合元素的 HTML 內容。它等同於 JavaScript 的 innerHTML。</p>
<h2 id="可以使用回呼函式"><a href="#可以使用回呼函式" class="headerlink" title="可以使用回呼函式"></a>可以使用回呼函式</h2><p>做到讀取與寫入的功能，此時 index 為符合 selector 的 text 或 html 索引值, oldcontent 為原內容，可以在返回時用 return “新內容” 取代原內容。</p>
<blockquote>
<p>$(selector).text(function(index, oldcontent))<br>$(selector).html(function(index, oldcontent))</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = $(<span class="string">&#x27;.card&#x27;</span>).text()</span><br><span class="line"><span class="keyword">var</span> html = $(<span class="string">&#x27;card&#x27;</span>).html()</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;.card-body p&#x27;</span>).text(<span class="function"><span class="keyword">function</span> (<span class="params">idx, oldContent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`第<span class="subst">$&#123;idx + <span class="number">1</span>&#125;</span>個：<span class="subst">$&#123;oldContent&#125;</span>`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="val-取得與設定-HTML-表單值"><a href="#val-取得與設定-HTML-表單值" class="headerlink" title="val() 取得與設定 HTML 表單值"></a>val() 取得與設定 HTML 表單值</h1><p>val() 是用來設定與查詢 HTML 表單元素 value 屬性的方法，也可用來查詢與設定 checkboxs（多選鈕）、radio buttons（單選鈕）及 select 元素的選取狀態。它等同於 javascript 的 value。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;select#foo option:checked&#x27;</span>).val()</span><br><span class="line">$(<span class="string">&#x27;select#foo&#x27;</span>).val()</span><br><span class="line">$(<span class="string">&#x27;input[type=checkbox][name=bar]:checked&#x27;</span>).val()</span><br><span class="line">$(<span class="string">&#x27;input[type=radio][name=baz]:checked&#x27;</span>).val()</span><br></pre></td></tr></table></figure>

<h2 id="可以使用回呼函式-1"><a href="#可以使用回呼函式-1" class="headerlink" title="可以使用回呼函式"></a>可以使用回呼函式</h2><blockquote>
<p>$(selector).val(function(index, oldvalue))</p>
</blockquote>
<hr>
<h1 id="attr-取得與設定-HTML-屬性"><a href="#attr-取得與設定-HTML-屬性" class="headerlink" title="attr() 取得與設定 HTML 屬性"></a>attr() 取得與設定 HTML 屬性</h1><p>attr()方法是可以取得與設定 HTML 屬性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;img&#x27;</span>).attr(<span class="string">&#x27;width&#x27;</span>) <span class="comment">// 取得屬性值</span></span><br><span class="line">$(<span class="string">&#x27;img&#x27;</span>).attr(<span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;500&#x27;</span>) <span class="comment">// 設定屬性值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>).attr(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>) <span class="comment">// 替所有連結新增 target 屬性</span></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>).attr(<span class="string">&#x27;target&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 本地連結在原處載入，他站連結則在新視窗載入</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.host == location.host) <span class="keyword">return</span> <span class="string">&#x27;_self&#x27;</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&#x27;_blank&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="使用選項物件設定多屬性"><a href="#使用選項物件設定多屬性" class="headerlink" title="使用選項物件設定多屬性"></a>使用選項物件設定多屬性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#banner&#x27;</span>).attr(&#123;</span><br><span class="line">  src: <span class="string">&#x27;banner.gif&#x27;</span>,</span><br><span class="line">  alt: <span class="string">&#x27;廣告&#x27;</span>,</span><br><span class="line">  width: <span class="number">720</span>,</span><br><span class="line">  height: <span class="number">64</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="可以使用回呼函式-2"><a href="#可以使用回呼函式-2" class="headerlink" title="可以使用回呼函式"></a>可以使用回呼函式</h2><blockquote>
<p>$(selector).attr(attribute,function(index,oldvalue))</p>
</blockquote>
<h2 id="removeAttr-移除屬性"><a href="#removeAttr-移除屬性" class="headerlink" title="removeAttr() 移除屬性"></a>removeAttr() 移除屬性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需指定屬性</span></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>).removeAttr(<span class="string">&#x27;target&#x27;</span>) <span class="comment">// 移除掉所有連結的 target，原視窗載入</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="取得與設定-CSS-類別"><a href="#取得與設定-CSS-類別" class="headerlink" title="取得與設定 CSS 類別"></a>取得與設定 CSS 類別</h1><p>jQuery 定義了以下方法處理 class 屬性：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>addClass()</td>
<td>為指定的對象增加類別，增加類別可複數</td>
</tr>
<tr>
<td>removeClass()</td>
<td>為指定的對象移除類別 移除類別可複數</td>
</tr>
<tr>
<td>toggleClass()</td>
<td>為指定的對象切換類別</td>
</tr>
<tr>
<td>hasClass()</td>
<td>測試指定的類別存在與否</td>
</tr>
</tbody></table>
<h2 id="addClass"><a href="#addClass" class="headerlink" title="addClass()"></a>addClass()</h2><p>新增一個或多個類別（不會覆蓋移除原有的 class），只做添加類別，新增多個類別使用空格分隔類別。</p>
<blockquote>
<p>$(選擇器).addClass(class_name)<br>$(selector).addClass(function(index, oldclass))</p>
</blockquote>
<h2 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h2><p>僅移除類別（保留其他 class），多類別使用空格分隔類別，如果沒有參數，則該方法將從被選元素中刪除所有類。</p>
<blockquote>
<p>$(選擇器).removeClass(class_name)<br>$( selector ).removeClass( function(index, oldclass) )</p>
</blockquote>
<h2 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h2><p>對設置或移除被選元素的一個或多個類進行切換。該方法檢查每個元素中指定的類。如果不存在則添加類，如果已設置則刪除之。這就是所謂的切換效果。<br>不過，通過使用”switch” 參數，您能夠規定只刪除或只添加類。</p>
<blockquote>
<p>$( selector ).toggleClass( class [, switch])<br>$( selector ).toggleClass( function(index, class) , switch )</p>
</blockquote>
<h2 id="hasClass"><a href="#hasClass" class="headerlink" title="hasClass()"></a>hasClass()</h2><p>測試指定的類別存在與否。<br>hasClass 方法的彈性比 addClass、removeClass()、toggleClass 還要低，hasClass()只能處理單一個類別名稱，而且不支援函式引數。在相比之下，is()比較有彈性。<br>這些 jQuery 方法就像 classList 方法，但這些 jQuery 方法能夠在所有的瀏覽器運作，不限於那些支援 HTML5 classList 屬性的瀏覽器。jQuery 方法還可以作用於多個元素上，並且可以鏈串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// addClass</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).addClass(<span class="string">&#x27;box&#x27;</span>) <span class="comment">// 為所有 h1 新增一個類別 box</span></span><br><span class="line">$(<span class="string">&#x27;h1+p&#x27;</span>).addClass(<span class="string">&#x27;box border&#x27;</span>) <span class="comment">// 為相鄰h1後的p元素，新增兩個類別</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).addClass(<span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 為所有 section 傳入一個函式，該函式會帶入索引值參數，並回傳一個值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;section&#x27;</span> + idx</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeClass</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).removeClass(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).removeClass(<span class="string">&#x27;box border&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).removeClass(<span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;section&#x27;</span> + idx</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).removeClass() <span class="comment">// 為所有 div 移除全部類別</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toggleClass</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="string">&#x27;box&#x27;</span>) <span class="comment">// 切換 box 類別</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="string">&#x27;box border&#x27;</span>) <span class="comment">// 一次切換兩個類別</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;big bold h1-&#x27;</span> + idx</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="string">&#x27;box&#x27;</span>, <span class="literal">true</span>) <span class="comment">// 等同於使用 addClass</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="string">&#x27;box&#x27;</span>, <span class="literal">false</span>) <span class="comment">// 等同於使用 removeClass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasClass</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).hasClass(<span class="string">&#x27;first&#x27;</span>) <span class="comment">// p元素是否有 first 類別</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).is(<span class="string">&#x27;.first&#x27;</span>) <span class="comment">// 也是做同樣的事情，is()注意要有.</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).is(<span class="string">&#x27;.first.title&#x27;</span>) <span class="comment">// is()比 hasClass() 更具彈性</span></span><br></pre></td></tr></table></figure>

<h1 id="取得與設定-CSS-屬性"><a href="#取得與設定-CSS-屬性" class="headerlink" title="取得與設定 CSS 屬性"></a>取得與設定 CSS 屬性</h1><ul>
<li>允許使用連字號的 css 樣式名稱，例如：background-color。</li>
<li>或是駝峰式寫法（Camel case），例如：backgroundColor，養成習慣使用駝峰式寫法。</li>
<li>查詢樣式值時，css()會把數值以字串形式回傳，包括後綴的單位。再設定的時候，它會將數字轉為字串並在必用時為它們加上一個’px’。</li>
<li>設定單值時，可以只寫數字，jQuery 會將數字轉成字串加上 px，例如：20、’20px’、’20’，都是一樣。</li>
<li>也可以設定回呼函式，第一個參數為 index，第二個參數為屬性值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).css(<span class="string">&#x27;font-weight&#x27;</span>) <span class="comment">// 取值，連字號 font-weight</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).css(<span class="string">&#x27;fontWeight&#x27;</span>) <span class="comment">// 取值，駝峰式寫法也可以使用</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).css(<span class="string">&#x27;font-variant&#x27;</span>, <span class="string">&#x27;smallcaps&#x27;</span>) <span class="comment">// 設定所有 h1 的 font-variant</span></span><br><span class="line">$(<span class="string">&#x27;div.note&#x27;</span>).css(<span class="string">&#x27;border&#x27;</span>, <span class="string">&#x27;2px solid black&#x27;</span>) <span class="comment">// 設定複合屬性值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多屬性可使用選項物件（PlainObject）</li>
</ul>
<p>設定 CSS 屬性時，應該使用選項物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).css(&#123;</span><br><span class="line">  backgroundColor: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">  color: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">  padding: <span class="string">&#x27;10px&#x27;</span>,</span><br><span class="line">  border: <span class="string">&#x27;5px dotted black&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>注意的是 css()會忽略 !important，建議改用 CSS class 類別，否則就得使用 jQuery 套件。</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red !important&#x27;</span>) <span class="comment">// 不會有作用</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 - jQuery的核心介紹</title>
    <url>/2020/09/30/lesson-jq-01.core/</url>
    <content><![CDATA[<h1 id="jQuery-函式"><a href="#jQuery-函式" class="headerlink" title="jQuery 函式"></a>jQuery 函式</h1><p>jQuery()，也可以寫成$()，兩者相同，它是 jQuery 最重要的函式及核心，用來專門製造 jQuery 物件的加工廠，也就是說這個工廠回傳的是 <strong>jQuery 物件</strong>。它不是一般我們認知的 JavaScript 物件，而是 jQuery 的特製物件。</p>
<a id="more"></a>

<p>當這個函式建立 jQuery 物件，表示將選取元件集合，它會<strong>儲存一個參考值指向 DOM 樹中對應的元件節點，但並不會複製這些節點</strong>，這些集合（封裝 1 個或多個 DOM 元素），一般稱為符合條件的元件集合（Method set），或稱為 jQuery 選取元件集合（jQuery selection），有了它們就可以使用 jQuery 提供的方法和屬性來操作元素。</p>
<p><strong>jQuery 物件是一種類陣列（array-like）物件，它有一些陣列特性但並不是陣列</strong>，跟陣列一樣有個 length 屬性，以及 0 到 length - 1 的數值屬性。這表示可用標準的中括號[]陣列記號來存取 jQuery 物件的內容。</p>
<blockquote>
<p>回傳是一個 jQuery.fn.init(n) 物件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery()</span><br><span class="line"><span class="comment">// 縮寫</span></span><br><span class="line">$()</span><br></pre></td></tr></table></figure>

<h1 id="jQuery-函式五種使用方式"><a href="#jQuery-函式五種使用方式" class="headerlink" title="jQuery 函式五種使用方式"></a>jQuery 函式五種使用方式</h1><p>jQuery()函式提供 JavaScript 封裝功能，這個封裝工廠可以為我們快速簡化 JavaScript 在網站設計的功能，有五種常使用的方式：</p>
<h2 id="1-傳入-CSS-選擇器"><a href="#1-傳入-CSS-選擇器" class="headerlink" title="1. 傳入 CSS 選擇器"></a>1. 傳入 CSS 選擇器</h2><blockquote>
<p>jQuery( selector [, context ] )</p>
</blockquote>
<p>這是最常使用的方式，傳入 CSS selector 作為選擇的對象，回傳 jQuery 物件來操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.col&#x27;</span>).length</span><br></pre></td></tr></table></figure>

<p>第二參數很少使用，它必須存在於上下文關係中，例如下方 this，span 被指定在 div.foo 才能有作用，或是選擇一個集合後，第二參數會回傳指定符合的子元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div.foo&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;span&#x27;</span>, <span class="built_in">this</span>).addClass(<span class="string">&#x27;bar&#x27;</span>) <span class="comment">// $(&#x27;span&#x27;, this) 等同於 $(this).find(&#x27;span&#x27;)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="2-選擇元素操作"><a href="#2-選擇元素操作" class="headerlink" title="2. 選擇元素操作"></a>2. 選擇元素操作</h2><blockquote>
<p>jQuery( element )</p>
</blockquote>
<p>除了 CSS 選擇器，也可以直接抓取 DOM 元素標籤的名稱。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;body&#x27;</span>).css(&#123;</span><br><span class="line">  backgroundColor: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="3-建立一個元素"><a href="#3-建立一個元素" class="headerlink" title="3. 建立一個元素"></a>3. 建立一個元素</h2><blockquote>
<p>jQuery( html [, optionObject ] )</p>
</blockquote>
<p>可直接傳入 html 標籤建立一個 html 元素， optionObject 是一個可選的物件，可直接設定 html 的屬性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一個引數必須為 HTML 元素</span></span><br><span class="line"><span class="comment">// 第二個引數為可選物件，可以設定該元素的屬性 name/value。</span></span><br><span class="line">$(<span class="string">&#x27;&lt;input&gt;&#x27;</span>, &#123;</span><br><span class="line">  type: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  val: <span class="string">&#x27;Test&#x27;</span>,</span><br><span class="line">  focusin: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).addClass(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  focusout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).removeClass(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).appendTo(<span class="string">&#x27;form&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-傳入一個函式"><a href="#4-傳入一個函式" class="headerlink" title="4. 傳入一個函式"></a>4. 傳入一個函式</h2><p>傳入一個函式給它，函式會在文件已經載入，DOM 準備就緒可供操作時被呼叫。這是 jQuery 版的 onload()函式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  ready do</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// [縮寫]</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  ready do，與上方相同</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.50 支援 ES6</span></span><br><span class="line">$(() =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5-複製陣列、物件"><a href="#5-複製陣列、物件" class="headerlink" title="5. 複製陣列、物件"></a>5. 複製陣列、物件</h2><p>jQuery 函式可以複製陣列、物件，可以注意資料類型，尤其是 JSON 物件，它是被指向同一個記憶體位置，也就是說改變了一個，另一個也會更改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> ary2 = $(ary1)</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = $(obj1)</span><br><span class="line">obj1.a = <span class="number">100</span> <span class="comment">// obj2[0].a 也會更改為 200</span></span><br></pre></td></tr></table></figure>

<h1 id="ready-和-load-的區別"><a href="#ready-和-load-的區別" class="headerlink" title="ready 和 load 的區別"></a>ready 和 load 的區別</h1><ul>
<li><p>$(document).ready<br>會在 HTML 結構載入後，並且 DOM 就緒後呼叫，不包含圖片，觸發時間較早，使用了 JavaScript 的 DOMContentLoaded 事件。</p>
</li>
<li><p>$(window).load<br>會在 HTML 結構載入後，DOM 就緒後，頁面渲染結束（iframe、img 圖片加載完成）後呼叫，也就是網頁讀取完成，使用了 JavaScript 的 load 事件。</p>
</li>
</ul>
<h1 id="document-readyState"><a href="#document-readyState" class="headerlink" title="document.readyState"></a>document.readyState</h1><p>另外還有一個是 document.readyState，它是描述文件讀取狀態，分為以下：</p>
<ul>
<li>loading：document 正在讀取中</li>
<li>interactive：文件已經完成讀取和解析，但是其他的子資源，如「圖片樣式層次表」，仍然在讀取。這個狀態表示 DOMContentLoaded 事件已經被觸發。</li>
<li>complete：文件及子資源都完成讀取。這個狀態表示 load 事件即將被觸發。</li>
</ul>
<p>readystatechange 事件在 document 上觸發時可以判斷 readyState 數值的改變，例如以下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// readystatechange 替代 DOMContentLoaded</span></span><br><span class="line"><span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">&#x27;interactive&#x27;</span>) &#123;</span><br><span class="line">    initApplication()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readystatechange 替代 load</span></span><br><span class="line"><span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">&#x27;complete&#x27;</span>) &#123;</span><br><span class="line">    initApplication()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="jQuery-隱式迴圈"><a href="#jQuery-隱式迴圈" class="headerlink" title="jQuery 隱式迴圈"></a>jQuery 隱式迴圈</h1><p>JavaScript 選擇 DOM 元素時，可使用 querySelectorAll 取得符合選取，在 jQuery 中，它有一種包裝式的隱性反覆迴圈系統（隱式迴圈），若沒特別指定，一次選擇全部，稱作隱式反覆運算（implicit iteration）的技術，省去大量的迴圈結構，而大幅減少程式碼。</p>
<h1 id="與-querySelectorAll"><a href="#與-querySelectorAll" class="headerlink" title="$() 與 querySelectorAll()"></a>$() 與 querySelectorAll()</h1><p>兩者皆取一個 CSS 選擇器作為它們的引數，並回傳一個類陣列物件。jQuery 的實作會在有支援的瀏覽器中使用 querySelectorAll()，<br>如果使用 $() 來取代 querySelectorAll()有個好處，$() 回傳的類陣列物件是一個 jQuery 物件，它比 querySelectorAll() 所回傳的類陣列物件（一個 NodeList）有用多了，因為 jQuery 物件還可以使用 jQuery 的方法。</p>
<table>
<thead>
<tr>
<th>選擇方法</th>
<th>回傳物件</th>
<th>是否新物件</th>
</tr>
</thead>
<tbody><tr>
<td>$()</td>
<td>jQuery</td>
<td>是</td>
</tr>
<tr>
<td>querySelectorAll()</td>
<td>NodeList()</td>
<td>是</td>
</tr>
<tr>
<td>getElementsByTagName</td>
<td>HTMLCollection()</td>
<td>否</td>
</tr>
<tr>
<td>getElementsByClassName()</td>
<td>HTMLCollection()</td>
<td>否</td>
</tr>
<tr>
<td>querySelector()</td>
<td></td>
<td>否</td>
</tr>
<tr>
<td>getElementById()</td>
<td></td>
<td>否</td>
</tr>
</tbody></table>
<ul>
<li>NodeList 與 HTMLCollection 這兩個物件是唯讀的類陣列物件（array-like objects），具有 length 屬性可被迴圈索引逐一讀取（但無法寫入）。</li>
<li>使用 $() 選擇元素時，jQuery 都會幫你獨立一個記憶體位置，且每一個都是全新的 jQuery 物件，要特別注意，濫用會造成記憶體的浪費。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.col&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.col&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;jQuery&#x27;</span>, a === b) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript querySelectorAll</span></span><br><span class="line"><span class="keyword">let</span> c = $(<span class="string">&#x27;.col&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> d = $(<span class="string">&#x27;.col&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;querySelectorAll&#x27;</span>, c === d) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript querySelector</span></span><br><span class="line"><span class="keyword">let</span> e = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> f = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#wrap&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;querySelector&#x27;</span>, e === f) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript getElementsByTagName</span></span><br><span class="line"><span class="keyword">let</span> g = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> h = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getElementsByTagName&#x27;</span>, g === h) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript getElementsByClassName</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;col&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> j = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;col&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getElementsByClassName&#x27;</span>, i === j) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript getElementById</span></span><br><span class="line"><span class="keyword">let</span> k = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> l = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;wrap&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getElementById&#x27;</span>, k === l) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="Chaining-鍊式串接"><a href="#Chaining-鍊式串接" class="headerlink" title="Chaining 鍊式串接"></a>Chaining 鍊式串接</h1><p>鍊式串接，又稱為方法鍊，是方法間以句點連續串接，可針對單一選擇器執行多個處理。jQuery 大部分的方法其回傳值都是回傳處理後的 jQuery 物件，也就是 return 該物件，並且會記錄在一個叫 prevObject 的物件（指上一層），它是紀錄鍊式上一層的 jQuery 物件，可以在選擇到 jQuery 物件時可以看到它。其中，end() 方法就是指向 prevObject，可以一直 end() 到虛無沒東西 <code>S.fn.init &#123;&#125;</code> 。但也有回傳非 jQuery 物件的方法，如果在方法鍊中使用 next()、end()方法，可能會因此改變處理目標的選擇器，回到原本狀態。</p>
<ul>
<li>可以幫助遍歷遨遊 DOM 結構樹，爬樹方便。</li>
<li>可以讓動畫更豐富。</li>
<li>鍊式中一個方法無法正確執行時，後續的方法也不會被執行。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// != 這種選擇是 jQ 獨創的用法，CSS沒有</span></span><br><span class="line">$(<span class="string">&#x27;li[id!=&quot;one&quot;]&#x27;</span>).hide().delay(<span class="number">500</span>).fadeIn(<span class="number">1400</span>).css(&#123;</span><br><span class="line">  <span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;#F00&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>序　章 - jQuery 介紹與設定</title>
    <url>/2020/09/30/lesson-jq-00.intro/</url>
    <content><![CDATA[<h1 id="jQuery-介紹"><a href="#jQuery-介紹" class="headerlink" title="jQuery 介紹"></a>jQuery 介紹</h1><p>jQuery 的作者是 John Resig，橫空出世於 2006 年 1 月瀏覽器紛爭的戰場，當時各家瀏覽器相容是個難題，jQuery 解決了這方面的問題。jQuery 是 JavaScript 的函式庫，封裝並簡化了 JavaScript 的功能，可以輕鬆找出文件元素 DOM、新增元素內容、編輯 HTML 與 CSS 屬性，定義事件處理器，或是加上動畫效果等等，它使得操作元素變得容易，也有完善的 Ajax 工具，還有一般用途的函式用來處理物件與陣列。這些功能對於當時網站開發都帶來相當的便利，因此 jQuery 很快成為一個時代很重要的函式庫，而如其名稱所示，jQuery 它專注於 Query（查詢）各種功能。</p>
<a id="more"></a>

<h1 id="特色-write-less-do-more"><a href="#特色-write-less-do-more" class="headerlink" title="特色 - write less,do more"></a>特色 - write less,do more</h1><ul>
<li>跨瀏覽器平台，解決不同類型瀏覽器不一致性造成的問題，不需要額外撰寫向下相容的程式碼。</li>
<li>選取元素容易，可以使用 CSS 選擇器。</li>
<li>具有一次選取元素的特性。</li>
<li>事件處理簡單，提供的方法都可在主流瀏覽器正常運作。</li>
<li>提供常用的動畫效果。</li>
<li>有鏈式（method chaining）用來表示一連串的動作。</li>
<li>AJAX 操作簡單。</li>
</ul>
<h1 id="設定與-CDN-服務"><a href="#設定與-CDN-服務" class="headerlink" title="設定與 CDN 服務"></a>設定與 CDN 服務</h1><p>jQuery 的設定非常簡單，只需要有來源即可使用，可從官方下載：</p>
<p><a href="https://jquery.com/download/">官網下載</a></p>
<p>官網分為幾個版本，一般開發使用會使用 uncompressed 版本，而 compressed 版本則是產品發布時會使用的壓縮版本，你可在官網下載頁面找到它們。下載完 jQuery 即可使用 <code>&lt;script&gt;</code> 標籤標記它，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 產品版本</span></span><br><span class="line">&lt;script src = <span class="string">&quot;./js/jquery-3.5.1.min.js&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 開發版本</span></span><br><span class="line">&lt;script src = <span class="string">&quot;./js/jquery-3.5.1.js&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>也可以使用各家提供的 CDN 服務來設定：</p>
<p><a href="https://developers.google.com/speed/libraries#jquery">Google</a><br><a href="https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview#jQuery_Releases_on_the_CDN_0">Mircrosoft</a><br><a href="https://cdnjs.com/libraries/jquery">cdnjs</a><br><a href="https://www.jsdelivr.com/package/npm/jquery">jsdelivr</a></p>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Tailwind CSS 大全</title>
    <url>/2020/09/24/lesson-tailwind-css/</url>
    <content><![CDATA[<h1 id="框架介紹"><a href="#框架介紹" class="headerlink" title="框架介紹"></a>框架介紹</h1><h2 id="Component-UI"><a href="#Component-UI" class="headerlink" title="Component UI"></a>Component UI</h2><p>Bootstrap 是 Component UI 型的 CSS Framework，使用過 Bootstrap 都知道它擁有強大的網格系統與 Components UI 提供設計者使用，另外也有貼心的 Utility 工具調整內容、寬度、距離等等，但在操作切版的自由靈活度上稍嫌不足，多組件設計的方便性讓製作出的版型常常長得很像，不過，它之所以成為全球著名的 CSS Framework 之一，設計的核心就是希望被普遍大眾接受且容易使用，它確實做到了，使用組件來設計 RWD 版型，Bootstrap 非常快速。</p>
<a id="more"></a>

<h2 id="Utility-UI"><a href="#Utility-UI" class="headerlink" title="Utility UI"></a>Utility UI</h2><p>Tailwind CSS 屬於實用工具類型（Utility）的 CSS 框架，與 Bootstrap 最大的不同點在於 Tailwind CSS 全力支持使用工具類型的 Class 讓設計者完成客製化的版型，甚至可以不用寫 CSS 或鮮少就能完成版型設計，它可在 HTML 文件的元素內靈活操作 Class，也因為這特性，必須使用 Class 去組合各種 CSS 的觀念技巧，類似一種組合技的概念，所以客製化切版速度非常快，但比起 Bootstrap，它更考驗了設計者對於 CSS 的了解以及 Tailwind CSS 的環境設定，可能比較不適合新手。</p>
<h1 id="核心設計理念"><a href="#核心設計理念" class="headerlink" title="核心設計理念"></a>核心設計理念</h1><h2 id="實用工具優先"><a href="#實用工具優先" class="headerlink" title="實用工具優先"></a>實用工具優先</h2><p>在傳統設計上，您要為一個區塊去制定屬於它的樣式，因此整個區塊會是這樣定義，例如要設計一個 card，會將 card 拆成幾個部分來放置內容。屬於 UI Component 的設計理念。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* card 樣式 */</span></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &gt; <span class="selector-class">.card-header</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &gt; <span class="selector-class">.card-body</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &gt; <span class="selector-class">.card-footer</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Tailwind CSS，全部使用 Utility Class 來完成，您看不到任何 class 彼此有關係，而且能完成區塊設計，這就是直覺式 Utility 設計理念。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max-w-sm mx-auto flex p-6 bg-white rounded-lg shadow-xl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-shrink-0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;h-12 w-12&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/img/logo.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;ChitChat Logo&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ml-6 pt-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;text-xl text-gray-900 leading-tight&quot;</span>&gt;</span>ChitChat<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-base text-gray-600 leading-normal&quot;</span>&gt;</span>You have a new message!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>會發現這不就是在寫 class 級的行內樣式嗎？真是又臭又髒的結構，沒錯，確實如此，這是因為我們在網頁學習進程裡，學到的是結構、樣式、行為應該要分離，要使用這種方式太可怕了！官網也承認，您是對的喔！</p>
<img data-src="/images/tailwind/tailwind-02.jpg" width="700">

<p>想想，前端似乎來到了顛覆的時代，在 vue.js 也可以發現為了資料驅動畫面，把邏輯、程式述句寫在元素結構裡面，或許是前端的複雜性開始衍生出人類偏愛直覺簡單的邏輯，一潮之後又一潮的循環，因此框架設計的思維也開始轉變。話說回來，雖然 Utility Class 讓結構變長了，換個觀點，您從此不用再浪費時間去為組件想一個 class 名稱，可以很直覺的以 CSS 知識來設計樣式（您得先習慣 Tailwind），所有的 CSS 相關樣式都已經被建置成 Utility 化，盡可能不需要編寫新的 CSS。使用 Tailwind CSS，只需要關心如何使用 Utility Class 來完成區塊設計，設計非常直覺自由，且它與行內樣式不同的是：</p>
<ul>
<li>行內樣式的屬性值是死的，Tailwind 可以系統性自訂 Class，讓外觀具有一致性。</li>
<li>Tailwind 可以在行內 Class 使用響應式設計。</li>
<li>行內樣式無法使用偽類 :hover 或 :focus，Tailwind CSS 可以使用。</li>
</ul>
<h2 id="響應式設計"><a href="#響應式設計" class="headerlink" title="響應式設計"></a>響應式設計</h2><p>您可以在 Utility Class 加入斷點（breakpoints）前綴詞而不用離開 HTML，官方說明每一個 class 都可以使用喔，並提供了四種可被自訂的響應式斷點，它們都可以在 tailwind-config.js 設定。<strong>若覺得裝置尺寸不夠或前綴詞名稱不夠潮，也可以新增來擴充專案需求</strong>。以下範例，在各尺寸會改變文字顏色，注意，它們都加上了響應式的斷點前綴詞。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-6xl sm:text-red-500 md:text-green-500 lg:text-blue-500 xl:text-yellow-500&quot;</span>&gt;</span>KaiFu<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="移動優先"><a href="#移動優先" class="headerlink" title="移動優先"></a>移動優先</h2><p>Tailwind 具有移動優先的概念，這類似於 Bootstrap 與 Foundation 中所使用的系統。也就是您沒加斷點前綴詞，它是對所有尺寸都有效，而加上 md:text-red-500 則表示從 md 尺寸開始之後的文字顏色的改變，在此之前維持另一組樣式（若有設定沒有綴詞的 Class）。在設計時，只需考慮甚麼尺寸開始生效的觀念即可。</p>
<h2 id="使用偽類"><a href="#使用偽類" class="headerlink" title="使用偽類"></a>使用偽類</h2><p>除了響應式設計，也可以在 Class 上使用狀態型偽類（hover:、focus:、active:…），來增加互動性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;bg-transparent hover:bg-blue-500 text-blue-700 hover:text-white&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://tailwindcss.com/docs/pseudo-class-variants">更多 Tailwind CSS 偽類</a></p>
<h2 id="添加樣式與函式功能"><a href="#添加樣式與函式功能" class="headerlink" title="添加樣式與函式功能"></a>添加樣式與函式功能</h2><p>首先，您應該使用現有 Tailwind Utility Class 來設計版型，而不是編寫新的 CSS，但如果要將某些基本樣式用於特定元素，可以使用 @layer 添加，通過使用 @layer 指令，Tailwind 將自動將這些樣式移到同一位置。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> base &#123;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    @apply text-2xl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    @apply text-xl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="font-face-規則"><a href="#font-face-規則" class="headerlink" title="@font-face 規則"></a>@font-face 規則</h3><p>您可以使用相同的方法為@font-face 正在使用的任何自定義字體添加規則：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> base &#123;</span><br><span class="line">  <span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Proxima Nova;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(/fonts/proxima-nova/<span class="number">400</span>-regular.woff) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Proxima Nova;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(/fonts/proxima-nova/<span class="number">500</span>-medium.woff) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="@apply"></a>@apply</h3><p>提取相同重複的 Class 進行組件化，在設計的過程，元素區塊常常重複使用，例如以下的按鈕，使用 Tailwind CSS 來撰寫會需要很長的 Class，按鈕如果重複在文件出現時，會讓整份文件變得又臭又長，此時可以使用 @apply 來提取重複的部分，放在一個制定的 Class 裡面，注意的是，偽類無法直接使用，需要另外寫 .className:hover 來指定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.btn-blue</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="keyword">@apply</span> bg-blue-<span class="number">500</span> text-white font-bold py-<span class="number">2</span> px-<span class="number">4</span> rounded;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.btn-blue</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="keyword">@apply</span> bg-blue-<span class="number">700</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn-blue&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以單行呼叫：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  @apply bg-blue-500;</span><br><span class="line">  <span class="keyword">@apply</span> text-white;</span><br><span class="line">  <span class="keyword">@apply</span> font-bold;</span><br><span class="line">  <span class="keyword">@apply</span> py-<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">@apply</span> px-<span class="number">4</span>;</span><br><span class="line">  <span class="keyword">@apply</span> rounded;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或混合呼叫：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  @apply bg-blue-700;</span><br><span class="line">  <span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-tag">-1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重構-CSS"><a href="#重構-CSS" class="headerlink" title="重構 CSS"></a>重構 CSS</h3><p>重複性還是太多時，依舊要重構，例如以下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@layer</span> components &#123;</span><br><span class="line">  <span class="selector-class">.btn-blue</span> &#123;</span><br><span class="line">    <span class="comment">/* 重複 */</span></span><br><span class="line">    @apply bg-blue-500 text-white font-bold py-2 px-4 rounded;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-blue</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-blue-700;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.btn-gray</span> &#123;</span><br><span class="line">    @apply bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-gray</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-gray-500;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重構後：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@layer</span> components &#123;</span><br><span class="line">  <span class="selector-class">.btn</span> &#123;</span><br><span class="line">    @apply font-bold py-2 px-4 rounded;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.btn-blue</span> &#123;</span><br><span class="line">    @apply bg-blue-500 text-white;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-blue</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-blue-700;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.btn-gray</span> &#123;</span><br><span class="line">    @apply bg-gray-400 text-gray-800;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-gray</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-gray-500;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="layer"><a href="#layer" class="headerlink" title="@layer"></a>@layer</h3><p>將制定的 Class 添加到 Tailwind 對應的區塊。Tailwind 會將這些樣式自動移到與相同的位置 @tailwind components，因此您不必擔心在源文件中正確放置順序。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> components &#123;</span><br><span class="line">  <span class="selector-class">.btn-blue</span> &#123;</span><br><span class="line">    @apply bg-blue-500 text-white font-bold py-2 px-4 rounded;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-blue</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-blue-700;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="responsive"><a href="#responsive" class="headerlink" title="@responsive"></a>@responsive</h3><p>新增自己的 class 且具有 RWD 效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* input */</span></span><br><span class="line"><span class="keyword">@responsive</span> &#123;</span><br><span class="line">  <span class="selector-class">.bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* output */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">640px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sm</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.md</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.lg</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1280px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.xl</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="variants"><a href="#variants" class="headerlink" title="@variants"></a>@variants</h3><p>@variants 可為 Class 產生偽類。請務必注意，偽類是按照您指定的順序產生的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Input */</span></span><br><span class="line"><span class="keyword">@variants</span> hover, focus &#123;</span><br><span class="line">  <span class="selector-class">.banana</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="selector-class">.banana</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover</span>\<span class="selector-pseudo">:banana</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.focus</span>\<span class="selector-pseudo">:banana</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>產生響應式、偽類並放進 utilities 組件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> utilities &#123;</span><br><span class="line">  <span class="keyword">@responsive</span> &#123;</span><br><span class="line">    <span class="keyword">@variants</span> hover, focus &#123;</span><br><span class="line">      <span class="selector-class">.filter-none</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.filter-grayscale</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="theme"><a href="#theme" class="headerlink" title="theme()"></a>theme()</h3><p>使用 theme() 函式來設定屬性值，注意，要使用點表示法訪問嵌套的顏色值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content-area</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - theme(<span class="string">&#x27;spacing.12&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-blue</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">theme</span>(<span class="string">&#x27;colors.blue.500&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="安裝與設定"><a href="#安裝與設定" class="headerlink" title="安裝與設定"></a>安裝與設定</h1><p>使用 Node.js 環境，請先安裝 <a href="https://nodejs.org/zh-tw/">Node.js</a>。</p>
<h2 id="初始化專案"><a href="#初始化專案" class="headerlink" title="初始化專案"></a>初始化專案</h2><p>建立一個專案目錄，在此專案目錄下輸入以下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h2 id="安裝-Tailwind-CSS"><a href="#安裝-Tailwind-CSS" class="headerlink" title="安裝 Tailwind CSS"></a>安裝 Tailwind CSS</h2><p>在專案目錄下安裝 Tailwind CSS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install tailwindcss</span><br></pre></td></tr></table></figure>

<h2 id="建立-CSS-檔案"><a href="#建立-CSS-檔案" class="headerlink" title="建立 CSS 檔案"></a>建立 CSS 檔案</h2><ol>
<li>在專案根目錄下建立一個目錄 src，並在 src 下建立 css 目錄。</li>
<li>在 css 目錄下，建立 tailwind.css。</li>
<li>引入 Tailwind CSS 三個組件區塊，分別是 base、components、utilities。Tailwind 主要的組件區塊。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 基本 HTML 樣式，包含調整過的 Normalize.css */</span></span><br><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="comment">/* 組件區塊 */</span></span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="comment">/* Utility區塊 */</span></span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure>

<p>現在，可以做個測試，在根目錄下，輸入以下指令編譯出 CSS，<strong>注意路徑檔名是否正確</strong>，編譯出 Tailwind CSS 檔案有 2MB 以上，容量非常大，Bootstrap 約 10000 多行樣式碼，Tailwind 有 100000 多行樣式碼，可以說是十倍界王拳？不擔心，之後可以使用 PurgeCSS 進行瘦身。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx tailwindcss build .&#x2F;src&#x2F;css&#x2F;tailwind.css -o .&#x2F;src&#x2F;css&#x2F;style.css</span><br></pre></td></tr></table></figure>

<h2 id="建立-postcss-config-js"><a href="#建立-postcss-config-js" class="headerlink" title="建立 postcss.config.js"></a>建立 postcss.config.js</h2><p>在專案根目錄下建立 postcss.config.js，這是編譯 tailwind.css 前的設定檔，等等需要安裝其相關套件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="keyword">const</span> purgecss = <span class="built_in">require</span>(<span class="string">&#x27;@fullhuman/postcss-purgecss&#x27;</span>)(&#123;</span><br><span class="line">  content: [<span class="string">&#x27;./src/**/*.html&#x27;</span>, <span class="string">&#x27;./src/**/*.vue&#x27;</span>, <span class="string">&#x27;./src/**/*.jsx&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  defaultExtractor: <span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> broadMatches = content.match(<span class="regexp">/[^&lt;&gt;&quot;&#x27; `\s]*[^&lt;&gt;&quot;&#x27;` \s:]/g</span>) || []</span><br><span class="line">    <span class="keyword">const</span> innerMatches = content.match(<span class="regexp">/[^&lt;&gt;&quot;&#x27; `\s.()]*[^&lt;&gt;&quot;&#x27;` \s.():]/g</span>) || []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> broadMatches.concat(innerMatches)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="built_in">require</span>(<span class="string">&#x27;tailwindcss&#x27;</span>), <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>), ...(process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? [purgecss] : [])],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PurgeCSS-Postcss"><a href="#PurgeCSS-Postcss" class="headerlink" title="PurgeCSS + Postcss"></a>PurgeCSS + Postcss</h2><p>PurgeCSS 是將 CSS 瘦身的好物，打包時會將沒使用到的 Class 拿掉，而 Postcss 可以編譯 CSS 延伸的功能，例如自動前綴詞，安裝以下的套件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install @fullhuman&#x2F;postcss-purgecss --save-dev</span><br><span class="line">npm i postcss postcss-cli</span><br><span class="line">npm i autoprefixer</span><br></pre></td></tr></table></figure>

<h2 id="打開-package-json-新增指令"><a href="#打開-package-json-新增指令" class="headerlink" title="打開 package.json 新增指令"></a>打開 package.json 新增指令</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指令需對應檔案路徑位置</span></span><br><span class="line"><span class="comment">// npm run tailwind =&gt; 編譯出 css</span></span><br><span class="line"><span class="comment">// npm run postcss =&gt; Tailwind 瘦身 css</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;tailwind&quot;</span>: <span class="string">&quot;npx tailwindcss build ./src/css/tailwind.css -o ./src/css/style.css&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss&quot;</span>: <span class="string">&quot;postcss ./src/css/tailwind.css -o ./src/css/style.css&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>輸入以下指令編譯出瘦身過後的 CSS 檔。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run postcss</span><br></pre></td></tr></table></figure>

<h1 id="重要的-tailwind-config-js"><a href="#重要的-tailwind-config-js" class="headerlink" title="重要的 tailwind.config.js"></a>重要的 tailwind.config.js</h1><h2 id="建立-tailwind-config-js"><a href="#建立-tailwind-config-js" class="headerlink" title="建立 tailwind.config.js"></a>建立 tailwind.config.js</h2><p>tailwind.config.js 是 <strong>Tailwind CSS 最重要的設定檔</strong>，如果要客製化自己的 Tailwind，全部在這裡設定，您也可以在 tailwind.config.js 設置 purge 瘦身，並且再進行一次 npm run tailwind 編譯，就會得到使用過的 class，前提是要先要有文件，並且該文件 link 了樣式檔使用了 Utility Class，tailwind.config.js 才會去偵測。另外，使用 VSCode 套件 Tailwind CSS IntelliSense，沒有該檔案也無法有提示的作用喔。</p>
<ul>
<li>以下指令會產生全部預設的配置，它會在專案根目錄：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx tailwindcss init --full</span><br></pre></td></tr></table></figure>

<ul>
<li>以下指令只會產生設定檔初始架構：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 tailwind.config.js 設定 purge</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  future: &#123;</span><br><span class="line">    removeDeprecatedGapUtilities: <span class="literal">true</span>,</span><br><span class="line">    purgeLayersByDefault: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  purge: &#123;</span><br><span class="line">    enabled: <span class="literal">true</span>,</span><br><span class="line">    content: [<span class="string">&#x27;./src/**/*.html&#x27;</span>, <span class="string">&#x27;./src/**/*.vue&#x27;</span>, <span class="string">&#x27;./src/**/*.jsx&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自訂-tailwind-config-js"><a href="#自訂-tailwind-config-js" class="headerlink" title="自訂 tailwind.config.js"></a>自訂 tailwind.config.js</h2><ul>
<li>您可以自訂義屬於自己的 class，例如：想新增一個 kaifu class，會定義出 text-kaifu、bg-kaifu、border-kaifu 等相關的 class，可以自由修改 CSS 屬性相關的屬性值，或是修改斷點 RWD 的尺寸，tailwind.config.js 設定檔寫得很清楚。</li>
</ul>
<img data-src="/images/tailwind/tailwind-01.png" width="700">

<h3 id="使用流程建議"><a href="#使用流程建議" class="headerlink" title="使用流程建議"></a>使用流程建議</h3><ul>
<li><p>可先使用 CDN 配合官網文件熟悉 Utility Class。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>或 <code>npm run tailwind</code> 自訂義生成一整包來使用，若有設定 purges，要先 enabled:false。</p>
</li>
<li><p>搭配 VSCode 套件提示 class 名稱 <a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss">Tailwind CSS IntelliSense</a>，<strong>注意，必須要有 tailwind.config.js 才會有提示！</strong></p>
</li>
<li><p>設計完成後再進行瘦身， <code>npm run postcss</code> 或 <code>npm run tailwind</code>。</p>
</li>
</ul>
<h1 id="第三方套件"><a href="#第三方套件" class="headerlink" title="第三方套件"></a>第三方套件</h1><h2 id="awesome-tailwindcss"><a href="#awesome-tailwindcss" class="headerlink" title="awesome-tailwindcss"></a><a href="https://github.com/aniftyco/awesome-tailwindcss">awesome-tailwindcss</a></h2><h1 id="重點補充"><a href="#重點補充" class="headerlink" title="重點補充"></a>重點補充</h1><ul>
<li><a href="https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js">tailwind.config.js 改壞了怎麼辦？</a></li>
</ul>
]]></content>
      <tags>
        <tag>TailwindCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 偽元素</title>
    <url>/2020/09/22/lesson-css-10.before-after/</url>
    <content><![CDATA[<h3 id="偽類與偽元素"><a href="#偽類與偽元素" class="headerlink" title="偽類與偽元素"></a>偽類與偽元素</h3><p>偽類（Pseudo-classes ）與偽元素（Pseudo-element）兩者都是 CSS 為了擴張變化性而衍生出的選擇器，偽類以元素狀態、結構為主要的選擇方式：</p>
<a id="more"></a>

<ul>
<li>:checked（狀態）</li>
<li>:focus（狀態）</li>
<li>:root（結構）</li>
<li>:first-child（結構）</li>
<li>:nth-child（結構）</li>
</ul>
<p>而偽元素則是以 before、after 這兩兄弟為主要被探討的對象，可以說是偽元素的代名詞！截至目前為止，偽元素家族比起偽類家族，算是少數。追朔早期，偽元素與偽類一樣，都是以單冒號 : 為主，至今依舊可以使用單冒號來選擇偽元素，但自 CSS3 開始，偽類與偽元素開始分家，偽元素被定義成雙冒號 :: 作為選擇器，隨著前端思維的浪潮的前進，<strong>你應該使用雙冒號來表示偽元素，不要使用單冒號</strong>。</p>
<ul>
<li>::before</li>
<li>::after</li>
<li>::first-line</li>
<li>::first-letter</li>
<li>::selection</li>
<li>::backdrop</li>
</ul>
<p>以瀏覽器來看偽類與偽元素，進入開發者模式，偽類不會出現在 Elements 結構畫面，但是偽元素 ::before、::after 會在被選擇的元素內容前後出現，雖然它們可以長在 DOM 身上，但依舊不被 DOM 接納，只能被 CSSOM 所渲染，因此不能使用 JavaScript 或 jQuery 任何獲取 DOM 元素的方式選擇到偽元素。</p>
<h3 id="偽元素建立與特性"><a href="#偽元素建立與特性" class="headerlink" title="偽元素建立與特性"></a>偽元素建立與特性</h3><p>這裡的偽元素指的是 ::before 與 ::after 。</p>
<ol>
<li>content 是必須的屬性，沒有無法建立偽元素。</li>
<li>被建立時，類型為 inline。</li>
<li>通常要 display 轉型才能做較多的事情。</li>
<li>與絕對定位一起使用時，別忘記本體的定位點。</li>
<li>img、input、iframe 等置換元素無法使用偽元素。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 建立偽元素時，一定要有 content */</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="偽元素是元素的分身"><a href="#偽元素是元素的分身" class="headerlink" title="偽元素是元素的分身"></a>偽元素是元素的分身</h3><p>元素如果是主體，::before 與 ::after 兩兄弟是元素主體的分身，也就是<strong>元素可以多出兩個容器來做更多事情</strong>。就好像 1942~1945 射擊遊戲兩側的小飛機，好吧，我知道沒人聽過。</p>
<img data-src="/images/css/css-before-after-01.jpg" width="700">

<p>又或像是火影忍者的影分身之術，聽過了．．．吧。</p>
<img data-src="/images/css/css-before-after-02.jpg" width="700">

<p>這兩分身應用非常多元、非常廣，難以一一談論，能發揮在各種場合，大致上可以分為<strong>修飾主體缺少的部分</strong>，或是<strong>替主體增加更多層次的樣式</strong>，又或是<strong>三位一體組合的概念</strong>，舉個例子，我要畫米老鼠的頭部，元素主體畫了圓臉，兩分身再各畫一隻圓耳朵，這樣只用了一個元素做到了三個圓的樣式。因此，<strong>偽元素具有節省元素數量的效果</strong>，不用為了做一個效果而多使用一個元素標籤。</p>
<ul>
<li><a href="https://powerkaifu.github.io/CSS_Naruto_Before_After/">鳴人的影分身</a></li>
</ul>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 動畫</title>
    <url>/2020/09/08/lesson-css-09.animation/</url>
    <content><![CDATA[<h3 id="動畫-Animation"><a href="#動畫-Animation" class="headerlink" title="動畫 - Animation"></a>動畫 - Animation</h3><p>「轉場」與「動畫」可說是兄弟，兩人分工負責了 CSS 世界的動態效果。轉場可以在觸發狀態時，讓起始、結束狀態兩組樣式產生一組簡單的補間動畫，它是容易且強大的效果，但若要製作較為複雜的效果時，這就不是轉場的工作囉，因為它屬於<strong>一次性</strong>的動畫，例如黑色與白色的補間動畫。若是要黑色變成黃色，再變成白色，再變其他顏色，這時候就是動畫（animation）登場的時候。</p>
<a id="more"></a>

<p>其概念與早期動畫軟體 Flash 影格（keyframes）一樣（<strong><em>為 Flash 默哀，1996 年 4 月 10 日 - 2020 年 12 月 31</em></strong>），也就是可以設定好幾個關鍵影格的概念，來告訴瀏覽器在目前關鍵影格到下一個關鍵影格之間要渲染的樣式效果，因此，每個關鍵影格與關鍵影格之間都將會是一組補間動畫，可以形成好幾組補間動畫，產生強大複雜且可循環的動畫效果。</p>
<h3 id="動畫設定"><a href="#動畫設定" class="headerlink" title="動畫設定"></a>動畫設定</h3><p>動畫設定以 @keyframes 宣告一組動畫的開始，它必須要一個<strong>動畫名稱</strong>，{} 大括號區塊裡面描述著動畫的循環行為，可以用百分比來告訴動畫時間分配的進度，也可以用 from 或 to 關鍵字。但請記住一件事，@keyframes 只掌管動畫時間的進度分配及紀錄 CSS 屬性，至於持續時間？重複幾次？延遲時間？速率如何？動畫播放方向？動畫終止時的狀態？動畫是否暫停？等等都由動畫其它屬性來設定，動畫很多屬性，對吧，這就是它比轉場可以設定更複雜的效果原因。以下為一個簡單的動畫範例，當滑鼠移到 .box 元素上時，在 5 秒內，<code>紅&gt;綠&gt;藍&gt;綠&gt;紅</code> 順序變化顏色，並且可以無限循環。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: animate <span class="number">5s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> animate &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  25% &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  75% &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="動畫屬性"><a href="#動畫屬性" class="headerlink" title="動畫屬性"></a>動畫屬性</h3><table>
<thead>
<tr>
<th>屬性</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>animation-name</td>
<td>動畫名稱</td>
</tr>
<tr>
<td>animation-duration</td>
<td>動畫持續時間，預設 0，單位 s 或 ms。</td>
</tr>
<tr>
<td>animation-delay</td>
<td>動畫延遲播放時間，預設 0，單位 s 或 ms。</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>動畫播放次數，預設 1。其他還有 infinite。</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>動畫加速度函式，預設 ease。其他還有：linear、ease-in、ease-out、ease-in-out</td>
</tr>
<tr>
<td>animation-direction</td>
<td>動畫播放方向，預設 normal。其他還有 reverse、alternate、alternate-reverse。</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>動畫播放前後模式，預設 none。其他還有 forwards、backwards、both。</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>動畫播放或暫停狀態，預設 running。其他還有 paused。</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 動畫名稱 */</span></span><br><span class="line">  <span class="attribute">animation-name</span>: animate;</span><br><span class="line">  <span class="comment">/* 動畫間隔 */</span></span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="comment">/* 速度函式 */</span></span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="comment">/* 動畫延遲 */</span></span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0.1s</span>;</span><br><span class="line">  <span class="comment">/* 播放次數 */</span></span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 循環交替或反向播放   */</span></span><br><span class="line">  <span class="comment">/* normal（默認，正常播放）、revers（反向播放） */</span></span><br><span class="line">  <span class="comment">/* alternate（輪流交替播放，動畫在奇數次 1,3,5 正向播放，在偶數次 2,4,6 反向播放） */</span></span><br><span class="line">  <span class="comment">/* alternate-reverse（動畫在奇數次 1,3,5 反向播放，在偶數次 2,4,6 正向播放） */</span></span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">  <span class="comment">/* forwards（保留動畫結束後的樣式，例如顏色、位置） */</span></span><br><span class="line">  <span class="comment">/* backwards（返回動畫一開始的樣式，例如顏色、位置） */</span></span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 縮寫 */</span></span><br><span class="line">  <span class="comment">/* animation: name duration timing-function delay iteration-count direction fill-mode play-state; */</span></span><br><span class="line">  <span class="attribute">animation</span>: animate <span class="number">1s</span> infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 宣告關鍵影格為動畫、動畫名稱、開始、結束 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> animate &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="動畫速率"><a href="#動畫速率" class="headerlink" title="動畫速率"></a>動畫速率</h3><p>「動畫速率」與「轉場速率」是一樣的設定，請參考<a href="https://powerkaifu.github.io/2020/09/07/lesson-css-08.transition/">轉場</a></p>
<h3 id="動畫延遲"><a href="#動畫延遲" class="headerlink" title="動畫延遲"></a>動畫延遲</h3><p>「動畫延遲」與「轉場延遲」是一樣的設定，可以注意的是當延遲時間為負值時，例如 -1s、-2s，得到的結果就「不會延遲，而是快轉」，假設一段動畫 animation-duration 要 5 秒，animation-delay 設定為 -2s，那麼動畫將會直接從第 2 秒的位置開始播放，播放 3 秒後停止 ( 5-2=3 的概念 )。</p>
<h3 id="動畫權重"><a href="#動畫權重" class="headerlink" title="動畫權重"></a>動畫權重</h3><p>正在執行元素的動畫（@keyframes），權重會提高至行內樣式權重（比 ID 權重高），此外，不要在動畫宣告區塊的屬性後方加上 !important，沒有這種用法，會被忽略。</p>
<h3 id="多組動畫"><a href="#多組動畫" class="headerlink" title="多組動畫"></a>多組動畫</h3><p>與轉場一樣可以套用多組效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可以套用一個以上的動畫到同個元素，屬性值需對應，fadeIn 1s、blink 3s */</span></span><br><span class="line"><span class="selector-class">.fade</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: fadeIn, blink;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">1s</span>, <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="省略-from-與-to"><a href="#省略-from-與-to" class="headerlink" title="省略 from 與 to"></a>省略 from 與 to</h3><p>沒有指定 0% 或 from 的 keyframe，瀏覽器會以要附加動畫的屬性原始值，建構一個 0% 的 keyframe，同樣的，沒有定義 100% 或 to 的 keyframe，瀏覽器會建構一個 100% 的 keyframe。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 假設原先設定是 background-color:red */</span></span><br><span class="line"><span class="keyword">@keyframes</span> animation &#123;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 瀏覽器會自動建構 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> animation &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>相同的 keyframe 可以歸類為一起</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> animation &#123;</span><br><span class="line">  0%,</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>動畫的使用其中一個是常被設計成 CSS class，再使用 JavaScript 或 jQuery 新增或刪除。</p>
<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>使用到 top、right、bottom、left 作為動畫 keyframe 裡面的屬性時，要先確認方框元素有沒有 position。</p>
<h3 id="display-none"><a href="#display-none" class="headerlink" title="display:none"></a>display:none</h3><p>display:none 會中斷動畫的播放，並在下次設定 display:block 或其他不為 none 的值時，動畫會重頭再跑一次，而不會接續在中斷點。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 轉場</title>
    <url>/2020/09/07/lesson-css-08.transition/</url>
    <content><![CDATA[<h3 id="轉場-transition"><a href="#轉場-transition" class="headerlink" title="轉場 - transition"></a>轉場 - transition</h3><p>轉場指的是從一個<strong>初始狀態</strong>到另一個<strong>結束狀態</strong>，兩種狀態樣式轉變補間的過程。它通常發生於與使用者的互動，但也有可能是程式改變了 class、ID 或使用了其他狀態。當觸發條件發生，瀏覽器會套用轉場效果，在兩種樣式間漸進發生。最好的例子就是 :hover 偽類，也就是當滑鼠移到元素時所發生的狀態改變。無論轉場或動畫的使用，關係到與使用者的互動感受，因此 duration 時間拿捏非常重要。</p>
<a id="more"></a>

<p>以下是當滑鼠移到盒子上時，可以讓背景顏色<strong>延遲 1 秒</strong>由灰色慢慢變成黃色<strong>持續 1 秒</strong>的轉場範例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 轉場 bakcground-color 的縮寫 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">1s</span> ease <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="轉場屬性"><a href="#轉場屬性" class="headerlink" title="轉場屬性"></a>轉場屬性</h3><p>轉場可以設定四個屬性值，分別為 transition-property（轉場指定 CSS 屬性）、transition-duration（轉場持續時間）、transition-timing-function（轉場速率）以及　 transition-delay（轉場延遲時間），我們可以個別設定轉場屬性，將先前範例縮寫改成個別屬性如下所示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="comment">/* 適用所有元素以及偽元素::before、::after */</span></span><br><span class="line">  <span class="attribute">transition-property</span>: background-color;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重要規則"><a href="#重要規則" class="headerlink" title="重要規則"></a>重要規則</h3><ul>
<li>轉場個別屬性若要設定多屬性值，要以逗號來區隔，代表每個屬性轉場持續時間、轉場速率、延遲時間都不相同。</li>
<li>沒有轉場效果或停用可設定 transition-property:none，或將持續與延遲時間設定為 0s，轉場沒有發生作用一樣。</li>
<li>可以用 all 來指定全部 css 可支援 transition 的屬性效果，但預設已經是 all。</li>
<li>border-style 不具備轉場效果。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* 逗號隔開屬性，分別對應了各自屬性、持續時間、轉場速率、延遲時間 */</span></span><br><span class="line">  <span class="attribute">transition-property</span>: color, border, border-radius, transform, opacity;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>, <span class="number">2s</span>, <span class="number">3s</span>, <span class="number">4s</span>, <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease, ease-in, ease-out, linear, ease;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">1s</span>, <span class="number">2s</span>, <span class="number">3s</span>, <span class="number">4s</span>, <span class="number">5s</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 沒有轉場效果 */</span></span><br><span class="line">  <span class="attribute">transition-property</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>當 transform-property 少於持續時間的個數，會忽略多出來的持續時間。</li>
<li>當 transform-property 多於持續時間的個數，則會以流水號重複去分配持續時間，例如 2 個，則會 1,2,1,2,1,2 去分配。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* color、border-radius、opacity、width 會被分配到 1 秒 */</span></span><br><span class="line">  <span class="comment">/* border、transform、box-shadow、padding 會被分配到 2 秒 */</span></span><br><span class="line">  <span class="attribute">transition-property</span>: color, border, border-radius, transform, opacity, box-shadow, width, padding;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>, <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="轉場速率"><a href="#轉場速率" class="headerlink" title="轉場速率"></a>轉場速率</h3><p><strong>轉場速率</strong>與<strong>動畫速率</strong>都是相同的設定，除了分為 ease、ease-in、ease-out、ease-in-out、linear 五個基礎可以設定的數值外，還有 cubic-bezier() 函式與 step-start、step-end、steps(n,start)、steps(n,end) 四種步進函式的設定。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">1s</span> <span class="number">1s</span>;</span><br><span class="line">  <span class="comment">/* 五種基礎速率函式 */</span></span><br><span class="line">  <span class="comment">/* ease（預設）、ease-in、ease-out、ease-in-out、linear */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* cubic-bezier() 函式 */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.12</span>, <span class="number">0</span>, <span class="number">0.39</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 步進函式 */</span></span><br><span class="line">  <span class="comment">/* step-start 等於 steps(1,start) */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: step-start;</span><br><span class="line">  <span class="comment">/* step-end 等於 steps(1,end) */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: step-end;</span><br><span class="line">  <span class="comment">/* steps(5,start) 第一步動畫開始就步近 */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">steps</span>(<span class="number">5</span>, start);</span><br><span class="line">  <span class="comment">/* steps(5,end) 延遲一步動畫才開始步近 */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">steps</span>(<span class="number">5</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="速率函式"><a href="#速率函式" class="headerlink" title="速率函式"></a>速率函式</h3><p>更多 cubic-bezier 函式可參考：<a href="https://easings.net/">https://easings.net/</a></p>
<table>
<thead>
<tr>
<th>非官方名稱</th>
<th>三次貝茲速率函式</th>
</tr>
</thead>
<tbody><tr>
<td>easeInSine</td>
<td>cubic-bezier(0.47,0,0.745,0.715)</td>
</tr>
<tr>
<td>easeOutSine</td>
<td>cubic-bezier(0.39,0.575,0.565,1)</td>
</tr>
<tr>
<td>easeInOutSine</td>
<td>cubic-bezier(0.445,0.05,0.55,0.95)</td>
</tr>
<tr>
<td>easeInQuad</td>
<td>cubic-bezier(0.55,0.085,0.68,0.53)</td>
</tr>
<tr>
<td>easeOutQuad</td>
<td>cubic-bezier(0.25,0.46,0.45,0.94)</td>
</tr>
<tr>
<td>easeInOutQuad</td>
<td>cubic-bezier(0.455,0.03,0.515,0.955)</td>
</tr>
<tr>
<td>easeInCubic</td>
<td>cubic-bezier(0.55,0.055,0.675,0.19)</td>
</tr>
<tr>
<td>easeOutCubic</td>
<td>cubic-bezier(0.215,0.61,0.355,1)</td>
</tr>
<tr>
<td>easeInOutCubic</td>
<td>cubic-bezier(0.645,0.045,0.355,1)</td>
</tr>
<tr>
<td>easeInQuart</td>
<td>cubic-bezier(0.895,0.03,0.685,0.22)</td>
</tr>
<tr>
<td>easeOutQuart</td>
<td>cubic-bezier(0.165,0.84,0.44,1)</td>
</tr>
<tr>
<td>easeInOutQuart</td>
<td>cubic-bezier(0.77,0,0.175,1)</td>
</tr>
<tr>
<td>easeInQuint</td>
<td>cubic-bezier(0.755,0.05,0.855,0.06)</td>
</tr>
<tr>
<td>easeOutQuint</td>
<td>cubic-bezier(0.23,1,0.32,1)</td>
</tr>
<tr>
<td>easeInOutQuint</td>
<td>cubic-bezier(0.86,0,0.07,1)</td>
</tr>
<tr>
<td>easeInExpo</td>
<td>cubic-bezier(0.95,0.05,0.795,0.035)</td>
</tr>
<tr>
<td>easeOutExpo</td>
<td>cubic-bezier(0.19,1,0.22,1)</td>
</tr>
<tr>
<td>easeInOutExpo</td>
<td>cubic-bezier(1,0,0,1)</td>
</tr>
<tr>
<td>easeInCirc</td>
<td>cubic-bezier(0.6,0.04,0.98,0.335)</td>
</tr>
<tr>
<td>easeOutCirc</td>
<td>cubic-bezier(0.075,0.82,0.165,1)</td>
</tr>
<tr>
<td>easeInOutCirc</td>
<td>cubic-bezier(0.785,0.135,0.15,0.86)</td>
</tr>
<tr>
<td>easeInBack</td>
<td>cubic-bezier(0.6,-0.28,0.735,0.045)</td>
</tr>
<tr>
<td>easeOutBack</td>
<td>cubic-bezier(0.175,0.885,0.32,1.275)</td>
</tr>
<tr>
<td>easeInOutBack</td>
<td>cubic-bezier(0.68,-0.55,0.265,1.55)</td>
</tr>
</tbody></table>
<h3 id="負值延遲時間"><a href="#負值延遲時間" class="headerlink" title="負值延遲時間"></a>負值延遲時間</h3><p>transition-delay 如果為負數時，會與 transition-duration 相減，得到新的轉場時間。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* 轉場會變成 持續時間只有 1s，如果transition-delay -2s，那麼轉場持續時間會是 0，不會有持續時間的效果  */</span></span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">transition-delay</span>: -<span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="轉場與回場"><a href="#轉場與回場" class="headerlink" title="轉場與回場"></a>轉場與回場</h3><p>若將轉場屬性設定在初始狀態，那麼具有<strong>轉場</strong>與<strong>回場</strong>雙重效果，但若將轉場屬性設定在觸發狀態，那麼只會有轉場效果，而不會有回場效果。例如將 transition-delay 設定在觸發狀態，此時延遲時間只有轉場效果，回場時就沒有延遲時間。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.2s</span> background-color linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 變形</title>
    <url>/2020/09/07/lesson-css-07.transform/</url>
    <content><![CDATA[<h3 id="變形-transform"><a href="#變形-transform" class="headerlink" title="變形 - transform"></a>變形 - transform</h3><p>transform（變形）、translate（平移）、transition（轉場） 是剛學習 CSS 常搞混的三個名詞，transform 是改變盒子的形狀與行為，translate 是 transform 的其中一個函式，而 transition 指的是樣式屬性兩種狀態的變化。變形（transform）的出現在於早期網頁設計只有四四方方的矩形所組合成版型，而隨著人們的想法，開始有人覺得如果不再是矩形呢？有了想打破這矩形的限制，transform 就這樣誕生了。</p>
<blockquote>
<p>變形有四個函式，分別是平移（translate）、縮放（scale）、旋轉（rotate）、歪斜（skew）。</p>
</blockquote>
<a id="more"></a>

<h3 id="座標系統"><a href="#座標系統" class="headerlink" title="座標系統"></a>座標系統</h3><p>CSS 世界使用的座標系統是「笛卡爾座標系統」，沒錯，就是那位「我思，故我在」的笛卡爾。X 軸跟我們認知是一樣，往右為正值，往左為負值；但有點不同的是，一般我們的認知是 Y 軸 的正值應該是往上，但是對於 CSS 而言，不管是定位（position）、變形（transform）又或是使用文字陰影（text-shadow）、盒陰影（box-shadow）， Y 的正值是相反，也就是往下。而最後的 Z 軸，就如同定位的 z-index，朝著使用者是數值是越大，遠離使用者為數值越小。</p>
<blockquote>
<p>X 軸（右正、左負），Y 軸（下正、上負），Z 軸（朝向使用者數值越大、遠離使用者數值越小）</p>
</blockquote>
<img data-src="/images/css/css-transform-01.png" width="700">

<h3 id="球面系統"><a href="#球面系統" class="headerlink" title="球面系統"></a>球面系統</h3><p>其次，CSS 變形中旋轉（rotate）使用的是球面系統（spherical system）。可以想成每個軸位方向如同一根棍子插入球體時，此時球體可以轉動的方向。</p>
<blockquote>
<p>X 軸（前後翻轉）、Y 軸（左右翻轉）、Z 軸（平面旋轉）</p>
</blockquote>
<img data-src="/images/css/css-transform-02.png" width="700">

<h3 id="重要規則"><a href="#重要規則" class="headerlink" title="重要規則"></a>重要規則</h3><p>變形可以套用多個函式，寫法是之間<strong>不需要逗點分隔</strong>。變形函式的順序會由左至右套用，<strong>順序很重要，它會影響整個變形的結果</strong>。例如先旋轉再做平移，會往旋轉後的角度平移；而先平移再選轉，則是平移後再做旋轉。變形只要任何一個函式不符合語法，就會導致整個變形錯誤被忽略。另外，變形無法對任何行內盒（inline box），必須作用在 block、inline-block、flex-item、grid-item 這些等級盒子上。最後，變形是不會疊加，重寫變形只會讓後方覆寫前方效果，以最後一次變形為主。但這規則卻有個例外，那就是遇到轉場（transition）或動畫（animation），會疊加轉換的效果。</p>
<h3 id="平移-translate"><a href="#平移-translate" class="headerlink" title="平移 - translate"></a>平移 - translate</h3><p>平移可以接受絕對數值或百分比（除了 Z 軸），只有 X、Y 軸接受百分比的設定，它會依據該盒子 width、height 的值為依據，進行百分比的計算。3D 版的 translate <strong>必須要有三個數值</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.translate</span> &#123;</span><br><span class="line">  <span class="comment">/* 可以設定 X、Y 2D 平移 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="comment">/* 可以設定單軸 X 平移 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>);</span><br><span class="line">  <span class="comment">/* 可以設定單軸 Y 平移 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">  <span class="comment">/* 也有 3D 版，一定要設定三個數值 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100px</span>, <span class="number">100px</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="縮放-scale"><a href="#縮放-scale" class="headerlink" title="縮放 - scale"></a>縮放 - scale</h3><p>顧名思義，「縮」就是縮放的縮，「放」就是縮放的放，<strong>倍數縮放</strong>元素的寬、高。3D 版的 scale <strong>必須要有三個數值</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scale</span> &#123;</span><br><span class="line">  <span class="comment">/* 數值是以倍數顯示 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">/* 若是負數會呈現倒影型態 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(-<span class="number">2</span>);</span><br><span class="line">  <span class="comment">/* 可以設定單軸 X 縮放 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">/* 可以設定單軸 Y 縮放 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 改變原點 */</span></span><br><span class="line">  <span class="comment">/* 預設值為 50% 50%，就是在 box 中心點。如果省略第 2 個值，會視為 center (50%)  */</span></span><br><span class="line">  <span class="comment">/* 數值可以是單位 em、px、%、left、right、top、bottom；center */</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: center center;</span><br><span class="line">  <span class="comment">/* scale3d()設定數值跟 translate3d 一樣要 3 個數值 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="旋轉-rotate"><a href="#旋轉-rotate" class="headerlink" title="旋轉 - rotate"></a>旋轉 - rotate</h3><p>旋轉函式涉及到 3D，是所有變形函式中最不容易理解的函式，因為它並須搭配球體系統以及 trasform-style（選擇 3D 樣式） 與 perspective（透視）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rotate</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="comment">/* 記得要加單位 deg，正為順時針，負為逆時針 */</span></span><br><span class="line">  <span class="comment">/* 可以搭配 transform-style、perspective 屬性作到翻轉透視的效果。 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="comment">/* rotate3D(1, 1, 0, 45deg) 不等於 rotateX(45deg)、rotateY(45deg)、rotateZ(0deg) */</span></span><br><span class="line">  <span class="comment">/* 其實是 rotate3d(300px,300px,300px,45deg)，指旋轉的中心軸會從原點指向右方300px、下方300px，旋轉 45deg */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate3D</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="歪斜-skew"><a href="#歪斜-skew" class="headerlink" title="歪斜 - skew"></a>歪斜 - skew</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.skew</span> &#123;</span><br><span class="line">  <span class="comment">/* 記得要加單位 deg */</span></span><br><span class="line">  <span class="comment">/* 第一個數值為 X 的歪斜角，第二個數值為 Y 的歪斜角 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">45deg</span>, <span class="number">0deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewY</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="原點-transform-origin"><a href="#原點-transform-origin" class="headerlink" title="原點 transform-origin"></a>原點 transform-origin</h3><p>變形大部分的屬性都會有一個原點去支撐該屬性變化的依據，例如旋轉時，原點的初始值為 50%,50%。也就是正中央的位置，因此我們會看到旋轉式依據中心點去做旋轉，我們也可以使用 transform-origin 這個屬性改變原點的位置，讓變形擁有更多變化性。它由水平方向、垂直方向兩個值組成，預設為 50%,50%（center,center），也可以使用關鍵字 left、right、center、bottom、top 去組合，若是以百分比則是以元素尺寸的基準去計算。最後注意的是，<strong>translate（平移）沒有所謂的原點</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transform-origin</span> &#123;</span><br><span class="line">  <span class="comment">/* 改變原點 */</span></span><br><span class="line">  <span class="comment">/* 預設值為 50% 50%，就是在 box 中心點。如果省略第 2 個值，會視為 center (50%)  */</span></span><br><span class="line">  <span class="comment">/* 數值可以是單位 em、px、%、left、right、top、bottom；center */</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 定位</title>
    <url>/2020/08/30/lesson-css-06.position/</url>
    <content><![CDATA[<h3 id="定位-position"><a href="#定位-position" class="headerlink" title="定位 - position"></a>定位 - position</h3><p>定位（position）在 CSS 扮演了指定元素盒在視埠（瀏覽器視窗）的某個位置，它會根據某個元素或是父元素為基準而進行偏移。常用的定位分為相對定位（relative）、絕對定位（absolute）以及固定定位（fixed）。其中，<strong>相對定位、絕對定位之間的關係，是剛學 CSS 必須要了解的重點</strong>，也就是它們在元素中所扮演的腳色，尤其是以父元素為基準時兩者關係所產生的偏移。定位有著別人沒有的特性，當元素進行定位後，元素會升至「定位層」（position-level），它是比正常流向（normal-flow）與浮動層（float-level）還高的 z 軸層級（z-index）。</p>
<a id="more"></a>

<h3 id="西天取經"><a href="#西天取經" class="headerlink" title="西天取經"></a>西天取經</h3><p>以西遊記舉例，唐僧帶領了師徒三人及白龍馬前往西天取經，遭逢九九八十一難關…，我們現在假設父元素是唐僧，子元素分別是會七十二變的悟空、好色諂媚愛搞分化的八戒、無聲努力辛勤的沙僧以及偶爾串場的白龍馬，我們將它們全部轉型為 inline-block 橫向流動排列，目前取經團子成員都乖乖在唐僧管理下正常流向排列著。</p>
<img data-src="/images/css/css-position-01.png" width="700">

<h3 id="相對定位-relative"><a href="#相對定位-relative" class="headerlink" title="相對定位 - relative"></a>相對定位 - relative</h3><p>此時，諂媚愛分化團隊的八戒使用了相對定位 position:relative，在瀏覽器的視覺上並未有任何改變，但其實八戒已經進入定位層，八戒還使用了偏移（top、bottom、left、right）會在團隊之間遊說不利團隊的話語，在西遊記裡，唐僧對八戒非常容忍，說容忍還是唐僧也愛聽諂媚的話？不會將其趕出團隊，我們發現八戒<strong>原本的位置會被保留空下</strong>，後方的沙僧、白馬並不會遞補上去，沒人敢挑戰二師兄的位置。這也讓我們知道相對定位並不會讓元素原本的位置脫離正常流向，就像八戒空出的位置一樣。</p>
<img data-src="/images/css/css-position-02.png" width="700">

<h3 id="絕對定位-absolute"><a href="#絕對定位-absolute" class="headerlink" title="絕對定位 - absolute"></a>絕對定位 - absolute</h3><p>大師兄孫悟空，師承菩提老祖習成七十二變，偷吃王母娘娘蟠桃、喝壽酒身體變成刀槍不入，又在太上老君煉金爐練成能看穿妖魔的「火眼金睛」，在團隊裡面衝鋒陷陣戰力堪稱第一。八戒的挑撥是非，讓唐僧與悟空的關係好幾次讓團隊陷入危機，悟空氣到使用了絕對定位 position:absolute，下圖可以看到悟空也進入的定位層（腳踏觔斗雲原地起飛），我們也可以看到八戒一心想取代大師兄的位置，此時八戒在悟空的底下，也就是悟空原本的位置，悟空後方的師弟們都向前遞補了，這也讓我們知道了絕對定位的元素會脫離正常流向，後方元素會往前遞補。</p>
<img data-src="/images/css/css-position-03.png" width="700">

<p>若是八戒也如同上方設定了 position:relative，我們會更清楚看見八戒想取代悟空的野心，這是因為八戒是後方元素的關係，當悟空、八戒兩者都進入定位層，八戒會覆蓋悟空。</p>
<img data-src="/images/css/css-position-04.png" width="700">

<p>劇情往下走，被師父誤會的悟空，內心百感交集，心想：「遇到妖怪我來打，Boss 太強師傅被抓找救兵也是靠我的關係，現在師傅盡聽信老豬的廢話，沒把我放在心上」，一氣之下使用了偏移 top:0、left:0，搭上觔斗雲一個跟斗翻了十萬八千里回到了花果山（瀏覽器左上角位置），悟空徹底離開了團隊（唐僧範圍），尋找到最後的位置－花果山。</p>
<img data-src="/images/css/css-position-05.png" width="700">

<h3 id="唐僧的緊箍咒"><a href="#唐僧的緊箍咒" class="headerlink" title="唐僧的緊箍咒"></a>唐僧的緊箍咒</h3><p>這種結果不是我們想看到的結局，那有甚麼辦法讓大師兄悟空繼續留在西天取經團隊呢？有的！那就是觀音姐姐給唐僧的「緊箍咒」，即是唐僧使用了 position:relative，那麼悟空又會回到團隊裡面，即使悟空使用了 top、bottom、left、right 位移，也會以唐僧為基準點偏移。最後我們得到了一個結論，<strong>相對定位常會讓父元素變成子元素的一個定位點，子元素可以依據這個定位點進行絕對定位的偏移，若父元素沒有任何定位點（relative、absolute），則會繼續往外尋找直到瀏覽器為定位點</strong>。</p>
<img data-src="/images/css/css-position-06.png" width="700">

<h3 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 - fixed"></a>固定定位 - fixed</h3><p>position:fixed，固定定位可以說定位裡面最愛刷存在感的傢伙，它就像穿著寬鬆背心愛秀肌肉的猛男，希望成為大眾目光焦點，所以捲軸上下移動是無法脫離這位自戀狂，它就會像醒目的廣告看板固定在一個位置。通常，固定定位只有一個基準點位置，那就是以瀏覽器視窗為偏移基準點，但…若遇到了父元素有 transform 屬性結果就不同了。結論：<strong>絕對定位、固定定位它們都會讓元素脫離正常流向</strong>。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 浮動</title>
    <url>/2020/08/29/lesson-css-05.float/</url>
    <content><![CDATA[<h3 id="浮動-float"><a href="#浮動-float" class="headerlink" title="浮動 - float"></a>浮動 - float</h3><p>浮動（float）屬性的初衷是希望用來設計「文繞圖」，但是，技術始終來自創意，網頁設計師天馬行空的想法，讓 float 屬性有了新的出路，設計師發現原來浮動厲害的很，可以用來佈局設計版型，也因此一股「浮動流」旋風式颳起，在彈性盒（flex box）穩定前，浮動是排版布局的好幫手。</p>
<a id="more"></a>

<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>浮動元素會影響排版，它會進入浮動層，後方元素的區塊部分會顯示在它的下方，而內容會圍繞著浮動元素。</li>
<li>有可能會造成父元素高度崩塌。</li>
<li>只有左邊或右邊的設定，沒有中間。</li>
<li>具有內容包覆性，並且讓元素區塊化（block-level）。</li>
<li>BFC（Block formatting context）家族之一。</li>
</ul>
<h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 浮動 */</span></span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="comment">/* right */</span></span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清除浮動 */</span></span><br><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line">  <span class="comment">/* left、right */</span></span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 盒模型</title>
    <url>/2020/08/29/lesson-css-04.box-model/</url>
    <content><![CDATA[<h3 id="盒模型-Box-Model"><a href="#盒模型-Box-Model" class="headerlink" title="盒模型 - Box Model"></a>盒模型 - Box Model</h3><p>CSS 在視覺的呈現是創意無限，就我所知，沒有一本書可以涵蓋介紹完他的屬性與效果間的組合，在這些組合技上，CSS 有時是很容易接近的朋友，但有時會鬧鬧脾氣，需要一段時間了解他。而本篇主題盒模型（Box-Model）的是其中一。</p>
<p>在 CSS 的世界裡，是由各式各樣的盒子組成，而這些盒子指的是網頁最基礎的 HTML 元素，也就是說，當我們建立一個 HTML 元素其實等於建立一個 CSS 盒子，一個矩形的盒子，他通常被稱為元素盒（element box）。每個元素盒的中心是內容區域（content area），也就是放文字、圖片的區域，內容區域的周圍還有內距（padding）、邊框（border）、外距（margin），由這些屬性來形成盒模型。</p>
<a id="more"></a>

<img data-src="/images/css/css-box-model.png" width="700">

<p>其中，這些屬性值得注意的是，他們都是選擇性的，內距（padding）的背景（顏色、重複圖片）預設是可以顯示在內距之內，他決定內容區域（content area）與邊框（border）之間的留白。外距（margin）他一定是透明，但可以顯示父元素的背景，也就是盒子與盒子之間的距離。內距無法使用負數，外距可以使用複數。邊框沒有指定顏色，會自動渲染內容區的前景色，也就是 color，邊框也是不能有負值。</p>
<h3 id="基礎盒"><a href="#基礎盒" class="headerlink" title="基礎盒"></a>基礎盒</h3><p>盒模型可以由兩個基本盒子說起，區塊盒（block-level box）、行內盒（inline box）。這兩個盒子型態是 CSS 世界的大眾居民，大部分元素都是這兩種型態，最經典的範例各自代表為 div、span，當我們建立 div 元素等同建立一個區塊盒，建立 span 則是行內盒，概念如此。</p>
<h3 id="區塊盒-block-box"><a href="#區塊盒-block-box" class="headerlink" title="區塊盒 - block box"></a>區塊盒 - block box</h3><p>區塊盒這個居民是 CSS 世界的地主，他們掌控了土地空間的霸權，所以當他們出現，正常流向由左至右的絕對空間（前、後換行），也就是整塊土地都會完全被他們佔有！區塊盒在正常流向裡會垂直堆疊。若有垂直外距有重疊時，則較大的外距會吃掉較小的外距。區塊盒的盒屬性相關設定都可以正常作用。</p>
<blockquote>
<p>區塊盒例子：div、h1、p、ul、li、table 等等。</p>
</blockquote>
<h3 id="行內盒-inline-box"><a href="#行內盒-inline-box" class="headerlink" title="行內盒 - inline box"></a>行內盒 - inline box</h3><p>行內盒是一般居民，他們是被地主奴役的居民，只能擁有一小塊、一小塊的空間（寬、高只能隨著內容改變，也就是無法設定寬、高）。這些行內居民必須一個一個由左至右乖乖排列著，一般情況下，他們是脫離不了地主的控制。除非…他們有勇氣革命，獨立起來定位自己，讓自己進化成區塊級。</p>
<blockquote>
<p>行內盒例子：span、a、em 等等。</p>
</blockquote>
<h3 id="行內區塊盒-inline-block-box"><a href="#行內區塊盒-inline-block-box" class="headerlink" title="行內區塊盒 - inline-block box"></a>行內區塊盒 - inline-block box</h3><p>行內區塊盒（Inline-Block Box），他是介於居民與地主的角色，他的外在行為是行內居民，也就是會像居民乖乖排列，但內在行為卻是區塊地主，區塊盒的盒屬性相關設定因為他的內在行為關係，都可以正常作用。<br>那麼，最後，誰才是 CSS 世界掌握最多資源的超級大地主？答案呼之欲出。</p>
<h3 id="誰才是超級大地主？"><a href="#誰才是超級大地主？" class="headerlink" title="誰才是超級大地主？"></a>誰才是超級大地主？</h3><p>超級大地主指的是初始容器區塊（initial containing block），body 只算是大地主，隱藏版的超級大地主是根元素，也就是 body 的上層 html 元素，html 元素建立的是初始容器區塊，而初始容器區塊是由瀏覽器視埠（viewport）決定本身的尺寸。這也是為甚麼 body 的高度百分比無效化，他被 html 超級大地主控制著。</p>
<h3 id="Margin、Padding、Border"><a href="#Margin、Padding、Border" class="headerlink" title="Margin、Padding、Border"></a>Margin、Padding、Border</h3><ul>
<li>外距、內距若設定百分比（如果有特殊需求），會根據父元素的寬度來計算，即便是上下外距、內距的百分比也是如此，而不是高度喔。</li>
<li>外距可以負數，內距不可以負數。</li>
<li>外距重疊現象指兩區塊外距發生垂直時，大外距會吃掉小外距，而不是兩者相加；左右外距並不會發生重疊。</li>
<li>內距預設會有背景圖渲染。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* margin 可為負值、padding 沒有 */</span></span><br><span class="line">  <span class="comment">/* margin-top、margin-right、margin-bottom、margin-left */</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">/* top、right、bottom、left*/</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 第一個數字為上下外距，第二個數字為左右外距 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 區塊置中，區塊元素一定要設定寬度 */</span></span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* padding-top、padding-right、padding-bottom、padding-left */</span></span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 邊框 */</span></span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    dotted  一組方格點，會依照邊框 width 的寬度改變方格的大小及間距，如果邊框是 2px，那麼方格是 2px 且每個點之間有 2px 的間距。</span></span><br><span class="line"><span class="comment">    dashed  一組短線</span></span><br><span class="line"><span class="comment">    double  兩條實線 （border-width 屬性值是兩條線的總和）</span></span><br><span class="line"><span class="comment">    groove  看起來像刻入頁面</span></span><br><span class="line"><span class="comment">    ridge   看起來像凸出頁面</span></span><br><span class="line"><span class="comment">    inset   看起來像嵌入頁面</span></span><br><span class="line"><span class="comment">    outset  看起來像浮雕</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    border-top-style</span></span><br><span class="line"><span class="comment">    border-right-style</span></span><br><span class="line"><span class="comment">    border-bottom-style</span></span><br><span class="line"><span class="comment">    border-left-style</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    border-top-color</span></span><br><span class="line"><span class="comment">    border-right-color</span></span><br><span class="line"><span class="comment">    border-bottom-color</span></span><br><span class="line"><span class="comment">    border-left-color</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="comment">/* 縮寫 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="comment">/* 左上、右上、右下、左下 的圓角*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 盒子陰影 */</span></span><br><span class="line">  <span class="comment">/* 水平(+右-左)、垂直(+下-上)、模糊半徑(0 或+不能-)、延展性(+為擴展-為內縮)、顏色、inset(內陰影) */</span></span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>display 屬性可以替盒子進行轉型態的設定，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* inline 轉為 inline-block */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* inline 轉為 block */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* block 轉為 inline-block */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>display:contents</li>
</ul>
<p>作用在元素上時，display:contents 會將元素從頁面格式化移除，將自身的子元素移到自身所在的層級。<br>以下例子會將 ul 視覺格式化，就像從來不曾存在過一般，不只邊框消失，ul 周圍的內容的上下外距也一同消失。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  ul &#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    display: contents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li &#123;</span><br><span class="line">    border: 1px solid gray;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>link1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>link2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>link3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Box-sizing"><a href="#Box-sizing" class="headerlink" title="Box-sizing"></a>Box-sizing</h3><p>可以重新定義 Box 寬度的計算方式。時下流行將此屬性值設定為 border-box，也就是 padding、border 會被計算在 width 裡面，這樣在排版時，只要把焦點放在處理 margin。</p>
<h3 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h3><p>如果對盒子設定高度 height，內容如果超過高度，則會產生內容溢出，一般頁面元素的高度通常不需要設定，會隨著內容長高。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>學習資源</title>
    <url>/2020/08/29/resource-learn/</url>
    <content><![CDATA[<h3 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h3><ul>
<li>無暇的程式碼 JavaScript <a href="https://github.com/AllJointTW/clean-code-javascript">Github</a></li>
<li>網頁動畫大全 <a href="https://github.com/sergey-pimenov/awesome-web-animation">awesome-web-animation</a></li>
<li>一行 JavaScript 處理陣列、日期、數字、DOM 等等 <a href="https://1loc.dev/">前往</a>、<a href="https://github.com/phuoc-ng/1loc">Github</a></li>
<li>一行 CSS Layouts <a href="http://1linelayouts.glitch.me/?fbclid=IwAR2HAWUL1DYbaYLw2T9wQNcvTUEqQ0mZICjCPj9CgUd3y0f-tO8skAFNiTM">前往</a></li>
<li>一個 Div 做出來的 CSS 物件 <a href="https://a.singlediv.com/">Single Div</a></li>
<li>HEAD 大全 <a href="https://htmlhead.dev/">前往</a>、<a href="https://github.com/joshbuchea/HEAD">Github</a></li>
<li>從 ES6 開始的 JavaScript 學習生活<a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/">前往</a></li>
<li>JavaScript 編程精解中文第三版<a href="https://wizardforcel.gitbooks.io/eloquent-js-3e/content/">前往</a></li>
<li>新手入門 freecodecamp<a href="https://www.freecodecamp.org/">前往</a></li>
</ul>
<h3 id="程式遊戲"><a href="#程式遊戲" class="headerlink" title="程式遊戲"></a>程式遊戲</h3><ul>
<li>CODE COMBAT<a href="https://codecombat.com/home">前往</a></li>
</ul>
]]></content>
      <categories>
        <category>學習資源</category>
      </categories>
  </entry>
  <entry>
    <title>設計常用工具及網站</title>
    <url>/2020/08/29/resource-normal-tools/</url>
    <content><![CDATA[<h3 id="截圖"><a href="#截圖" class="headerlink" title="截圖"></a>截圖</h3><ul>
<li><p><a href="https://www.playpcesor.com/2014/02/sharex.html">ShareX</a></p>
<p>截圖工具，截圖後能自動上傳雲端硬碟、加浮水印，也能錄製 GIF</p>
</li>
</ul>
<h3 id="秀圖"><a href="#秀圖" class="headerlink" title="秀圖"></a>秀圖</h3><ul>
<li><a href="https://steachs.com/archives/32681">軟體說明</a></li>
<li><a href="https://www.cherubicsoft.com/en/projects/sagethumbs#.VwKhKUeNjDA">SageThumbs</a></li>
</ul>
<p>檔案總管顯示 Photoshop 檔縮圖、一鍵轉 JPG、PNG、GIF、BMP</p>
<h3 id="套版"><a href="#套版" class="headerlink" title="套版"></a>套版</h3><ul>
<li><a href="https://mobirise.com/">Mobirise</a></li>
</ul>
<h3 id="版型"><a href="#版型" class="headerlink" title="版型"></a>版型</h3><ul>
<li><a href="https://www.webdesignclip.com/">日本風版型(一)</a></li>
<li><a href="https://responsive-jp.com/">日本風版型(二)</a></li>
</ul>
<h3 id="LOGO"><a href="#LOGO" class="headerlink" title="LOGO"></a>LOGO</h3><ul>
<li><a href="https://www.launchaco.com/logo">LOGO 產生器</a></li>
</ul>
<h3 id="圖庫"><a href="#圖庫" class="headerlink" title="圖庫"></a>圖庫</h3><ul>
<li><a href="https://www.deviantart.com/">Deviantart</a></li>
<li><a href="https://pixabay.com/">Pixabay</a></li>
<li><a href="https://unsplash.com/">Unsplash</a></li>
<li><a href="http://www.morguefile.com/">Morguefile</a></li>
<li><a href="https://www.pexels.com/">Pexels</a></li>
<li><a href="http://tw.freeimages.com/">Freeimages</a></li>
<li><a href="http://www.stockvault.net/">Stockvault</a></li>
<li><a href="http://www.freedigitalphotos.net/">Freedigital</a></li>
<li><a href="http://www.dreamstime.com/">Dreamstime/</a></li>
</ul>
]]></content>
      <categories>
        <category>設計常用工具及網站</category>
      </categories>
  </entry>
  <entry>
    <title>網頁設計證照資源</title>
    <url>/2020/08/29/resource-web-license/</url>
    <content><![CDATA[<h3 id="網頁設計乙、丙級素材"><a href="#網頁設計乙、丙級素材" class="headerlink" title="網頁設計乙、丙級素材"></a>網頁設計乙、丙級素材</h3><ul>
<li><a href="https://techbank.wdasec.gov.tw/owInform/TestReferData.aspx#17300">技檢中心乙丙級題目和素材</a></li>
</ul>
<h3 id="網頁設計乙級"><a href="#網頁設計乙級" class="headerlink" title="網頁設計乙級"></a>網頁設計乙級</h3><ul>
<li><a href="http://onlinetest2.slhs.tp.edu.tw/bestcontent.asp?examid=bests">學科測驗</a></li>
<li><a href="https://bquiz.kento520.tw/">術科解題</a></li>
<li><a href="https://bquiz.mackliu.com/">術科解題</a></li>
<li><a href="https://reurl.cc/R10Ex6">術科解題</a></li>
</ul>
<h3 id="網頁設計丙級"><a href="#網頁設計丙級" class="headerlink" title="網頁設計丙級"></a>網頁設計丙級</h3><ul>
<li><a href="http://onlinetest1-5.slhs.tp.edu.tw/bestcontent.asp?examid=t17300">學科測驗</a></li>
</ul>
]]></content>
      <categories>
        <category>網頁設計證照資源</category>
      </categories>
  </entry>
  <entry>
    <title>Coding 資源</title>
    <url>/2020/08/29/resource-coding/</url>
    <content><![CDATA[<h3 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h3><ul>
<li><a href="https://www.highcharts.com/">HighCharts</a> 圖表</li>
<li><a href="https://vestride.github.io/Shuffle/">Shuffle</a> 響應式圖片對齊排版</li>
<li><a href="https://github.com/validatorjs/validator.js">Validator</a> 驗證表單</li>
<li><a href="https://fontawesome.com/">fontawesome</a> 文字型的 icon</li>
</ul>
<h3 id="動畫"><a href="#動畫" class="headerlink" title="動畫"></a>動畫</h3><ul>
<li><a href="https://animate.style/">Animate.css</a></li>
<li><a href="https://www.delac.io/wow/">WOW.js</a></li>
<li><a href="https://elrumordelaluz.github.io/csshake/">CSShake</a></li>
<li><a href="https://loading.io/">Loading.io</a></li>
<li><a href="https://animejs.com/">Anime.js</a></li>
<li><a href="https://css-doodle.com/">CSS-doodle</a></li>
<li><a href="https://maxwellito.github.io/vivus/">vivus</a></li>
<li><a href="https://sarcadass.github.io/granim.js/">Granim.js</a></li>
<li><a href="https://bennettfeely.com/ztext/">ztext.js</a></li>
<li><a href="https://greensock.com/tweenmax/">greensock</a></li>
</ul>
<h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><ul>
<li><a href="https://easings.net/">easings</a></li>
<li><a href="https://cubic-bezier.com/#.17,.67,.83,.67">cubic-bezier</a></li>
<li><a href="https://matthewlein.com/tools/ceaser">調整轉場速率</a></li>
</ul>
<a id="more"></a>

<h3 id="一頁式"><a href="#一頁式" class="headerlink" title="一頁式"></a>一頁式</h3><ul>
<li><a href="https://alvarotrigo.com/fullPage/">FullPage</a></li>
</ul>
<h3 id="視差"><a href="#視差" class="headerlink" title="視差"></a>視差</h3><ul>
<li><a href="https://dixonandmoe.com/rellax/">Dixonand moe</a></li>
</ul>
<h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><ul>
<li><a href="https://collectui.com/">Collect UI</a></li>
<li><a href="https://bootswatch.com/">bootswatch</a></li>
<li><a href="https://useanimations.com/?fbclid=IwAR2n6GIn9IHyt4HMv_SzWBDx-T78Vzkl5FpyHse7E1LUkd9XfFFVP6I0TJw">介面 ICON SVG 動畫</a></li>
</ul>
<h2 id="CSS-Frame"><a href="#CSS-Frame" class="headerlink" title="CSS Frame"></a>CSS Frame</h2><ul>
<li><a href="https://getbootstrap.com/">Bootstrap</a></li>
<li><a href="https://materializecss.com/">Materialize</a></li>
</ul>
<h3 id="字型"><a href="#字型" class="headerlink" title="字型"></a>字型</h3><ul>
<li><a href="https://fonts.google.com/">Google Fonts</a></li>
</ul>
<h3 id="程式碼工具"><a href="#程式碼工具" class="headerlink" title="程式碼工具"></a>程式碼工具</h3><ul>
<li><a href="https://cdnjs.com/">cdnjS</a> cdn 提供</li>
<li><a href="https://j11y.io/jquery/">jQuery source viewer</a> jQuery source</li>
<li><a href="https://regex101.com/">RegEx</a> 正則表達式</li>
<li><a href="https://regexper.com/">Regexper</a> 正則表達式</li>
</ul>
<h3 id="線上程式碼"><a href="#線上程式碼" class="headerlink" title="線上程式碼"></a>線上程式碼</h3><ul>
<li><a href="https://codepen.io/">CODEPEN</a> 程式碼測試、程式創意來源之地。</li>
<li><a href="https://jsbin.com/?html,css,js,output">JSBIN</a> 程式碼測試。</li>
</ul>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul>
<li><p><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">大全</a></p>
</li>
<li><p><a href="https://zzetao.github.io/awesome-github-profile/">展示</a></p>
</li>
<li><p><a href="https://github.com/zzetao/awesome-github-profile">展示</a></p>
</li>
<li><p><a href="https://github.com/kautukkundan/Awesome-Profile-README-templates">展示</a></p>
</li>
<li><p><a href="https://github.com/rahuldkjain/github-profile-readme-generator">產生器</a></p>
</li>
<li><p><a href="https://github.com/anuraghazra/github-readme-stats">統計資料</a></p>
</li>
<li><p><a href="https://github.com/vn7n24fzkq/github-profile-summary-cards">統計資料</a></p>
</li>
<li><p><a href="https://github.com/antonkomarev/github-profile-views-counter">瀏覽次數</a></p>
</li>
</ul>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul>
<li><a href="https://jsonplaceholder.typicode.com/">JSONPlaceholder</a> 線上 JSON，方便 API 串接測試。</li>
</ul>
<h3 id="Favicon"><a href="#Favicon" class="headerlink" title="Favicon"></a>Favicon</h3><ul>
<li><a href="https://realfavicongenerator.net/">各裝置、瀏覽器 Favicon 產生器</a></li>
</ul>
<h3 id="RWD-測試"><a href="#RWD-測試" class="headerlink" title="RWD 測試"></a>RWD 測試</h3><ul>
<li><a href="https://responsively.app/">Responsively</a></li>
</ul>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul>
<li><a href="https://hackmd.io/">HackMD</a> Markdown 編輯器。</li>
</ul>
<h3 id="打字"><a href="#打字" class="headerlink" title="打字"></a>打字</h3><ul>
<li><a href="https://10fastfingers.com/typing-test/english">打字練習</a></li>
</ul>
]]></content>
      <categories>
        <category>程式資源</category>
      </categories>
  </entry>
  <entry>
    <title>CSS - 背景</title>
    <url>/2020/08/25/lesson-css-03.background/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* background-color 背景顏色 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#faa</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* background-image 背景圖片 */</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://picsum.photos/100/100/?random=1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* background-repeat 背景重複 */</span></span><br><span class="line">  <span class="comment">/* repeat-x、repeat-y、no-repeat */</span></span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* background-size 背景尺寸 */</span></span><br><span class="line">  <span class="comment">/* contain、cover、數值、百分比 */</span></span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* background-position 背景定位 */</span></span><br><span class="line">  <span class="comment">/* 可使用數值、百分比、left、right、center、top、bottom 關鍵字 */</span></span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="漸層"><a href="#漸層" class="headerlink" title="漸層"></a>漸層</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 線性漸層 */</span></span><br><span class="line"><span class="selector-class">.linear-gradient</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(red, yellow, white);</span><br><span class="line">  <span class="comment">/* 設定角度 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, red, yellow, white);</span><br><span class="line">  <span class="comment">/* 設定漸層站點 */</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right top, #fff <span class="number">0%</span>, lightblue <span class="number">25%</span>, #fff <span class="number">50%</span>, lightblue <span class="number">75%</span>, #fff <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 放射漸層 */</span></span><br><span class="line"><span class="selector-class">.radial-gradient</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(white, #ffffaa, pink);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 文字</title>
    <url>/2020/08/25/lesson-css-02.text/</url>
    <content><![CDATA[<h3 id="字型"><a href="#字型" class="headerlink" title="字型"></a>字型</h3><p>CSS 常用的字型設定：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* 設定字型家族 */</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft JhengHei&#x27;</span>, Verdana, Geneva, Tahoma, sans-serif;</span><br><span class="line">  <span class="comment">/* 設定字體大小 px、em、rem */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* 設定斜體 */</span></span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="comment">/* 設定粗體 */</span></span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="comment">/* 設定字體都變成大寫，但第一個字較大 */</span></span><br><span class="line">  <span class="attribute">font-variant</span>: small-caps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="單位"><a href="#單位" class="headerlink" title="單位"></a>單位</h3><ul>
<li>px：字型大小以像素為絕對單位。</li>
<li>em：字型大小參考父元素為倍數相對縮放尺寸，例如：父元素外層是 10px，子元素 2em 則是 20px。</li>
<li>rem：相對於根元素 (:root or html) 的文字尺寸，預設是 16px，元素設定 2rem 則是 32px。</li>
</ul>
<h3 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* 設定 inline (包含inline-block)的文字位置，left、right */</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="comment">/*  none、overline、line-througn */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  <span class="comment">/* 文字縮排 */</span></span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="comment">/*  capitalize（每個單字第一個英文字大寫）、lowercase（全小寫）、uppercase（全大寫） */</span></span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="comment">/* 水平、垂直、陰影模糊半徑、顏色，可以設定多重陰影 */</span></span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="comment">/* 英文字母或中文字的間隔 */</span></span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="comment">/* 單字間隔，要有空格，中文很難有空格，較適合英文。 */</span></span><br><span class="line">  <span class="attribute">word-spacing</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="comment">/* 文字換行，數字或英文字無空格時會產生不換行超出盒框區域，可用此屬性。 */</span></span><br><span class="line">  <span class="comment">/* break-word 在長單詞或URL地址內部進行換行。 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* break-word（過長的單字會自動折到下一行，可避免一江春水向東流。）*/</span></span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">   normal(預設，以每個瀏覽器喜好不一定相同，通常保留單字全部) </span></span><br><span class="line"><span class="comment">   break-all(允許在單字的字母換行，也就是不一定要完整的單字) </span></span><br><span class="line"><span class="comment">   keep-all(只能在半角空格或連字符處換行) </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">   normal(忽略空白)  </span></span><br><span class="line"><span class="comment">   pre(像pre標籤，保留空白) </span></span><br><span class="line"><span class="comment">   nowrap(不換行，除非有 br，否則不會斷行，會一直顯示超出區塊。) </span></span><br><span class="line"><span class="comment">   pre-wrap(保留空白，但是正常換行) </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">white-space</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h3><p>連結狀態的變化使用了 CSS 的偽類，偽類家族有非常多種，連結這四個須注意其出現的順序。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS資源</title>
    <url>/2020/08/23/resource-css-useful-site/</url>
    <content><![CDATA[<h3 id="漸層"><a href="#漸層" class="headerlink" title="漸層"></a>漸層</h3><ul>
<li><a href="https://uigradients.com/#eXpresso">UI Gradients</a></li>
<li><a href="https://mycolor.space/gradient">Space</a></li>
<li><a href="http://jxnblk.com/shade/">Shade</a></li>
<li><a href="https://gradienthunt.com/">Gradient Hunt</a></li>
<li><a href="https://www.colorzilla.com/gradient-editor/">Colorzilla</a></li>
</ul>
<a id="more"></a>

<h3 id="按鈕"><a href="#按鈕" class="headerlink" title="按鈕"></a>按鈕</h3><ul>
<li><a href="http://bttn.surge.sh/">Button Surge</a></li>
<li><a href="https://www.bestcssbuttongenerator.com/">Best CSS Button</a></li>
</ul>
<h3 id="轉場與動畫"><a href="#轉場與動畫" class="headerlink" title="轉場與動畫"></a>轉場與動畫</h3><ul>
<li>Magic<ul>
<li><a href="https://github.com/miniMAC/magic">官網</a></li>
<li><a href="https://github.com/miniMAC/magic">GitHub</a></li>
</ul>
</li>
<li><a href="https://3d-book-css.netlify.app/">3D Book</a></li>
</ul>
<h3 id="ICON"><a href="#ICON" class="headerlink" title="ICON"></a>ICON</h3><ul>
<li><a href="https://jonsuh.com/hamburgers/">Hamburger 動畫-官網</a></li>
<li><a href="https://github.com/jonsuh/hamburgers">Hamburger 動畫-Github</a></li>
</ul>
<h3 id="語法產生器"><a href="#語法產生器" class="headerlink" title="語法產生器"></a>語法產生器</h3><ul>
<li><a href="https://www.we-shop.net/css3/default.html">We Shop</a></li>
<li><a href="http://css3generator.com/">CSS3 Generator</a></li>
<li><a href="https://www.css3maker.com/index.html">CSS3 Maker</a></li>
<li><a href="https://wweb.dev/resources/css-separator-generator">分隔線產生器</a></li>
</ul>
<h3 id="遮罩路徑"><a href="#遮罩路徑" class="headerlink" title="遮罩路徑"></a>遮罩路徑</h3><ul>
<li><a href="https://www.html.cn/tool/css-clip-path/">Clip Path</a></li>
</ul>
<h3 id="風格"><a href="#風格" class="headerlink" title="風格"></a>風格</h3><ul>
<li><a href="https://nostalgic-css.github.io/NES.css/">8 位元風 CSS</a></li>
<li><a href="https://www.gradientmagic.com/">Gradient Magic</a></li>
</ul>
<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><ul>
<li><a href="https://static.html.it/app/uploads/blog/layoutgala/index.html">Layout Gala</a></li>
<li><a href="https://www.webdesignrankings.com/resources/csslayoutgenerator/">CSS Layout</a></li>
</ul>
<h3 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h3><ul>
<li><a href="https://colors.eva.design/">Eva Design System</a></li>
</ul>
]]></content>
      <categories>
        <category>CSS資源</category>
      </categories>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2020/08/23/lesson-html/</url>
    <content><![CDATA[<h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><blockquote>
<p>在網頁裡，每項技術都扮演了一個重要的角色</p>
</blockquote>
<p>指的是 HTML、CSS、JavaScript 三兄弟，若用蓋房子來比喻，三兄弟各有自己執掌的工作，分別為：</p>
<ul>
<li>HTML（結構、內容）：如同蓋房子需要的基礎建材，鋼筋、水泥、門、窗等等。</li>
<li>CSS（樣式、外觀）：如同蓋完房子後的裝潢設計師，打造漂亮的房子。</li>
<li>JavaScript（事件、行為）：如同房子內部設施開關觸發後產生的能源。</li>
</ul>
<a id="more"></a>

<h3 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h3><p>對於 HTML（HyperText Markup Language）而言，它扮演了「結構」的角色。這角色在網頁中，雖是最基礎但卻是很重要的骨幹，如同蓋棟大樓需要的鋼筋、水泥、門、窗的基礎建材，它是網頁的基礎。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html 結構 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>結構<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="標記"><a href="#標記" class="headerlink" title="標記"></a>標記</h3><p>Markup（標記）是 HTML 的核心，意思是「使用標籤標記內容，產生語義化結構」。標記什麼內容？標記文字、圖片、影音等等，網頁中傳達資訊的媒體元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a 標籤標記了「泰山職訓網頁設計」文字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://wdaweb.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>泰山職訓網頁設計<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>元素是由標籤（tag）及標記的內容（content）所組成，它有以下這些特性：</p>
<ul>
<li>不分大小寫，養成使用小寫的習慣。</li>
<li>大部份會有&lt;&gt;起始標籤，&lt;/&gt;結束標籤，之間為標記的內容。</li>
<li>具有屬性與值，屬性之間需要空格。</li>
<li>屬性值不限制用單引號或雙引號，養成使用雙引號的習慣。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/example.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h3><p>沒有結束標籤的元素，又稱「獨立標籤」、「無結尾標籤」、「空標籤」。<br>常見的空元素有 &lt;meta&gt;、&lt;link&gt;、&lt;br&gt;、&lt;hr&gt;、&lt;img&gt; … 等等。</p>
<!-- ### id 與 class -->

<h3 id="舞台"><a href="#舞台" class="headerlink" title="舞台"></a>舞台</h3><!-- <img data-src="/images/request_response.png" width="500"> -->

<p>若 HTML 是一個舞台，每個元素如同一位演員，瀏覽器在讀取 HTML 這個舞台時，它是由上而下進行解讀，元素會逐一被解讀成一位演員，每位演員有著它要做的基本工作來顯示內容。</p>
<p>「head」 演員像是舞台的後面，標記的是給瀏覽器或搜尋引擎才能看到的資訊，舞台前面的使用者是看不到的。<br>「body」 演員像是舞台的前面，標記的是給使用者欣賞觀看的文字、圖片、影片等等。</p>
<p>此外，還有兩位較為特別的演員，一個是負責外觀的「style」與負責行為的「script」，「style」演員的工作是負責顯示樣式外觀，白話點就是幫演員們化妝，而讀取到最後會遇到「script」演員，我們可以把裡面標記的內容想成一套劇本，告訴演員們該如何表現行為及事件發生時該做甚麼事情。</p>
<blockquote>
<p>記住的是，元素演員得先上場，劇本才能上演好戲，若是劇本先出現，元素演員未上場，等同白念劇本了。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-tw&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- head 紀錄的是給瀏覽器或者是搜尋引擎看的重要資訊，一般瀏覽者無法看到 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;這是我的第一個網頁&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一個網頁<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 本頁使用的 css 樣式外觀，幫網頁化妝　*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body 是顯示給瀏覽者觀看的內容，藉由標籤標記的文字、圖片、影片等等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 本頁使用的 js，想成一套劇本</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="語義化"><a href="#語義化" class="headerlink" title="語義化"></a>語義化</h3><p>雖然在排版上，大多數習慣還是用 &lt;div&gt; 來排版，但 HTML5 提供更多語意標籤使用，甚麼是語意標籤？簡單說就是直接給標籤一個好懂的名稱，來表示其結構及意義，例如:</p>
<table>
<thead>
<tr>
<th>標籤名稱</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;header&gt;</td>
<td>定義網頁頁首的區域。</td>
</tr>
<tr>
<td>&lt;nav&gt;</td>
<td>定義網頁導覽區域。</td>
</tr>
<tr>
<td>&lt;footer&gt;</td>
<td>定義網頁頁尾的區域。</td>
</tr>
<tr>
<td>&lt;main&gt;</td>
<td>定義網頁主要內容區域。</td>
</tr>
<tr>
<td>&lt;section&gt;</td>
<td>定義一個區段範圍。</td>
</tr>
<tr>
<td>&lt;aside&gt;</td>
<td>定義一個側邊區域範圍，次要區域。</td>
</tr>
<tr>
<td>&lt;article&gt;</td>
<td>定義文章內容。</td>
</tr>
<tr>
<td>&lt;figure&gt;</td>
<td>定義圖形影像的區塊。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 選擇器 (一)</title>
    <url>/2020/08/23/lesson-css-01.base-selector/</url>
    <content><![CDATA[<h3 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h3><p>HTML 負責的是結構，CSS 則是外觀，它是元素的化妝師，負責頁面的版型、文字、顏色、尺寸、響應式等等。</p>
<h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><p>一個「選擇器」決定選擇的元素目標，連結著大括號「{}」，大括號裡面是屬性、屬性值，以冒號「:」分隔屬性與屬性值，屬性值後面以分號「;」結尾。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">選擇器 &#123;</span><br><span class="line">  屬性: 屬性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="元素選擇器"><a href="#元素選擇器" class="headerlink" title="元素選擇器"></a>元素選擇器</h3><p>以元素名稱作為選擇器，又稱為標籤選擇器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="群組選擇器"><a href="#群組選擇器" class="headerlink" title="群組選擇器"></a>群組選擇器</h3><p>選擇器之間以「,」分隔，可以一次選擇指定的選擇對象。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="類別選擇器"><a href="#類別選擇器" class="headerlink" title="類別選擇器"></a>類別選擇器</h3><p>替選擇器取名稱，前面加「.」。此選擇器具有「重覆使用」或「同中求異」的特性，也是使用率最高的選擇器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.txt</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ID-選擇器"><a href="#ID-選擇器" class="headerlink" title="ID 選擇器"></a>ID 選擇器</h3><p>替選擇器取名稱，前面加「#」。此選擇器具有「唯一」的特性，通常被當作區塊的名稱或是 JavaScript 快速獲取 DOM 目標的方式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子代選擇器"><a href="#子代選擇器" class="headerlink" title="子代選擇器"></a>子代選擇器</h3><p>選擇器之間以「&gt;」分隔，選擇到兒子，也就是只選擇到下一層，第三層不會被選擇，常與後代選擇器搞混。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="後代選擇器"><a href="#後代選擇器" class="headerlink" title="後代選擇器"></a>後代選擇器</h3><p>選擇器之間以「空白」分隔，可選擇到子孫們，也就是起始選擇目標之後的後代都會被選擇到，使用率很高的選擇器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同層相鄰選擇器"><a href="#同層相鄰選擇器" class="headerlink" title="同層相鄰選擇器"></a>同層相鄰選擇器</h3><p>選擇器之間以「+」分隔，又被稱為兄弟選擇器，指選擇到與自己同一層隔壁的元素，所謂的隔壁是指 HTML 文件下方的意思。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="同層全體選擇器"><a href="#同層全體選擇器" class="headerlink" title="同層全體選擇器"></a>同層全體選擇器</h3><p>選擇器之間以「+」分隔，又被稱為兄弟選擇器，指選擇到與自己同一層隔壁的弟元素，所謂的隔壁是指 HTML 文件下方的意思。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="屬性選擇器"><a href="#屬性選擇器" class="headerlink" title="屬性選擇器"></a>屬性選擇器</h3><p>指以 HTML 元素屬性作為選擇器，有許多種選擇方式，如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 以 屬性 + 屬性值 去選擇 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;http://google.com.tw/&quot;</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇 img 元素屬性為 title 的目標 */</span></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇屬性 type=&#x27;text&#x27; 的目標 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;text&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇屬性有 kaifu 單字，根據屬性值中眾多詞中某個詞進行選擇（以空白分隔決定該詞） */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class~=<span class="string">&#x27;kaifu&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇 href 的屬性值起始字串為 http:// 的目標  */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;http://&quot;</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選取 href 的屬性值結尾字串為 .pdf 的對象  */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$=<span class="string">&#x27;.pdf&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選取 img 所有 src 屬性值裡面包含單字 kaifu 的對象; */</span></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src*=<span class="string">&#x27;kaifu&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選取所有圖片裡面有 figure- 的圖片，例如:figure-01.jpg、figure-02.jpg */</span></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src|=<span class="string">&#x27;figure&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
