<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第十章 - 常用方法</title>
    <url>/2020/10/20/lesson-jq-10.useful/</url>
    <content><![CDATA[<h1 id="切換-active-類別"><a href="#切換-active-類別" class="headerlink" title="切換 active 類別"></a>切換 active 類別</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;ul&gt;li&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">this</span>).addClass(<span class="string">&#x27;active&#x27;</span>).siblings().removeClass(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="全選-checkbox"><a href="#全選-checkbox" class="headerlink" title="全選 checkbox"></a>全選 checkbox</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> tog = <span class="literal">false</span></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  $(<span class="string">&#x27;input[type=checkbox]&#x27;</span>).attr(<span class="string">&#x27;checked&#x27;</span>, (tog = !tog))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  <span class="keyword">if</span> ($(<span class="string">&#x27;input[type=checkbox]&#x27;</span>).attr(<span class="string">&#x27;checked&#x27;</span>)) &#123;</span><br><span class="line">    $(<span class="string">&#x27;input[type=checkbox]&#x27;</span>).attr(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;input[type=checkbox]&#x27;</span>).attr(<span class="string">&#x27;checked&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="偵測元素內有無東西"><a href="#偵測元素內有無東西" class="headerlink" title="偵測元素內有無東西"></a>偵測元素內有無東西</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!$(<span class="string">&#x27;#box&#x27;</span>).html()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;empty&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;somthing&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元運算子</span></span><br><span class="line">!$(<span class="string">&#x27;#box&#x27;</span>).html() ? <span class="built_in">console</span>.log(<span class="string">&#x27;empty&#x27;</span>) : <span class="built_in">console</span>.log(<span class="string">&#x27;somthing&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一種寫法</span></span><br><span class="line"><span class="keyword">if</span> ($(<span class="string">&#x27;#box&#x27;</span>).is(<span class="string">&#x27;:empty&#x27;</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;沒有東西&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;有東西&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元運算子</span></span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).is(<span class="string">&#x27;:empty&#x27;</span>) ? <span class="built_in">console</span>.log(<span class="string">&#x27;沒有東西&#x27;</span>) : <span class="built_in">console</span>.log(<span class="string">&#x27;有東西&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="偵測某個元素是否存在"><a href="#偵測某個元素是否存在" class="headerlink" title="偵測某個元素是否存在"></a>偵測某個元素是否存在</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">&#x27;a&#x27;</span>).length) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;存在&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;不存在&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="偵測某個元素是否可見"><a href="#偵測某個元素是否可見" class="headerlink" title="偵測某個元素是否可見"></a>偵測某個元素是否可見</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(<span class="string">&#x27;#box&#x27;</span>).is(<span class="string">&#x27;:visible&#x27;</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;可見&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;不可見&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第九章 - 通用工具</title>
    <url>/2020/10/16/lesson-jq-09.utilities/</url>
    <content><![CDATA[<h1 id="each"><a href="#each" class="headerlink" title=".each()"></a>.each()</h1><p>如果想要逐一查用 jQuery 物件中所有的元素，可以呼叫 each()方法，而不用撰寫 for 迴圈，$().each() 是 jQuery 的 for 迴圈。each()類似 ECMAScript 5 的 forEach()陣列方法。預期一個回呼函式作為唯一的引數，並為 jQuery 物件中每個元素呼叫一次那個 callback 函式（以文件順序）。</p>
<a id="more"></a>

<p>jQuery 的 each()方法有個特色與 JavaScript 的 forEach()相當不同：只要 callback 對任何一個元素回傳 false，迭代動作就會止於那個元素（這就像是在正常的迴圈中使用 break 關鍵字）。</p>
<p>each() 會依選擇對象，逐一去執行程式，以迴圈繞行符合選擇器的每一個元素，就像組裝線上的機器一個接著一個的處理元素，當函式放在 each() 裡頭時，程式碼增添強大的威力，該函式隨著 each() 處理每個元素的同時對該元素做某事，在 function(index)的第一參數索引值，追蹤紀錄該函式正在處理那個元素編號，第二參數為 html 元素，而不是 jQuery 物件。另外，請注意函式裡面 this 的使用。</p>
<blockquote>
<p>$(selector).each(function(index,element){…})</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;span&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// index 從 0 開始，element 為該 html element，而不是 jQuery 物件</span></span><br><span class="line">  <span class="built_in">console</span>.log(index, element)</span><br><span class="line">  <span class="comment">// this.id 為獲取 Html element 元素的 id 屬性值</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.id)</span><br><span class="line">  <span class="comment">// $(this) 將 Html element 轉成 jQuery 物件參照，此時才可以使用 jQ 的 attr 方法</span></span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="built_in">this</span>).attr(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>$().each() 與 $.each(object, callback) 並不相同。</p>
</div>

<h1 id="map"><a href="#map" class="headerlink" title=".map()"></a>.map()</h1><p>jQuery 方法 map()運作的方式很像 Array.map()方法，它接受一個 callback 函式作為它的引數，並為 jQuery 物件中的每一個元素呼叫一次這個函式，收集這些呼叫傳回的值，return <strong>一個新的 jQuery 物件</strong>，它包含一個陣列，可以呼叫.get()去取得。如果 callback 函式回傳 null 或 undefined，這個值會被忽略，該次呼叫不會有任何東西被加到新的 jQuery 物件中。</p>
<blockquote>
<p>$(selector).map(function(index,element){})</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jQ = $(<span class="string">&#x27;#week li&#x27;</span>)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span> (<span class="params">index, ele</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ele.tagName</span><br><span class="line">  &#125;)</span><br><span class="line">  .get() <span class="comment">// .toArray()</span></span><br><span class="line">  .join()</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>如果要處理一般陣列或 JS 物件，請改用 $.map()，與 .map() 不同喔。</p>
</div>

<h1 id="index"><a href="#index" class="headerlink" title=".index()"></a>.index()</h1><p>除了 each()、map()之外，另一個基本 jQuery 方法是 index()。這個方法預期一個 element 作為它的引數，然後回傳那個元素在 jQuery 物件中的索引（index），從 0 開始，或在找不到那個元素時回傳 -1。</p>
<blockquote>
<p>index()</p>
</blockquote>
<p>沒有傳入任何引數，index()會回傳 jQuery 物件第一個元素在其兄弟元素中的索引位置。</p>
<blockquote>
<p>.index( element or jQuery )</p>
</blockquote>
<p>傳入一個 element 或 jQuery 物件作為引數，index()會搜尋那個物件中的第一個元素的索引值。</p>
<blockquote>
<p>.index( selector )</p>
</blockquote>
<p>傳入一個字串，index()會把它作為一個 CSS 選擇器，並回傳 jQuery 物件中第一個符合的元素的索引值。</p>
<h1 id="this-與-this"><a href="#this-與-this" class="headerlink" title="$(this) 與 this"></a>$(this) 與 this</h1><h2 id="this"><a href="#this" class="headerlink" title="$(this)"></a>$(this)</h2><p>指的是 DOM 元素的 jQuery 包裝集，可以使用 jQuery 指向當前動作的元素去執行程式，若要存取屬性須配合 jQuery 的方法。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="built_in">this</span>).attr(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;one&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  alert($(<span class="built_in">this</span>).attr(<span class="string">&#x27;id&#x27;</span>))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="this-1"><a href="#this-1" class="headerlink" title="this"></a>this</h2><p>指的是該 HTML DOM 元素物件，可直接存取屬性與值。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.id = <span class="string">&#x27;one&#x27;</span></span><br><span class="line">alert(<span class="built_in">this</span>.id)</span><br></pre></td></tr></table></figure>

<p>請盡量使用 $(this)，這樣還可以搭配 jQuery 的方法去遍歷走訪 DOM。<br>this 非常適合配合使用 each() 函式時，自然會需要存取每個元素的屬性。要在每一輪執行中存取目前的元素時，可使用稱為 this 的特殊關鍵字。<br>this 關鍵字指向呼叫不具名函式的元素。因此在 jQuery 自動迴圈第一輪中，this 指向 jQuery 選取結果的第一個元素，第二次就是第二個… 以此類推。</p>
<p>例子：將頁面連結在列表 #bibList 顯示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;a[href^=http://]&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> extlink = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;href&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#bibList&#x27;</span>).append(<span class="string">&#x27;&lt;li&gt;&#x27;</span> + extLink + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="this-的奧妙之處"><a href="#this-的奧妙之處" class="headerlink" title="$(this) 的奧妙之處"></a>$(this) 的奧妙之處</h2><p>透過 this 可以讓各元素單獨執行其觸發的事件內容，此功能對於打造各種用於 Web 網站組件有很大的幫助。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;header,#typo,footer&#x27;</span>).on(<span class="string">&#x27;mouseover&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 此時 this 可以單獨觸發對應的元素，如果使用原來的 &#x27;header,#typo,footer&#x27;，則會一起觸發</span></span><br><span class="line">    $(<span class="built_in">this</span>).css((<span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;#333&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="常被誤會的-jQuery-與-JavaScript"><a href="#常被誤會的-jQuery-與-JavaScript" class="headerlink" title="常被誤會的 jQuery 與 JavaScript"></a>常被誤會的 jQuery 與 JavaScript</h1><p>以下 value、val() 回傳的資料是 String，千萬不要以為$開頭就誤以為一直是 jQuery 的物件，經過每一層的運算回傳後，資料型態可能會被改變。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;demo1&#x27;</span>).value.substr(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">//正確</span></span><br><span class="line">$(<span class="string">&#x27;#demo1&#x27;</span>).val().substr(<span class="number">0</span>, <span class="number">1</span>) <span class="comment">//正確</span></span><br></pre></td></tr></table></figure>

<p>以下 this 皆指向不同元素，<br>只有 this 表示是 DOM 的物件，因此可以使用 value 屬性。<br>$(this)，把 this 放進 $() 函式則變成 jQuery 物件，因此可以使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;input&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.value <span class="comment">//正確，因為 this 是 DOM 的物件，擁有 value 這個屬性</span></span><br><span class="line">  $(<span class="built_in">this</span>).val() <span class="comment">//正確，因為 $(this) 是 JQuery 的物件，可使用 val()</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="index-不要搞混了"><a href="#index-不要搞混了" class="headerlink" title="index 不要搞混了"></a>index 不要搞混了</h1><p>jQuery 的回呼函式第一參數都是 index，常常會與 JavaScript 的回呼函式搞混，例如 jQuery 的 .each() 與 JavaScript 的 .forEach()。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(selector).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>))</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">JavaScript</span></span></span><br><span class="line"><span class="function"><span class="title">arr</span>.<span class="title">forEach</span>(<span class="params">function(value[, index[, array]]) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;[, thisArg]</span>);</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h1 id="jQuery-物件轉成真正陣列"><a href="#jQuery-物件轉成真正陣列" class="headerlink" title="jQuery 物件轉成真正陣列"></a>jQuery 物件轉成真正陣列</h1><p>如果需要將一個 jQuery 物件轉為真正的陣列，可呼叫 toArray()方法，將 jQuery 類陣列轉為陣列。除了 length 屬性，另外還有一個 jquery 屬性是所有 jQuery 物件所有的屬性，該屬性值可回傳 jQuery 版本號碼。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$().jquery <span class="comment">// 回傳版本</span></span><br><span class="line">$().jquery.__proto__ <span class="comment">// 回傳 jQuery(回傳版本) 此物件的所有方法屬性，此物件並不是指整個 jQuery</span></span><br><span class="line">$().__proto__ <span class="comment">// 回傳 jQuery 函式工廠所有方法與屬性</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 彈性盒</title>
    <url>/2020/10/14/lesson-css-11.flexbox/</url>
    <content><![CDATA[<h1 id="彈性盒（FlexBox）"><a href="#彈性盒（FlexBox）" class="headerlink" title="彈性盒（FlexBox）"></a>彈性盒（FlexBox）</h1><p>「彈性盒」是 CSS 裡很重要的觀念，如同名稱，它是一種靈活佈局的盒子，是至今 2020 主流的排版方式，幾乎著名 CSS FrameWork 都以它為佈局基礎。彈性盒的使用方式是當宣告一個元素容器為彈性盒 flex 或 inlne-flex 時，該容器就成為彈性容器（flex container），而此彈性容器裡面的子元素，無論它們是區塊（block）或是行內（inline）類型，全部都會變成彈性項目（flex item）。當然，一些區塊元素預設的外距還是會造成些許差異（移除外距大家就一樣了），但不影響其成為彈性項目的事實。在彈性盒裡面的世界，有著屬於它自己佈局的方式，自成彈性盒領域。</p>
<a id="more"></a>

<h1 id="主軸與次軸"><a href="#主軸與次軸" class="headerlink" title="主軸與次軸"></a>主軸與次軸</h1><p>彈性盒與一般盒模型不同的地方，在於彈性盒本身具有「兩條看不見的軸」，主軸（main axis）和次軸（交叉軸 cross axis），兩條軸分別都有著起點與終點兩個軸點，主軸是 main start 與 main end，次軸是 cross start 與 cross end，如下圖所示。<strong>這些軸點是彈性盒對齊彈性項目的依據</strong>。另外，需要記住一點，下圖可能會令人認為主軸是負責水平流向，次軸則是垂直流向，其實不是的，<strong>主軸與次軸的位置會根據彈性盒的 flex-direction 流向來決定</strong>。當 flex-direction:column 時，主軸會變成垂直流向，次軸會變成水平流向。</p>
<img data-src="/images/css/css-flexbox-01.png" width="700">

<h1 id="彈性盒預設值"><a href="#彈性盒預設值" class="headerlink" title="彈性盒預設值"></a>彈性盒預設值</h1><p>學習彈性盒需熟記最初建立彈性盒所產生的預設值，也就是宣告元素 display:flex 成為彈性容器時，其實已經構築好預設的彈性盒領域，一開始的預設佈局方式。以下預設屬性不會顯示出來，但它們確實已經存在。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="comment">/* 當元素宣告為彈性容器時，其實已經產生以下的預設值 */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 預設值們 */</span></span><br><span class="line">  <span class="comment">/* 主軸對齊方式預設以 main start 開始  */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">  <span class="comment">/* 次軸對齊方式預設為伸展拉長 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">  <span class="comment">/* 以列為水平方向的排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="comment">/* 彈性項目不換行 */</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="彈性盒屬性"><a href="#彈性盒屬性" class="headerlink" title="彈性盒屬性"></a>彈性盒屬性</h1><p>設定在彈性盒的屬性，當元素宣告 display:flex 或 inline-flex 成為彈性容器時，才能使用它們。</p>
<table>
<thead>
<tr>
<th>屬性</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>justify-content</td>
<td>宣告在彈性容器，水平對齊的位置</td>
</tr>
<tr>
<td>align-items</td>
<td>宣告在彈性容器，垂直對齊的位置</td>
</tr>
<tr>
<td>flex-direction</td>
<td>宣告在彈性容器，彈性項目的方向</td>
</tr>
<tr>
<td>flex-wrap</td>
<td>宣告在彈性容器，單行（不換行）、多行（換行）</td>
</tr>
<tr>
<td>flex-flow</td>
<td>宣告 flex-direction、flex-wrap</td>
</tr>
<tr>
<td>align-content</td>
<td>宣告在彈性容器，條件必須是多行元素（flex-wrap:wrap）才能使用</td>
</tr>
</tbody></table>
<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><p>定義了彈性項目在彈性容器主軸（橫軸）上的對齊行為，宣告在彈性容器，不是在彈性項目。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 預設 彈性項目對齊主軸 main start 開始端點 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">  <span class="comment">/* 彈性項目對齊主軸　main end　結束端點 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">  <span class="comment">/* 彈性項目對齊主軸中央 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="comment">/* 彈性項目會以主軸開始、結束兩端點先做為基準，並讓彈性項目之間平均分配空間 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="comment">/* 彈性項目平均分配空間，但開始、結束端點會留下空白 */</span></span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h2><p>定義了彈性容器在次軸上的對齊行為，宣告在彈性容器裡，不是在彈性項目，彈性項目會垂直排列。預設值 stretch 可以拉長到 100% 的 cross-size（垂直尺寸），但要是設定了 min-height、min-width、max-height、width 或 height，這些屬性有較高的優先權。也就是說，要是彈性項目在次軸方向明確定義了尺寸，就無法拉長，stretch 不會影響它的大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 預設 彈性項目會拉長可延伸   */</span></span><br><span class="line">  <span class="attribute">align-item</span>: stretch;</span><br><span class="line">  <span class="comment">/* 彈性項目會對齊 cross start 開始端點 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">  <span class="comment">/* 彈性項目會對齊 cross end 結束端點 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  <span class="comment">/* 彈性項目會對齊中央 */</span></span><br><span class="line">  <span class="attribute">align-item</span>: center;</span><br><span class="line">  <span class="comment">/* 彈性項目會對準基準線，很少使用 */</span></span><br><span class="line">  <span class="attribute">align-item</span>: baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p>彈性項目的排列方式，水平（row）或垂直（column）排列，宣告在彈性容器裡，不在彈性項目。<strong>主軸流向的決定是依據 flex-direction 的屬性值</strong>。</p>
<p>當屬性值為 row：主軸為水平流向，次軸為垂直流向，彈性項目依據主軸水平排列，<br>當屬性值為 column：主軸為垂直流向，次軸為水平流向，彈性項目依據主軸垂直排列。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 預設 水平排列*/</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="comment">/* 垂直排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="comment">/* 水平反向排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">  <span class="comment">/* 垂直反向排列 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><p>彈性項目是否要換行，預設為不換行（nowrap）。</p>
<p>設定 flex:nowrap，無論彈性容器多窄，彈向項目都會排在同一列，即便超過彈性容器的寬度，也不會換行。<br>設定 flex:wrap，彈性項目有設定寬度時，當彈性項目的寬大於彈性容器，彈性項目就會換行。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* 預設　不換行 */</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">  <span class="comment">/* 換行 */</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="comment">/* 反向換行 */</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p>flex-flow 可以同時設定 flex-direction 與 flex-wrap 的縮寫，定義彈性容器的排列與換行。宣告 display:flex 時，預設是 flex-flow:row nowrap。</p>
<h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><p>align-content 設置了瀏覽器如何沿著伸縮盒子容器（flexbox container）的橫軸和網格容器（Grid Container）的主軸在內容項之間和周圍分配空間。該屬性對單行彈性盒子模型無效，因此<strong>彈性容器必須要 flex-wrap: wrap 才會有作用</strong>。</p>
<h1 id="彈性項目的屬性"><a href="#彈性項目的屬性" class="headerlink" title="彈性項目的屬性"></a>彈性項目的屬性</h1><table>
<thead>
<tr>
<th>屬性</th>
<th>解說</th>
</tr>
</thead>
<tbody><tr>
<td>align-self</td>
<td>覆寫 align-items 屬性</td>
</tr>
<tr>
<td>flex-grow</td>
<td>彈性伸展係數，控制彈性項目的伸展比例</td>
</tr>
<tr>
<td>flex-shrink</td>
<td>彈性收縮係數，控制彈性項目的收縮比例</td>
</tr>
<tr>
<td>flex-basis</td>
<td>彈性基礎係數，控制彈性項目的長度設定</td>
</tr>
<tr>
<td>flex</td>
<td>三合一屬性，分別是彈性伸展係數、彈性收縮係數、彈性基礎係數</td>
</tr>
<tr>
<td>order</td>
<td>彈性項目的排序</td>
</tr>
</tbody></table>
<h2 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h2><p>align-self 可以個別調整彈性項目次軸的對齊方式，因此此屬性是宣告在彈性項目，屬性值與 align-items 一樣。</p>
<h2 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h2><p>彈性伸展係數，數字且無單位，<strong>預設值為 0</strong>，不會進行彈性伸展變化，不可為負值。當彈性項目的 flex-basis 長度「小」於它自己在彈性容器分配的長度，按照數字做相對應的「伸展」比例分配。</p>
<h2 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h2><p>彈性收縮係數，數字且無單位，<strong>預設值為 1</strong>，設為 0 的話不會進行彈性變化，不可為負值。當彈性項目的 flex-basis 長度「大」於它自己在彈性容器分配的長度，按照數字做相對應的「壓縮」比例分配。每個彈性項目預設收縮係數 1，可表示一件事，彈性項目全部加起來的總長度超過彈性容器時，不會出現爆版。</p>
<h2 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h2><p>彈性基礎係數，可為單位 px、rem、百分比等，或是 auto、none，<strong>預設值為 auto</strong>。控制彈性項目主軸的長度（寬度或高度），預設 auto 指長度設定交由彈性項目的寬度或高度為優先，如果 flex-basis 有設定單位，例如：100px、20%等等，優先權則交由 flex-basis。也就是說，彈性項目本身設定的<strong>寬度或高度會變成無效</strong>。另外，為甚麼 flex-basis 要用「長度」來說明？這是因為它也是根據主軸流向 flex-direction 來決定，當 flex-direction:row，主軸為水平流向，flex-basis 則是控制寬度；當 flex-direction:column，主軸為垂直流向，flex-basis 則是控制高度。</p>
<h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>flex 是三合一屬性，可以分別設定伸展係數、收縮係數、基礎係數，預設值為 0 1 auto，也就是說<strong>當彈性盒形成，每個彈性項目均為 flex:0 1 auto</strong>。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>第八章 - AJAX</title>
    <url>/2020/10/12/lesson-jq-08.ajax/</url>
    <content><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><h2 id="同步（Synchronous）"><a href="#同步（Synchronous）" class="headerlink" title="同步（Synchronous）"></a>同步（Synchronous）</h2><p>在瀏覽器處理 script 標籤時，傳統上會先停止頁面其他內容的處理，直到程式碼均載入且處理完成為止。這樣的模式稱為「同步處理模型」（synchronous processing model）。換句話說，也就是等我做完，你才能進行。因此，當頁面正進行載入時，若程式需要自伺服器要求資料，瀏覽器不只需要等待程式的載入和執行，還需要等待伺服器回傳程式需呈現資料的時間。</p>
<a id="more"></a>

<h2 id="非同步（Asynchronous）"><a href="#非同步（Asynchronous）" class="headerlink" title="非同步（Asynchronous）"></a>非同步（Asynchronous）</h2><p>瀏覽器能夠自伺服器要求資料，一旦送出資料請求，也同時可以載入頁面裡的其他內容，並同時處理使用者於頁面的互動操作。這樣同時進行的模式稱為非同步處理模型（Asynchronous processing model）。<br>AJAX 的 A 指的就是非同步（Asynchronous）。</p>
<h2 id="所以甚麼是-AJAX？"><a href="#所以甚麼是-AJAX？" class="headerlink" title="所以甚麼是 AJAX？"></a>所以甚麼是 AJAX？</h2><p>AJAX，Asynchronous Javascript and XML (非同步的 Javasccript 與 XML 技術)，在這些技術結合下，<strong>它是一個可載入資料至部份頁面區段中，而不需要重新整理整個頁面的技術</strong>。使用 AJAX 技術，換句話說，可以節省等待資料的時間，各做各的。</p>
<p>在傳統上，頁面載入完成，若想要更新瀏覽器視窗內的資訊讓使用者瀏覽，會需要重新整理整個頁面，這代表使用者必須等待新的頁面內容下載，並等待瀏覽器繪製完成。若使用 AJAX 技術，如果只需要更新一部分的頁面內容（因為使用者操作的只是部分），就可以只變更包含該部分內容的元素即可。也就是資料正進行載入時，使用者仍然可以繼續與頁面其他內容進行互動。接著，當伺服器回應後，一個特殊的 AJAX 事件將會觸發接收伺服器回應資料的程式，並僅更新頁面的部份資訊。因為不需要重新載入整個頁面，資料載入便會更快速，且使用這在等待資料下載的同時仍可與頁面互動。</p>
<p>藉由 AJAX 技術，頁面與 API 只會向伺服器要求它們真正需要的東西，也就是<strong>頁面上需要改變的部分，以及伺服器必須提供資料的部分</strong>。這表示較少的傳輸量，較少的更新以及較少的頁面重整的等待時間。傳輸資料目前以 JSON 結構格式為主流，在伺服器與瀏覽器之間進行資料的傳遞，而且不會干擾到使用者的操作，使用者可以在瀏覽器等待資料載入時，仍可以繼續進行其他操作，讓操作更為順暢。</p>
<h1 id="AJAX-名詞解釋"><a href="#AJAX-名詞解釋" class="headerlink" title="AJAX 名詞解釋"></a>AJAX 名詞解釋</h1><ul>
<li><p>A</p>
<p>AJAX 的 A 是 Asynchronous（非同步），指的是 Javascript 對伺服器提供請求，使用者仍然可透過輸入網頁表單、點擊按鈕與頁面互動，這互動所有一切都發在 Web 伺服器仍在執行。當伺服器完成工作時，程式碼可以只更新頁面上有發生改變的部分。使用者做自己的事情，資料也做自己的事情，不需要等待資料回傳的時間而在哪邊空等，這就是非同步請求。</p>
</li>
<li><p>J</p>
<p>AJAX 的 J 是「Javascript」，用來建立可以被嵌入或包含在 HTML 文件裡以及與 DOM 互動的函式。將新的內容載入至頁面部分區段中的能力，可改善使用者的操作經驗，因為若頁面只有少部分資訊需要更新，使用者就不需要再等待整個頁面的重新載入。（一頁式頁面因此崛起）。</p>
</li>
<li><p>A</p>
<p>AJAX 的 J 與 X 中間的 a 是「And」，BJ4。</p>
</li>
<li><p>X</p>
<p>AJAX 的 X 是「XML」（eXtensible Markup Language）擴充標記語言，一種儲存資訊的規格（在 JSON 出現前），也是一種描述資訊結構的規格。雖然 XML 是標記語言（就像 HTML），可說是兩兄弟，但是 XML 沒有自己的標籤，但它允許撰寫 XML 的人建立自己需要的標籤。XML 被用來格式化資料以利傳輸。而 HTML 被用來標記結構與內容。</p>
</li>
</ul>
<h1 id="jQuery-的-ajax-方法"><a href="#jQuery-的-ajax-方法" class="headerlink" title="jQuery 的 $.ajax() 方法"></a>jQuery 的 $.ajax() 方法</h1><p>$.ajax()方法是 jQuery 最完整的 AJAX 方法，所有 jQuery 的 AJAX 快捷方法，都可以使用它做到，它允許在發送 AJAX 請求時，有更多精細的控制及調整。並搭配不同的控制設定以達成目的。它提供<strong>非常多，超級多</strong>的設定允許我們控制 AJAX，也是整個程式庫中最為複雜的函式。但使用它很簡單，一般比較直覺是傳入一個選項物件，此物件屬性可以設定 AJAX 所有細節。</p>
<blockquote>
<p>$.ajax( PlainObject_settings )</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(&#123;</span><br><span class="line">  url: url, <span class="comment">// API位置，要擷取資料的 URL</span></span><br><span class="line">  type: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// HTTP 請求方法</span></span><br><span class="line">  dataType: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 預期從伺服器回傳的資料型別</span></span><br><span class="line">  data: &#123;<span class="attr">a</span>: <span class="number">123</span>&#125;, <span class="comment">// 傳甚麼資料過去 Object、String、Array</span></span><br><span class="line">  cache: <span class="literal">false</span>, <span class="comment">//暫存(cache)在本地，以減少對伺服器的呼叫。</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 完成時呼叫這個函式</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="選項物件的屬性設定"><a href="#選項物件的屬性設定" class="headerlink" title="選項物件的屬性設定"></a>選項物件的屬性設定</h1><h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><p>類型：String<br>預設：目前頁面<br>API 位置，要擷取資料的 URL，對 GET 請求而言，data 屬性傳送資料會被附加到這個 URL。</p>
<h2 id="type（all-version）-or-method（version-1-9-）"><a href="#type（all-version）-or-method（version-1-9-）" class="headerlink" title="type（all version） or method（version 1.9+）"></a>type（all version） or method（version 1.9+）</h2><p>類型：String<br>預設：’get’<br>http 請求方法，預設為 get（讀取），其他常用請求方法為 post（新增） 或 patch（更新部分）、put（更新全部）、delete（刪除），請求方法有非常多種，請參考<a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Methods">MDN</a>。</p>
<h2 id="dataType"><a href="#dataType" class="headerlink" title="dataType"></a>dataType</h2><p>類型：String<br>預設：Intelligent Guess（自動判斷）</p>
<p>預期伺服器回傳的資料型別。如果不指定，jQuery 將自動根據 HTTP 包 MIME 資訊返回 responseXML 或 responseText，比如 XML MIME 類型就被識別為 XML，並作為回呼函式引數傳遞。</p>
<table>
<thead>
<tr>
<th>資料類型</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>“text”</td>
<td>回傳純文本字串，不做處理。</td>
</tr>
<tr>
<td>“html”</td>
<td>此類型就像 text 回應為純文字。load()方法使用這個類型，並將回傳的文字插入到文件本身。</td>
</tr>
<tr>
<td>“xml”</td>
<td>回傳 XML 文檔，可用 jQuery 的選擇器來遍歷處理。</td>
</tr>
<tr>
<td>“script”</td>
<td>把響應的結果當作 JavaScript 執行。並將其當作純文本回傳。</td>
</tr>
<tr>
<td>“json”</td>
<td>回傳 JSON 格式的資料。傳入 callback 的值是使用 jQuery.parseJSON()解析 URL 內容後所獲得物件。</td>
</tr>
<tr>
<td>“jsonp”</td>
<td>以 JSONP 的方式載入 JSON。</td>
</tr>
</tbody></table>
<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>類型：PlainObject or String or Array</p>
<p>傳送到伺服器端的資料，將自動轉換為請求字串格式。GET 請求會附加在 URL 後。檢視 processData 屬性說明以禁止此自動轉換。 data 必須為 Key/Value 格式。如果為陣列，jQuery 將自動為不同值對應同一個名稱，如 {foo:[“bar1”, “bar2”]} 轉換為’&amp;foo=bar1&amp;foo=bar2’。要附加到 URL 中（GET 請求）或是要放在請求主體中送出（POST 請求）的資料，這可以是個字串或一個物件。<strong>物件通常會被轉為字串</strong>。</p>
<h1 id="選項物件的回呼函式"><a href="#選項物件的回呼函式" class="headerlink" title="選項物件的回呼函式"></a>選項物件的回呼函式</h1><p>$.ajax() 提供了幾個時機使用的回呼函式。</p>
<h2 id="success"><a href="#success" class="headerlink" title="success"></a>success</h2><p>類型：function(Object data,String textStatus,jqXHR)</p>
<p>當 AJAX 請求成功去取得回應後，須執行的回呼函式。<br>第一個引數是由伺服器送出的資料，類型取決於 dataType 選項或伺服器回應的 Content-Type 選項。如果類型為”xml”，第一個引數就會是個 Document 物件。<br>第二個引數是 jQuery 狀態碼。<br>第三個引數是用以發出請求的 XMLHttpRequest 物件。</p>
<p>如果類型是 “json”或”jsonp”，第一個就是解析自伺服器的 JSON 格式回應的物件。<br>如果類型為”script”，回應就是已載入的指令碼的文字（不過屆時該指令搞已經被執行過了，在這個情況中回應通常可被忽略）。<br>對其他類型而言，回應單純就是所請求資源的文字。第二個引數狀態碼通常是字串”success”，如果已設定 ifModified 選項，這個引數可能會是”notmodified”。在這個情況下，伺服器不會送出回應，而第一個引數會是 undefined。”script”與”jsonp”類型的跨網域請求是透過 script 元素是非 XMLHttpRequest 來進行，因此對這些請求而言，第三個引數會是 undefined。</p>
<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>類型：function(jqXHR, String textStatus, String errorThrown)</p>
<p>當 AJAX 請求發生錯誤後，須執行的回函式，可能 HTTP 錯誤或其他因素。要找到更多資訊，可檢查 XMLHttpRequest 物件中的 HTTP 狀態碼，它可以傳入三個參數。</p>
<p>第一個引數是該請求的 XMLHttpRequest 物件（若是它有使用的話）。<br>第二個引數是 jQuery 狀態碼。對 HTTP 錯誤來說會是”error”，逾時則是”timeout”，而解析伺服器回應時發生的錯誤則是”parsererror”。<br>舉例來說，如果一份 XML 文件或是一個 JSON 物件的格式不正確，狀態碼就會是”parsererror”。在這種情況下，error callback 的第三個引數會是擲出的 error 物件。</p>
<div class="admonition warning"><p>注意 dataType 為 &quot;script&quot; 的請求傳回不正確的 JavaScript 程式碼時並不會導致錯誤。指令碼中任何的錯誤都會被無聲地忽略掉。而被呼叫的會是 success callback 而非 error callback。</p>
</div>

<h2 id="complete"><a href="#complete" class="headerlink" title="complete"></a>complete</h2><p>類型：function(jqXHR,textStatus)</p>
<p>不管成功或錯誤，只要請求完成就執行的回呼函式，請求 success 和 error 之後都會呼叫。此函式有 2 個參數，「jqXHR 物件」以及「包含成功或錯誤代碼的字串」。</p>
<h1 id="jqXHR-物件"><a href="#jqXHR-物件" class="headerlink" title="jqXHR 物件"></a>jqXHR 物件</h1><p>甚麼是 jqXHR 物件？直接用開發者工具瀏覽。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jqXHR = $.get(<span class="string">&#x27;https://kktix.com/events.json&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(jqXHR)</span><br></pre></td></tr></table></figure>

<img data-src="/images/jquery/jq-08-jqXHR.jpg" width="700">

<p>在 jQuery 1.5 版後，所有 jQuery 的 AJAX 方法 ($.get, $.post, $.ajax, …) 都會回傳一個 jqXHR 物件，jqXHR 是 XMLHTTPRequest 的超集合 (superset)，紀錄了需要指定資料後續處理的方式，以較簡單的方式處理遠端伺服器所回傳的資料。</p>
<table>
<thead>
<tr>
<th>jqXHR 特性</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>responseJSON</td>
<td></td>
</tr>
<tr>
<td>responseText</td>
<td>回傳以文字為基礎的資料</td>
</tr>
<tr>
<td>status</td>
<td>狀態碼</td>
</tr>
<tr>
<td>statusCode</td>
<td></td>
</tr>
<tr>
<td>statusText</td>
<td>狀態碼說明（通常用於發生錯誤時，顯示錯誤相關資訊以利偵錯）</td>
</tr>
<tr>
<td>readyState</td>
<td></td>
</tr>
<tr>
<td>setRequestHeader(name, value)</td>
<td>通過替換舊的值為新的值，而不是替換的新值到舊值</td>
</tr>
<tr>
<td>getAllResponseHeaders()</td>
<td></td>
</tr>
<tr>
<td>getResponseHeader()</td>
<td></td>
</tr>
<tr>
<td>abort()</td>
<td></td>
</tr>
</tbody></table>
<p>另外，從上圖可以知道，jqXHR 同時實作了 Promise 的介面 (interface)，讓我們可以更方便操作非同步的 AJAX 請求。它擁有了 deferred 物件的方法，因此可以使用 .done()、.fail()、.always()、.then()這些方法，更方便進行串接 (chaining)：</p>
<table>
<thead>
<tr>
<th>jqXHR 方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>.done()</td>
<td>當資料請求成功時，須執行的程式區段，替代了過去的.success()</td>
</tr>
<tr>
<td>.fail()</td>
<td>當資料請求失敗時，須執行的程式區段，替代了過去的.error()</td>
</tr>
<tr>
<td>.then()</td>
<td>兩個 Callback Functoin 參數，請求成功執行第一個 CB，請求失敗執行第二個 CB</td>
</tr>
<tr>
<td>.catch()</td>
<td></td>
</tr>
<tr>
<td>.always()</td>
<td>不管資料請求成功或失敗時，都會執行的程式區段，替代了過去的.complet()</td>
</tr>
</tbody></table>
<div class="admonition warning"><p>jqXHR.success()、jqXHR.error()和 jqXHR.complete()從 jQuery 3.0 移除。請使用 jqXHR.done(), jqXHR.fail(),和 jqXHR.always()代替。</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jqXHR 可以串接多個處理函式</span></span><br><span class="line"><span class="comment">// 並把函式返回的 jqXHR 存回 jqxhr 變數</span></span><br><span class="line"><span class="keyword">let</span> jqxhr = $.ajax(<span class="string">&#x27;example.php&#x27;</span>)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;失敗&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;結束&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// .done() .fail() .always() .then() 都可以重複 call 很多次</span></span><br><span class="line"><span class="comment">// 所有 callback 都會依序的執行</span></span><br><span class="line">jqxhr.always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;結束 part 2&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Deferred-物件"><a href="#Deferred-物件" class="headerlink" title="Deferred 物件"></a>Deferred 物件</h1><p>jQuery 的 Promise 是 Deferred 物件，Deferred 物件遵循 CommonJS Promises/A 設計規範，可以將非同步轉變為同步的操作。<a href="https://api.jquery.com/category/deferred-object/">參考官網</a>。</p>
<h2 id="創建-Deferred-物件"><a href="#創建-Deferred-物件" class="headerlink" title="創建 Deferred 物件"></a>創建 Deferred 物件</h2><table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>$.Deferred（）</td>
<td>建立一個新的 Deferred 物件</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> def = $.Deferred() <span class="comment">// 建立一個 Deferred 物件</span></span><br><span class="line"><span class="built_in">console</span>.log(def) <span class="comment">// 打印出來看看</span></span><br></pre></td></tr></table></figure>

<p>打印出來可以一覽 deferred 物件的全貌，它提供了操作 Promise 時熟悉的方法 done()、fail()、then()等，以及資料處理狀態成功 resolve()或失敗 reject()。</p>
<img data-src="/images/jquery/jq-08-deferred.jpg" width="700">

<h2 id="Deferred-的狀態"><a href="#Deferred-的狀態" class="headerlink" title="Deferred 的狀態"></a>Deferred 的狀態</h2><table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>deferred.resolve(arg)</td>
<td>狀態成功要傳遞的資料</td>
</tr>
<tr>
<td>deferred.reject(arg)</td>
<td>狀態失敗要傳遞的資料</td>
</tr>
<tr>
<td>deferred.promise()</td>
<td>回傳狀態資料</td>
</tr>
</tbody></table>
<p>jQuery 的 deferred 物件本身有 resolve()、reject() 方法，可以直接呼叫使用，規範中的 promise 則必須要傳入 resolve、reject 參數，這是它們的不同點，另外，遵循 promise 規範，resolve 與 reject 只能活一個，就像告白一樣，要不就解決，要不就被拒絕。並且提供了 promise()方法，此方法會確實回傳 resolve() 或 reject() 狀態的資料，避免被其他方法修改，這是一種隔離保護的封裝作用，它只能接受用 done()、fail()、then()、always()這些方法來處理它。以下為骰子骰出偶數為「解決」，骰出奇數為「拒絕」。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> def = $.Deferred()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rnd = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">6</span>) + <span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(rnd)</span><br><span class="line">    rnd % <span class="number">2</span> === <span class="number">0</span> ? def.resolve(<span class="string">&#x27;骰出偶數，解決&#x27;</span>) : def.reject(<span class="string">&#x27;骰出奇數，拒絕&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">return</span> def.promise() <span class="comment">// 確實回傳狀態資料</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">one()</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(def.state())</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(def.state())</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<div class="admonition info"><p>沒有在 resolve()、reject()中稱為第三狀態 pending，表示仍在進行中的狀態。</p>
</div>

<h2 id="Deferred-進行中的狀態"><a href="#Deferred-進行中的狀態" class="headerlink" title="Deferred 進行中的狀態"></a>Deferred 進行中的狀態</h2><p>當 Deferred 物件尚未設定為 resolved 或 rejected 狀態時，表示仍在進行中，則可使用 notify() 處理進行中的資料，使用方式與 resolve()與 reject()一樣。progress()方法使用與 done()一樣，可以用來追蹤進行中資料狀態的結果。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>deferred.notify()</td>
<td>狀態進行中的資料</td>
</tr>
<tr>
<td>deferred.progress()</td>
<td>進行中狀態資料的結果</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replyProgress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> def = $.Deferred()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      def.notify(i)</span><br><span class="line">    &#125;, <span class="number">1000</span> * i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> def.promise()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> promise = replyProgress()</span><br><span class="line">promise.progress(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Deferred-狀態檢測"><a href="#Deferred-狀態檢測" class="headerlink" title="Deferred 狀態檢測"></a>Deferred 狀態檢測</h2><table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>deferred.state()</td>
<td>回傳字串 “resolved”、”rejected” 或 “pending”</td>
</tr>
</tbody></table>
<h2 id="Deferred-狀態結果方法"><a href="#Deferred-狀態結果方法" class="headerlink" title="Deferred 狀態結果方法"></a>Deferred 狀態結果方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>deferred.done()</td>
<td>完成時要處理的動作</td>
</tr>
<tr>
<td>deferred.fail()</td>
<td>失敗時要處理的動作</td>
</tr>
<tr>
<td>deferred.then()</td>
<td>具有完成時、失敗時、進行時三種狀態的動作</td>
</tr>
<tr>
<td>deferred.always()</td>
<td>不館完成或失敗都要處理的動作，類似 ajax 中的 complete</td>
</tr>
<tr>
<td>deferred.catch()</td>
<td></td>
</tr>
</tbody></table>
<p>done() 與 fail()分別要做的事情。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">one()</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(def.state())</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(def.state())</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>處理動作的方法也可以加入多個進行串鍊。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;f3&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">one()</span><br><span class="line">  .done(f1, f2)</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(def.state())</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .done(f3)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(def.state())</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>在 Promise 規範中，then() 方法接受兩個參數，分別是執行完成和執行失敗的回調，而 jquery 中 deferred 進行了增強，接受第三個參數，在進行中狀態時的函式處理。</p>
<blockquote>
<p>deferred.then( [doneFilter ] [, failFilter ] [, progressFilter ] )</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 與 .done().fail() 一模一樣的功能</span></span><br><span class="line">one().then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(def.state())</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(def.state())</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>從jQuery 1.8 開始，deferred.pipe() 列入不推薦使用，應該使用 deferred.then() 代替它。</p>
</div>

<h2 id="when"><a href="#when" class="headerlink" title="$.when()"></a>$.when()</h2><p>jquery 中，還有一個 $.when 方法來實現 Promise，與 ES6 中的 all 方法功能一樣，它可以合併多個 Deferred 物件，處理多個非同步任務，但任何一個回傳 rejected 就會進入 fail。必須在所有的非同步操作執行完後才執行回呼函式。然而，jQuery 中沒有像 ES6 中的 race 方法嗎？也就是以跑最快為準的方法。是的，答案是沒有。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>$.when()</td>
<td>合併多個 Deferred 物件</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成功接受三個 deferred 物件，才會執行後方 then 的回呼函式</span></span><br><span class="line">$.when(def1(), def2(), def3()).then(<span class="function"><span class="keyword">function</span> (<span class="params">data1, data2, data3</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;全部執行完成&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(data1, data2, data3)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>$.when 並沒有定義在 $.Deferred 中，請看他們的名字，都是jQuery金錢工廠設計出的方法，$.when 是一個單獨的方法。與 ES6 的 all 的參數稍有區別，它接受的並不是陣列，而是多個 Deferred 物件象。</p>
</div>

<h2 id="使用-callback-達到同步"><a href="#使用-callback-達到同步" class="headerlink" title="使用 callback 達到同步"></a>使用 callback 達到同步</h2><p>在使用 callback 操作同步時，它將難以閱讀，而且很容易進入回呼地獄。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// callback</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    callback()</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">third</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line">first()</span><br><span class="line">second(third)</span><br></pre></td></tr></table></figure>

<h2 id="使用-Deferred-promise"><a href="#使用-Deferred-promise" class="headerlink" title="使用 Deferred (promise)"></a>使用 Deferred (promise)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 $.Deferred() 物件</span></span><br><span class="line">  <span class="keyword">let</span> def = $.Deferred()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  <span class="comment">// resolve 或 reject</span></span><br><span class="line">  def.resolve(<span class="string">&#x27;第一個完成&#x27;</span>)</span><br><span class="line">  <span class="comment">// def.reject(&#x27;第一個失敗&#x27;)</span></span><br><span class="line">  <span class="keyword">return</span> def.promise()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> def = $.Deferred()</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 接收第一個函式的參數</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">// resolve 或 reject</span></span><br><span class="line">    def.resolve(<span class="string">&#x27;第二個完成&#x27;</span>)</span><br><span class="line">    <span class="comment">// 可以傳出錯誤的訊息，不一定是字串，可以為任何資料型態</span></span><br><span class="line">    <span class="comment">// def.reject(&#x27;第二個錯誤&#x27;)</span></span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> def.promise()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">third</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> def = $.Deferred()</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  <span class="comment">// resolve 或 reject</span></span><br><span class="line">  def.resolve(<span class="string">&#x27;最後一個步驟完成&#x27;</span>)</span><br><span class="line">  <span class="comment">// def.reject(&#x27;最後一個步驟失敗&#x27;)</span></span><br><span class="line">  <span class="keyword">return</span> def.promise()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 呼叫</span></span><br><span class="line">first()</span><br><span class="line">  .then(second)</span><br><span class="line">  .then(third)</span><br><span class="line">  .then(</span><br><span class="line">    <span class="comment">// 成功</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">ok</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(ok)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 失敗</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<h1 id="AJAX-與-Deferred"><a href="#AJAX-與-Deferred" class="headerlink" title="AJAX 與 Deferred"></a>AJAX 與 Deferred</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery 的 Deferred() 就是在處理 promise</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 $.Deferred() 物件</span></span><br><span class="line">    <span class="keyword">let</span> def = $.Deferred()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// resolve 或 reject</span></span><br><span class="line">    def.resolve(<span class="string">&#x27;第一個完成&#x27;</span>)</span><br><span class="line">    <span class="comment">// def.reject(&#x27;第一個失敗&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> def.promise()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> def = $.Deferred()</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="comment">// ajax(&#123;url,type,dataType,data,successCallback&#125;)</span></span><br><span class="line">    <span class="comment">// API位置，呼叫方式，回傳資料類型，傳過去的資料</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">&#x27;./data.json&#x27;</span>,</span><br><span class="line">      type: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// method： get,post,put,path,delete</span></span><br><span class="line">      dataType: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 資料格式：json,html,xml,text,jsonp（alex不怎麼愛）</span></span><br><span class="line">      data: &#123;<span class="attr">a</span>: <span class="string">&#x27;123&#x27;</span>&#125;, <span class="comment">// 傳甚麼東西過去，Object、String、Array</span></span><br><span class="line">    &#125;).then(</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// response 回應 &lt;-&gt; request 要求</span></span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">        <span class="keyword">return</span> def.resolve(res)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">        <span class="keyword">return</span> def.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> def.promise()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">third</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> def = $.Deferred()</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    <span class="comment">// resolve 或 reject</span></span><br><span class="line">    def.resolve(<span class="string">&#x27;最後一個步驟完成&#x27;</span>)</span><br><span class="line">    <span class="comment">// def.reject(&#x27;最後一個步驟失敗&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> def.promise()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 呼叫</span></span><br><span class="line">  first()</span><br><span class="line">    .then(second)</span><br><span class="line">    .then(third)</span><br><span class="line">    .then(</span><br><span class="line">      <span class="comment">// 成功</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">ok</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(ok)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 失敗</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h1 id="狀態碼"><a href="#狀態碼" class="headerlink" title="狀態碼"></a>狀態碼</h1><p>待補</p>
<p><a href="https://blog.poychang.net/http-status-code/">狀態碼參考</a></p>
<h1 id="跨來源資源共用（CORS）"><a href="#跨來源資源共用（CORS）" class="headerlink" title="跨來源資源共用（CORS）"></a>跨來源資源共用（CORS）</h1><p>待補</p>
<h1 id="ajax-其他各種工具"><a href="#ajax-其他各種工具" class="headerlink" title="ajax 其他各種工具"></a>ajax 其他各種工具</h1><p>jQuery 定義了一個高階工具方法，以及四個高階的工具函式。這些高階工具全部基於單一個威力強大的低階函式：<code>$.ajax()</code>。以下只需要了解即可：</p>
<h2 id="load-方法："><a href="#load-方法：" class="headerlink" title="load() 方法："></a>load() 方法：</h2><p>.load()方法可以載入部份內容，.load()方法是 jQuery Ajax 方法中最容易使用的方法。它只能用於自伺服端載入 HTML 內容。當伺服回應時，HTML 內容便會載入至 jQuery 選取集合中。你只要傳入一個 URL 給它，就會非同步地載入那個 URL 的內容，然後將內容插入至每個所選元素中，取代任何原有內容。此函式預設是以 GET 的方式來發送請求，但是如果有設參數 data 則會自動轉為 POST。</p>
<blockquote>
<p>.load( url [, data ] [, complete ] )</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 載入 jq-ajax3.html #content 部分內容</span></span><br><span class="line">$(<span class="string">&#x27;#content&#x27;</span>).load(<span class="string">&#x27;jq-ajax3.html #content&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每 60秒 載入並顯示最新的狀態報告</span></span><br><span class="line">setInaterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;#status&#x27;</span>).load(<span class="string">&#x27;status_report.html&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">60000</span>)</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>如果 load()方法第一個引數是個函式而非字串，會被當作 load 事件註冊處理器，而非一個 Ajax 方法。</p>
</div>

<p>第二參數如果傳入一個字串，會被附加到 URL（視狀況在?或&amp;之後）。如果傳入一個物件，會被轉成以&amp;區隔的 name=value 對組所成的字串，然後連同請求一起送出。load()方法通常是發出 HTTP GET 請求，如果傳入一個資料物件，它會改發出 POST 請求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定郵遞區號字串作為資料</span></span><br><span class="line">$(<span class="string">&#x27;#temp&#x27;</span>).load(<span class="string">&#x27;us_weather_report.html&#x27;</span>, <span class="string">&#x27;zipcode=02134&#x27;</span>)</span><br><span class="line"><span class="comment">// 用物件做為資料</span></span><br><span class="line">$(<span class="string">&#x27;#temp&#x27;</span>).load(<span class="string">&#x27;us_weather_report.html&#x27;</span>, &#123;<span class="attr">zipcode</span>: <span class="number">02134</span>, <span class="attr">units</span>: <span class="string">&#x27;F&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="get-與-post"><a href="#get-與-post" class="headerlink" title="$.get()與 $.post()"></a>$.get()與 $.post()</h2><p><code>$.get()</code>與<code>$.post()</code> 擷取指定 URL 的內容，傳遞指定的資料（如果有的話），並將結果傳給指定的 callback。$.get()透過 HTTP GET 請求來達到此目的，而 $.post()則使用 POST 請求，兩個工具函式是相同的。</p>
<blockquote>
<p>$.post( url [, data ] [, success ] [, dataType ] )</p>
</blockquote>
<p>這兩個方法取的四個引數：</p>
<ul>
<li>一個必要的 URL。</li>
<li>一個非必須的資料字串或 Javascript 物件實字。</li>
<li>一個幾乎每次都會用到的 callback 函式。這個 callback 函式第一個引數是回傳的資料、第二個引數是字串”success”，第三引數是 XMLHttpRequest（若有的話）。</li>
<li>接受第四個非必須的引數（如果省略資料的話，就作為第三引數傳入）用來指定請的資料類型。這第四個引數會影響資料傳到你的 callback 之前被處理的方式。</li>
</ul>
<h3 id="get-、-post-與-PHP-使用時"><a href="#get-、-post-與-PHP-使用時" class="headerlink" title="$.get()、$.post() 與 PHP 使用時"></a>$.get()、$.post() 與 PHP 使用時</h3><p>可以直接傳物件實字給 get()或 post()函式，下面使用 query string 方法，它們經常出現在 URL 的 ? 後面。</p>
<p>例如：<a href="http://www.example.com/rankMovie.php?rating=5">http://www.example.com/rankMovie.php?rating=5</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用字串方式</span></span><br><span class="line">$.get(<span class="string">&#x27;rankMovie.php&#x27;</span>, <span class="string">&#x27;rating=5&#x27;</span>)</span><br><span class="line"><span class="comment">// 將上面重新改寫成物件實字</span></span><br><span class="line">$.get(<span class="string">&#x27;rankMovie.php&#x27;</span>, &#123;<span class="attr">rating</span>: <span class="number">5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或是存在變數中</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;<span class="attr">rating</span>: <span class="number">5</span>&#125;</span><br><span class="line">$.get(<span class="string">&#x27;rankMovie.php&#x27;</span>, data)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第七章 - 動畫</title>
    <url>/2020/10/11/lesson-jq-07.animate/</url>
    <content><![CDATA[<h1 id="動畫設定"><a href="#動畫設定" class="headerlink" title="動畫設定"></a>動畫設定</h1><p>jQuery 的 animate 只支援任何「數字+單位」的屬性，且均為單個數值，例如 width、height、left，它們都可以是數字+單位（100px），background-color 就不行，除非使用 <a href="https://github.com/jquery/jquery-color">jQuery.Color</a> 或 <a href="https://jqueryui.com/">jQuery UI</a>來擴充設定，jQuery UI 還能擴充 easing 動畫速率使用種類（jQuery 只提供 swing 與 linear）。</p>
<a id="more"></a>

<p>若沒有特別指定其他單位，預設將會被視為像素(px)。CSS 樣式名稱的寫法可採用「駝峰式命名」，若要採用原樣式連字號（-）寫法，會被視為不合法的 JS 識別字，必須加上引號，因此 magin-left 可以寫成<code>maginLeft</code>或<code>&#39;magin-left&#39;</code>，兩種都沒問題，寫作風格上建議使用「駝峰式命名」。</p>
<p>除了可以設定 CSS 樣式屬性，還可以對某些非樣式屬性，例如:<code>scrollTop</code>和<code>scrollLeft</code>。</p>
<ul>
<li><a href="https://www.w3school.com.cn/jquery/effect_animate.asp">參考 animate 可設置的屬性</a></li>
</ul>
<div class="admonition warning"><p>注意，動畫不支援速記CSS屬性（例如：font、background、border），無法動態調整顏色、字型種類或列舉屬性。</p>
</div>

<p>要指定相對值，可在數值前加上<code>+=</code>來增加該值，或是用<code>-=</code>來減少該值，中間不能有空格：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">this</span>).animate(&#123;</span><br><span class="line">    marginLeft: <span class="string">&#x27;+=50&#x27;</span>, <span class="comment">// 注意裡面不能有空格</span></span><br><span class="line">    opacity: <span class="string">&#x27;-=.1&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>另外，還有其他三個字串屬性值<code>hide</code>、<code>show</code>、<code>toggle</code> 可用於動畫物件中：提供快速便捷可以隱藏、顯示或切換的功能。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#btn&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;#box&#x27;</span>).animate(&#123;</span><br><span class="line">    height: <span class="string">&#x27;toggle&#x27;</span>,</span><br><span class="line">    borderLeft: <span class="string">&#x27;toggle&#x27;</span>,</span><br><span class="line">    borderRight: <span class="string">&#x27;toggle&#x27;</span>,</span><br><span class="line">    paddingLeft: <span class="string">&#x27;toggle&#x27;</span>,</span><br><span class="line">    paddingRight: <span class="string">&#x27;toggle&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用 top、right、bottom、left 定位等位移屬性，<strong>必須確定 position 不能為 static</strong>，才會有作用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// position 不能為 static</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).animate(&#123;<span class="attr">left</span>: <span class="string">&#x27;500px&#x27;</span>&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p>隱藏的元素仍然會被動畫影響。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 潛行移動</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).fadeTo(<span class="number">1000</span>, <span class="number">0</span>).animate(&#123;<span class="attr">left</span>: <span class="string">&#x27;500px&#x27;</span>&#125;, <span class="number">1000</span>).fadeTo(<span class="number">1000</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>jQuery 的動畫預設都會被放進佇列等待，因此動畫會一個接著一個依序進行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 動畫佇列</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).fadeOut().show(<span class="number">300</span>).slideUp().slideToggle()</span><br></pre></td></tr></table></figure>

<h1 id="動畫語法"><a href="#動畫語法" class="headerlink" title="動畫語法"></a>動畫語法</h1><p>animate 動畫語法分為兩種，第一種是書本或教學常看到的四參數語法，第二種是<strong>雙物件</strong>語法。</p>
<div class="admonition note"><p>jQuery 內建動畫（fade、show、slide）全部可以用 animate() 來實現。</p>
</div>

<h2 id="四參數語法"><a href="#四參數語法" class="headerlink" title="四參數語法"></a>四參數語法</h2><p>教學範例時常看到的語法，可以設定樣式物件、持續時間、動畫速率、完成後的回呼函式。</p>
<blockquote>
<p>.animate( properties [, duration ] [, easing ] [, complete ] )</p>
</blockquote>
<table>
<thead>
<tr>
<th>參數名稱</th>
<th>資料類型</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>properties</td>
<td>PlainObject</td>
<td>json 物件格式，動畫要使用的 CSS 屬性</td>
</tr>
<tr>
<td>duration</td>
<td>Number or String</td>
<td>動畫將運行多長時間，預設 400，’fast’ 為 200，’slow’ 為 600</td>
</tr>
<tr>
<td>easing</td>
<td>String</td>
<td>預設字串’swing’，指示要用於過渡的緩動函數</td>
</tr>
<tr>
<td>complete</td>
<td>Function</td>
<td>動畫完成後要調用的函式</td>
</tr>
</tbody></table>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).animate(&#123;<span class="attr">width</span>: <span class="number">300</span>&#125;, <span class="number">1000</span>, <span class="string">&#x27;linear&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;動畫完成&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="雙物件語法"><a href="#雙物件語法" class="headerlink" title="雙物件語法"></a>雙物件語法</h2><p>強烈推薦使用雙物件語法，兩參數分別使用了 json 物件格式，此語法可以設定動畫所有功能，就問你要不要用。</p>
<blockquote>
<p>.animate( properties, options )</p>
</blockquote>
<h3 id="樣式設定（properties）"><a href="#樣式設定（properties）" class="headerlink" title="樣式設定（properties）"></a>樣式設定（properties）</h3><p>樣式設定（properties）即是 CSS 樣式物件，與語法一相同。</p>
<h3 id="選項設定（Options）"><a href="#選項設定（Options）" class="headerlink" title="選項設定（Options）"></a>選項設定（Options）</h3><p>選項設定（options）作為 animate 第二種語法的第二參數，它可以設定所有動畫的細節。</p>
<table>
<thead>
<tr>
<th>選項物件設定屬性</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>duration</td>
<td>預設 400，字串或數字，確定動畫將運行多長時間</td>
</tr>
<tr>
<td>easing</td>
<td>預設字串’swing’，指示要用於過渡的緩動函數，另一值為’linear’。</td>
</tr>
<tr>
<td>queue</td>
<td>預設:true，布林值或字符串，是否要將動畫放在佇列中，使用字串必須.dequeue(‘queuebame’)來啟動它</td>
</tr>
<tr>
<td>specialEasing</td>
<td>可指定不同屬性且具有不同速率</td>
</tr>
<tr>
<td>start</td>
<td>動畫開始時要調用的函式</td>
</tr>
<tr>
<td>step</td>
<td>動畫步進功能時要調用的函式</td>
</tr>
<tr>
<td>progress</td>
<td>動畫每個步驟之後要調用的函式</td>
</tr>
<tr>
<td>complete</td>
<td>動畫完成後要調用的函式</td>
</tr>
<tr>
<td>done</td>
<td>動畫完成(解析其 Promise 對象)時要調用的函式</td>
</tr>
<tr>
<td>fail</td>
<td>動畫失敗要調用的函式</td>
</tr>
<tr>
<td>always</td>
<td>動畫不管完成或失敗都會執行的函式</td>
</tr>
</tbody></table>
<h4 id="duration"><a href="#duration" class="headerlink" title="duration"></a>duration</h4><p>動畫運行持續時間，以毫秒為單位，預設 400，也可以用字串’fast’等於 200 或’slow’等於 600 或任何定義於 jQuery.fx.speeds 中的名稱來指定。</p>
<h4 id="easing"><a href="#easing" class="headerlink" title="easing"></a>easing</h4><p>easing 函式（緩動函式），jQuery 介於 0 與 1 之間的值來呼叫 easing 函式，jQuery 會基於這個回傳值來計算對應的 CSS 屬性值。兩個值之間的變化可以是非線性的，這種變化使得動畫看起來會加速與減速。預設的 easing 函式為正弦曲線函數（swing）：一開始進行緩慢，逐漸加速，之後再次慢下來直到最後值的動畫。另外還有<code>linear</code>的線性函式，也可以將自己的 easing 函式加入 jQuery.easing 物件中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.easing[<span class="string">&#x27;squareroot&#x27;</span>] = <span class="built_in">Math</span>.sqrt</span><br></pre></td></tr></table></figure>

<p>想增加 easing 速率函式嗎？可以使用以下其中一種：</p>
<ul>
<li><a href="https://jqueryui.com/easing/">jQuery UI 程式庫</a></li>
<li><a href="https://gsgd.co.uk/sandbox/jquery/easing/">the jQuery Easing Plugin</a></li>
</ul>
<p>你可以在<a href="https://easings.net/">此網站</a>參考各種速率的變化。</p>
<h4 id="specialEasing"><a href="#specialEasing" class="headerlink" title="specialEasing"></a>specialEasing</h4><p>一個 json 物件，可指定不同屬性且具有不同速率，允許為想要變動的不同 CSS 屬性指定不同的 easing 函式，也就是為每個屬性可以定義自己的 easing 函式，以下有兩個方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隱藏圖像，動畫 Easing 預設為 swing 函數，藉由 specialEasing 將 width、height 更改為 linear 函數</span></span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).animate(</span><br><span class="line">  &#123;</span><br><span class="line">    width: <span class="string">&#x27;hide&#x27;</span>,</span><br><span class="line">    height: <span class="string">&#x27;hide&#x27;</span>,</span><br><span class="line">    opacity: <span class="string">&#x27;hide&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    specialEasing: &#123;</span><br><span class="line">      width: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">      height: <span class="string">&#x27;linear&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外一種方式，在第一個物件引數傳入[目標值,easing函式]陣列。</span></span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).animate(&#123;</span><br><span class="line">  width: [<span class="string">&#x27;hide&#x27;</span>, <span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">  height: [<span class="string">&#x27;hide&#x27;</span>, <span class="string">&#x27;linear&#x27;</span>],</span><br><span class="line">  opacity: <span class="string">&#x27;hide&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><p>是否要將動畫放在佇列中，預設為 true，布林值或字符串，從 jQuery 1.7 開始，queue 選項還可以接受一個字符串，在這種情況下，動畫將添加到該字符串表示的隊列中。使用自定義隊列名稱時，動畫不會自動開始，必須.dequeue(‘queuename’)來啟動它。</p>
<p>queue 動畫佇列，具有先進先出的概念，先設定的動畫會被擺在第一個位置，再設定的動畫會被 push 進來，做完的第一個動畫會 shift()出去，後面排隊的會遞補到第一個再做，若又有新的動畫會再被 push()進來。queue 若設為 false，不會被排入佇列，沒在佇列中的動畫會先執行。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;.box&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, clickHandler)</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">this</span>)</span></span><br><span class="line">      .animate(</span><br><span class="line">        &#123;</span><br><span class="line">          top: 500,</span><br><span class="line">          left: 800,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          duration: 3000,</span><br><span class="line">          specialEasing: &#123;</span><br><span class="line"><span class="javascript">            top: <span class="string">&#x27;linear&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            left: <span class="string">&#x27;easeInOutBounce&#x27;</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">      .animate(</span><br><span class="line">        &#123;</span><br><span class="line">          top: 0,</span><br><span class="line">          left: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          duration: 3000,</span><br><span class="line">          specialEasing: &#123;</span><br><span class="line"><span class="javascript">            top: <span class="string">&#x27;easeInOutBounce&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            left: <span class="string">&#x27;linear&#x27;</span>,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log($(<span class="built_in">this</span>).queue())</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="step"><a href="#step" class="headerlink" title="step"></a>step</h4><p>每步動畫要執行的函式。啟用自定義動畫類型或改變正在執行的動畫，此功能是非常有用。它接受兩個參數（now 和 fx），this 是當前正在執行動畫的 DOM 元素集合。</p>
<ul>
<li>now: 每一步動畫屬性的數值</li>
<li>fx:jQuery.fx 原型對象的一個引用，其中包含了多項屬性，比如 elem 表示前正在執行動畫的元素，start 和 end 分別為動畫屬性的第一個和最後一個的值，prop 為進行中的動畫屬性。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).animate(</span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">200</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    duration: <span class="number">1000</span>,</span><br><span class="line">    step: <span class="function"><span class="keyword">function</span> (<span class="params">now, fx</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(now)</span><br><span class="line">      <span class="built_in">console</span>.log(fx)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h4><p>每一步動畫完成後調用的一個函數，無論動畫屬性有多少，每個動畫元素都只執行一次。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).animate(</span><br><span class="line">  &#123;<span class="attr">left</span>: <span class="number">100</span>, <span class="attr">top</span>: <span class="number">100</span>, <span class="attr">width</span>: <span class="number">200</span>, <span class="attr">height</span>: <span class="number">200</span>&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    duration: <span class="number">1000</span>,</span><br><span class="line">    progress: <span class="function"><span class="keyword">function</span> (<span class="params">promise, progress, lessTime</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(promise) <span class="comment">// promise 動畫元件</span></span><br><span class="line">      <span class="built_in">console</span>.log(progress) <span class="comment">// 動畫進度</span></span><br><span class="line">      <span class="built_in">console</span>.log(lessTime) <span class="comment">// 剩餘時間</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="start"><a href="#start" class="headerlink" title="start"></a>start</h4><p>動畫開始要執行的函式。</p>
<h4 id="complete"><a href="#complete" class="headerlink" title="complete"></a>complete</h4><p>動畫完成後要調用的函式。</p>
<h4 id="done"><a href="#done" class="headerlink" title="done"></a>done</h4><p>在動畫完成時執行的函數。(它的 Promise 對象狀態已完成)</p>
<h4 id="fail"><a href="#fail" class="headerlink" title="fail"></a>fail</h4><p>動畫失敗完成時執行的函數。(它的 Promise 對象狀態未完成)</p>
<h4 id="always"><a href="#always" class="headerlink" title="always"></a>always</h4><p>在動畫完成或未完成情況下停止時執行的函數。(它的 Promise 對象狀態已完成或未完成)</p>
<h1 id="內建動畫"><a href="#內建動畫" class="headerlink" title="內建動畫"></a>內建動畫</h1><p>jQuery 定義了三組效果方法用以「隱藏」或「顯示」元素：它們的持續時間以毫秒為單位，預設都為 400，並提供字串’fast’和’slow’，分別為 200 和 600 毫秒。</p>
<div class="admonition warning"><p>注意，這三組方法都「非必須」接受持續時間、回呼函式、選項物件引數。而且fadeOut()、hide()、slideUp()，最後都會將 css display 設定為 none。</p>
</div>

<h2 id="淡入-淡出"><a href="#淡入-淡出" class="headerlink" title="淡入/淡出"></a>淡入/淡出</h2><h3 id="fadeIn-、fadeOut"><a href="#fadeIn-、fadeOut" class="headerlink" title="fadeIn()、fadeOut()"></a>fadeIn()、fadeOut()</h3><p>淡入/淡出會動態的調整 CSS opacity 屬性來顯示或隱藏一個元素。值得注意的是<strong>fadeOut 若 opacity:0，最後元素會變成 display:none，隱藏起來不再引響頁面的佈局</strong>。</p>
<blockquote>
<p>.fadeIn( [duration ] [, complete ] )<br>.fadeIn( options )<br>.fadeIn( [duration ] [, easing ] [, complete ] )</p>
</blockquote>
<blockquote>
<p>.fadeOut( [duration ] [, complete ] )<br>.fadeOut( options )<br>.fadeOut( [duration ] [, easing ] [, complete ] )</p>
</blockquote>
<h3 id="fadeTo"><a href="#fadeTo" class="headerlink" title="fadeTo()"></a>fadeTo()</h3><p>與其他效果方法稍微不同：對 fadeTo() 而言，第一引數 duration 是必須的，第二引數目標 opacity 也是必須的，而 complete 則是非必須的第三引數。它預期一個 opacity 目標引數，動態從元素目前的 opacity 調整至目標值，<strong>注意的是 fadeTo 如果為 0 時，並不會讓元素 display:none，它就是 opacity:0</strong>。</p>
<blockquote>
<p>.fadeTo( duration, opacity [, complete ] )<br>.fadeTo( duration, opacity [, easing ] [, complete ] )</p>
</blockquote>
<h3 id="faceToggle"><a href="#faceToggle" class="headerlink" title="faceToggle()"></a>faceToggle()</h3><p>fadeToggle()方法執行匹配元素的不透明度動畫。當被可見元素調用時，元素不透明度一旦達到 0，display 樣式屬性設置為 none，所以元素不再影響頁面的佈局。</p>
<blockquote>
<p>.fadeToggle( [duration ] [, easing ] [, complete ] )<br>.fadeToggle( options )</p>
</blockquote>
<h2 id="顯示-隱藏"><a href="#顯示-隱藏" class="headerlink" title="顯示/隱藏"></a>顯示/隱藏</h2><h3 id="show-、hide"><a href="#show-、hide" class="headerlink" title="show()、hide()"></a>show()、hide()</h3><p>不帶引數呼叫時，show()與 hide()會即刻顯示或隱藏所選元素，hide()會把元素從版面配置上移除，將其 CSS 屬性 display:none。<br>以持續時間（或是選項物件）引數呼叫時，會呈現動態改變隱藏或顯示過程，會將元素的 width、height、opacity、margin、padding 慢慢降為 0，最後變成 display:none，show()則是設為 display:block。</p>
<blockquote>
<p>.show( [duration ] [, complete ] )<br>.show( options )</p>
</blockquote>
<blockquote>
<p>.hide( [duration ] [, complete ] )<br>.hide( options )</p>
</blockquote>
<div class="admonition warning"><p>請注意，如果沒有duration（持續時間）或指定的duration（持續時間）為 0，.hide()會立即觸發，並且將覆蓋動畫佇列。</p>
</div>

<h3 id="toggle"><a href="#toggle" class="headerlink" title="toggle()"></a>toggle()</h3><p>toggle()會切換狀態，若是隱藏就呼叫 show()，若是可見就呼叫 hide()。跟 show()與 hide()一樣，必須傳入持續時間或選項物件給 toggle()，可傳 true 給 toggle()等同於不帶引數呼叫 show()，傳 false 等同於不帶引數呼叫 hide()。</p>
<blockquote>
<p>.toggle( [duration ] [, complete ] )<br>.toggle( options )<br>.toggle( duration [, easing ] [, complete ] )<br>.toggle( boolean )</p>
</blockquote>
<h2 id="滑入-滑出"><a href="#滑入-滑出" class="headerlink" title="滑入/滑出"></a>滑入/滑出</h2><h3 id="slideDown-、slideUp"><a href="#slideDown-、slideUp" class="headerlink" title="slideDown()、slideUp()"></a>slideDown()、slideUp()</h3><p>slideUp()會透過動態地將它們的 CSS height 屬性調整為 0 來隱藏 jQuery 物件中的元素，最後將元素 CSS display 設為 none。slideDown()則反過來讓一個隱藏的元素變為可見。</p>
<blockquote>
<p>.slideDown( [duration ] [, complete ] )<br>.slideDown( options )<br>.slideDown( [duration ] [, easing ] [, complete ] )</p>
</blockquote>
<blockquote>
<p>.slideUp( [duration ] [, complete ] )<br>.slideUp( options )<br>.slideUp( [duration ] [, easing ] [, complete ] )</p>
</blockquote>
<h3 id="slideToggle"><a href="#slideToggle" class="headerlink" title="slideToggle()"></a>slideToggle()</h3><p>slideToggle()則會使用向上滑動（slide Up）或向下滑動（slide Down）的切換一個項目的高度進行動畫效果，height 為 0 時，display:none。</p>
<blockquote>
<p>.slideToggle( [duration ] [, complete ] )<br>.slideToggle( options )<br>.slideToggle( [duration ] [, easing ] [, complete ] )</p>
</blockquote>
<h1 id="停止或延緩動畫"><a href="#停止或延緩動畫" class="headerlink" title="停止或延緩動畫"></a>停止或延緩動畫</h1><h2 id="停止動畫-stop"><a href="#停止動畫-stop" class="headerlink" title="停止動畫 stop()"></a>停止動畫 stop()</h2><p>接受兩個額外的 boolean 引數。</p>
<blockquote>
<p>stop(clearQueue,jumpToEnd)<br>預設值 stop(false,false)</p>
</blockquote>
<p>第一引數，停止第一個動畫後，是否清除之後等待的動畫佇列。預設為 false，停止第一個動畫，不會取消動畫佇列。<br>第二引數，是否跳到停止第一個動畫的最後狀態，預設為 false，不會跳至第一個停止動畫結束狀態。</p>
<p>以下為四種狀態範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;.box&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, clickHandler)</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// false,false</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 停止第一個動畫，false 不清除之後佇列(第二個)，fasle 不跳至第一個動畫的最後狀態</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 最後效果為：left:100 之後再 top:200</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">this</span>).animate(&#123;<span class="attr">left</span>: <span class="number">1000</span>&#125;).animate(&#123;<span class="attr">left</span>: <span class="number">100</span>&#125;).stop(<span class="literal">false</span>, <span class="literal">false</span>).animate(&#123;<span class="attr">top</span>: <span class="number">200</span>&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// true,false</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 停止第一個動畫，true 清除之後佇列(第二個)，fasle 不跳至第一個動畫的最後狀態</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 最後效果為：直接移動 top:200</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">this</span>).animate(&#123;<span class="attr">left</span>: <span class="number">1000</span>&#125;).animate(&#123;<span class="attr">left</span>: <span class="number">100</span>&#125;).stop(<span class="literal">true</span>, <span class="literal">false</span>).animate(&#123;<span class="attr">top</span>: <span class="number">200</span>&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// false,true</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 停止第一個動畫，false 不清除之後佇列(第二個)，true 跳至第一個動畫的最後狀態</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 最後效果為：從第一個動畫最後狀態 left:1000 開始，接著移動 left:100，再移動 top:200</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">this</span>).animate(&#123;<span class="attr">left</span>: <span class="number">1000</span>&#125;).animate(&#123;<span class="attr">left</span>: <span class="number">100</span>&#125;).stop(<span class="literal">false</span>, <span class="literal">true</span>).animate(&#123;<span class="attr">top</span>: <span class="number">200</span>&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// true,true</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 停止第一個動畫，true 清除之後佇列(第二個)，true 跳至第一個動畫的最後狀態</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 最後效果為：從第一個動畫最後狀態 left:1000 開始，接著移動 top:200</span></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">this</span>).animate(&#123;<span class="attr">left</span>: <span class="number">1000</span>&#125;).animate(&#123;<span class="attr">left</span>: <span class="number">100</span>&#125;).stop(<span class="literal">true</span>, <span class="literal">true</span>).animate(&#123;<span class="attr">top</span>: <span class="number">200</span>&#125;)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="stop-應用-兩種事件寫法"><a href="#stop-應用-兩種事件寫法" class="headerlink" title="stop 應用 + 兩種事件寫法"></a>stop 應用 + 兩種事件寫法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 由於預設 stop(false,false)，滑鼠移入時會立刻停在當下動畫狀態，並在滑鼠移開時繼續變深</span></span><br><span class="line"><span class="comment">// 若都沒有 stop()，則滑鼠移入會先變淡至0.1，再變回 1</span></span><br><span class="line"><span class="comment">// 第一種用 on 並傳入一個選項物件</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).on(&#123;</span><br><span class="line">  mouseover: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">0.1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mouseout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二種用 hover()，使用兩個參數</span></span><br><span class="line"><span class="comment">// $(選擇器).hover(func1,func2)</span></span><br><span class="line">$(<span class="string">&#x27;img&#x27;</span>).hover(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">0.1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="延遲動畫-delay"><a href="#延遲動畫-delay" class="headerlink" title="延遲動畫 delay()"></a>延遲動畫 delay()</h2><p>加入一段時間延遲（timed delay）到動畫佇列：<br>第一個引數以毫秒為單位傳入一段持續時間數字（或持續時間字串），第二引數為非必須的下一個佇列名稱（queue name），<strong>通常不需要第二個引數</strong>。</p>
<blockquote>
<p>.delay( duration [, queueName ] )</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2秒淡出到0.1，然後等3秒，再向上滑動</span></span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).fadeTo(<span class="number">2000</span>, <span class="number">0.1</span>).delay(<span class="number">3000</span>).hide()</span><br></pre></td></tr></table></figure>

<p>使用 mouseover 與 mouseout 事件來變動圖像的不透明（opacity），在動畫前加入一段短暫的時間延遲來改善，滑鼠快速地移過一個圖像而不停下來，不會有令人分心的動畫出現。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;img&#x27;</span>).bind(&#123;</span><br><span class="line">  mouseover: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop(<span class="literal">true</span>).delay(<span class="number">100</span>).fadeTo(<span class="number">300</span>, <span class="number">0.1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mouseout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop(<span class="literal">true</span>).fadeTo(<span class="number">300</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第六章 - 選擇器與遍歷</title>
    <url>/2020/10/09/lesson-jq-06.traversing/</url>
    <content><![CDATA[<h1 id="選擇器（Selectors）"><a href="#選擇器（Selectors）" class="headerlink" title="選擇器（Selectors）"></a>選擇器（Selectors）</h1><p>jQuery 的選擇器以 CSS 為規範，以最快速、便捷的方式選擇到元素，是 jQuery 的強項之一，並且自訂了許多屬於自己的偽類過濾器來擴展選擇，不過，這些偽類並不是 CSS 的規範，不能被 querySelectorAll 所獲取，因此在 3.4 不推薦使用，改由相對應的方法進行篩選。</p>
<a id="more"></a>

<h2 id="基本選擇器"><a href="#基本選擇器" class="headerlink" title="基本選擇器"></a>基本選擇器</h2><p>CSS 基本選擇器：</p>
<table>
<thead>
<tr>
<th>選擇器</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>$(‘*‘)</td>
<td>全體選擇器</td>
</tr>
<tr>
<td>$(‘element’)</td>
<td>元素選擇器</td>
</tr>
<tr>
<td>$(‘.class’)</td>
<td>類別選擇器</td>
</tr>
<tr>
<td>$(‘#id’)</td>
<td>ID 選擇器</td>
</tr>
<tr>
<td>$(‘selector1,selector,selectorN’)</td>
<td>群組選擇器</td>
</tr>
<tr>
<td>$(‘parent &gt; child’)</td>
<td>子代選擇器</td>
</tr>
<tr>
<td>$(‘ancestor descendant’)</td>
<td>後代選擇器</td>
</tr>
<tr>
<td>$(‘prev + next’)</td>
<td>兄弟或相鄰選擇器</td>
</tr>
<tr>
<td>$(‘prev ~ siblings’)</td>
<td>同層全體選擇器</td>
</tr>
</tbody></table>
<h2 id="屬性選擇器"><a href="#屬性選擇器" class="headerlink" title="屬性選擇器"></a>屬性選擇器</h2><table>
<thead>
<tr>
<th>與屬性有關的選擇器</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>元素[name]</td>
<td>有 name 屬性的元素</td>
</tr>
<tr>
<td>元素[name = “value”]</td>
<td>name 屬性值為 value 的元素</td>
</tr>
<tr>
<td>元素[name ~= “value”]</td>
<td>有多個 name 屬性，且其中一個的值為 value 的元素</td>
</tr>
<tr>
<td>元素[name ^= “value”]</td>
<td>name 屬性值開頭為 value 的元素</td>
</tr>
<tr>
<td>元素[name = “value”]</td>
<td>name 屬性值為 value 的元素，或屬性值開頭為 value 的元素</td>
</tr>
<tr>
<td>元素[name *= “value”]</td>
<td>name 屬性值包含 value 的元素</td>
</tr>
<tr>
<td>元素[name $= “value”]</td>
<td>name 屬性值結尾為 value 的元素</td>
</tr>
<tr>
<td>元素[name != “value”]</td>
<td>name 屬性值不為 value 的元素</td>
</tr>
<tr>
<td>元素[name=”value”][name2=”value2”]</td>
<td>屬性值符合多項指定條件的元素</td>
</tr>
</tbody></table>
<h2 id="基本過濾器"><a href="#基本過濾器" class="headerlink" title="基本過濾器"></a>基本過濾器</h2><p>基本過濾器是為了擴展 jQuery 選擇 DOM 而自訂義的偽類，大部分都已經在 3.4 不建議使用，改由相對應的篩選方法來代替，可以在篩選找到它們，以下為尚未替代或是其他方式替代的偽類。</p>
<h3 id="gt-index"><a href="#gt-index" class="headerlink" title=":gt(index)"></a>:gt(index)</h3><p>選擇大於 index 的 jQuery 元素物件集合（一個或多個）。index 為負數則從最後面開始選擇。</p>
<blockquote>
<p>3.4 不推薦使用，可用 .slice() 代替，:gt(3) 等於 .slice(4)。</p>
</blockquote>
<h3 id="lt-index"><a href="#lt-index" class="headerlink" title=":lt(index)"></a>:lt(index)</h3><p>選擇小於 index 的 jQuery 元素物件集合（一個或多個）。index 為負數則從最後面開始選擇。</p>
<blockquote>
<p>3.4 不推薦使用，可用 .slice() 代替，:lt(3) 等於 .slice(0,3)。</p>
</blockquote>
<h3 id="root"><a href="#root" class="headerlink" title=":root"></a>:root</h3><p>選擇到文件的 html 元素。</p>
<h3 id="focus"><a href="#focus" class="headerlink" title=":focus"></a>:focus</h3><p>選擇目前聚焦的 jQuery 元素物件集合（一個或多個）。</p>
<h3 id="animated"><a href="#animated" class="headerlink" title=":animated"></a>:animated</h3><p>選擇套用動畫效果功能的 jQuery 元素物件集合（一個或多個）。如果這物件集合沒有任何 jQuery 動畫效果，會出現錯誤。</p>
<blockquote>
<p>3.4 不推薦使用</p>
</blockquote>
<h2 id="Child-過濾器"><a href="#Child-過濾器" class="headerlink" title="Child 過濾器"></a>Child 過濾器</h2><p>Child 過濾器指的是 CSS 的 child 或 type 這類的選擇器，它們符合 CSS 規範，可以使用沒問題。</p>
<table>
<thead>
<tr>
<th>選擇器</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>:first-child</td>
<td>只能選擇父元素的第一個子元素，等同於 nth-child(1)</td>
</tr>
<tr>
<td>:last-child</td>
<td>只能選擇父元素的最後一個子元素</td>
</tr>
<tr>
<td>:nth-child(n)</td>
<td>選擇父元素之下的第 n 個子元素</td>
</tr>
<tr>
<td>:first-of-type</td>
<td>元素的同種類元素之中第 1 個子元素</td>
</tr>
<tr>
<td>:last-of-type</td>
<td>元素的同種類元素之中最後 1 個子元素</td>
</tr>
<tr>
<td>:nth-of-type(n)</td>
<td>元素的同種類元素之中第 n 個子元素</td>
</tr>
<tr>
<td>:nth-last-child(n)</td>
<td>元素之下倒數第 n 個子元素</td>
</tr>
<tr>
<td>:nth-last-of-type(n)</td>
<td>元素的同種類元素之中，倒數第 n 個子元素</td>
</tr>
<tr>
<td>:only-child</td>
<td>元素之下僅有 1 個的子元素</td>
</tr>
<tr>
<td>:only-of-type</td>
<td>元素的同種類元素之中，僅有 1 個的子元素</td>
</tr>
</tbody></table>
<h2 id="Content-過濾器"><a href="#Content-過濾器" class="headerlink" title="Content 過濾器"></a>Content 過濾器</h2><table>
<thead>
<tr>
<th>選擇器</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>:contains(‘text’)</td>
<td>選取文字內容包含 text 字串的元素</td>
</tr>
<tr>
<td>:empty</td>
<td>選取無子元素沒有內容的元素，與:parent 相反</td>
</tr>
<tr>
<td>:parent</td>
<td>選取擁有子元素或文字內容的元素，與:empty 相反</td>
</tr>
</tbody></table>
<div class="admonition warning"><p>:parent 與 .parent()不一樣，不能搞混。</p>
</div>

<h2 id="Form-過濾器"><a href="#Form-過濾器" class="headerlink" title="Form 過濾器"></a>Form 過濾器</h2><table>
<thead>
<tr>
<th>選擇器</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>:text</td>
<td>type 屬性值為 text 的 input 元素 (單行文字)，使用[type=”input”]會有較佳的效能</td>
</tr>
<tr>
<td>:radio</td>
<td>type 屬性值為 radio 的 input 元素 (單選核取方塊)</td>
</tr>
<tr>
<td>:checkbox</td>
<td>type 屬性值為 checkbox 的 input 元素 (多選核取方塊)，使用$(‘[type=”checkbox”]’)會有較佳的效能</td>
</tr>
<tr>
<td>:password</td>
<td>type 屬性值為 password 的 input 元素 (密碼輸入) ，使用$(‘input:password’)會有較佳效能</td>
</tr>
<tr>
<td>:file</td>
<td>type 屬性值為 file 的 input 元素 (檔案選擇)</td>
</tr>
<tr>
<td>:image</td>
<td>type 屬性值為 image 的 input 元素 (圖片按鈕) ，使用[type=”image”]會有較佳的效能</td>
</tr>
<tr>
<td>:submit</td>
<td>type 屬性值為 submit 的 input 元素 (送出按鈕)，使用[type=”submit”]會有較佳的效能</td>
</tr>
<tr>
<td>:reset</td>
<td>type 屬性值為 reset 的 input 元素 (清除重填按鈕)</td>
</tr>
<tr>
<td>:input</td>
<td>input 元素、textarea 元素、select 元素、button 元素，使用.filter(“:input”)會有較佳效能</td>
</tr>
<tr>
<td>:hidden</td>
<td>type 屬性值為 hidden 的 input 元素 (隱藏欄位)</td>
</tr>
<tr>
<td>:button</td>
<td>選取 button 與 inpput 元素的 type 屬性值為 button</td>
</tr>
<tr>
<td>:checked</td>
<td>已核選的元素 (單選核取方塊或多選核取方塊)</td>
</tr>
<tr>
<td>:disabled</td>
<td>無法輸入停用的元素</td>
</tr>
<tr>
<td>:enabled</td>
<td>可輸入已起用的元素</td>
</tr>
<tr>
<td>:focus</td>
<td>選取目前聚焦的元件。$(document.activeElement) 會有較佳的效能</td>
</tr>
<tr>
<td>:selected</td>
<td>select 元素裡 option 元素中被選擇的項目，在.filter()中使用 CSS 樣式選擇器會有較佳的效能，.filter(“:selected”)</td>
</tr>
</tbody></table>
<h2 id="Visibility-過濾器"><a href="#Visibility-過濾器" class="headerlink" title="Visibility 過濾器"></a>Visibility 過濾器</h2><table>
<thead>
<tr>
<th>選擇器</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>:hidden</td>
<td>隱藏的元素</td>
</tr>
<tr>
<td>:visible</td>
<td>顯示的元素</td>
</tr>
</tbody></table>
<h1 id="遍歷（Traversing）"><a href="#遍歷（Traversing）" class="headerlink" title="遍歷（Traversing）"></a>遍歷（Traversing）</h1><p>jQuery 的優點，除了能快速抓取 DOM 元素，結合遍歷 DOM 去走訪 HTML 中的節點，讓 jQuery 在 DOM 控制上成為網站設計者的首選。一份文件的最外層的結界是 document，而不是 html，document 再往外找就沒有東西了，就如同離開了世界，進入渾沌一片虛無。</p>
<h2 id="Filtering-過濾方法"><a href="#Filtering-過濾方法" class="headerlink" title="Filtering 過濾方法"></a>Filtering 過濾方法</h2><p>過濾方法是用來替代 jQuery 自訂義的偽類，因此會在 jQuery 文件裡面被這些很相似的玩意兒干擾，這些自訂義的偽類不是 CSS 標準規範，因此無法被原生 JavaScript 的 querySelectorAll()方法獲取，因此在 jQuery 3.4 已經不推薦使用，如果要選擇到它們，必須使用 .filter()，例如：.filter(‘:eq’)來獲取 :eq 偽類。不過，既然有相對應的過濾方法，我們可以直接使用這些方法。</p>
<h3 id="eq-index"><a href="#eq-index" class="headerlink" title=".eq(index)"></a>.eq(index)</h3><p>選擇一個 jQuery 物件集合（一個或多個）時，可以使用 .eq(index) 選擇該對象的索引編號的元素，index 從 0 開始。<strong>index 是負數時為從最後面開始選擇</strong>。</p>
<ol>
<li>index 可為負值，變成倒過來數，-1 為選擇倒數第一個。</li>
<li>空字串””，可以選擇到第一個。</li>
<li>true 會轉換為 eq(1)，選擇到第二個。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).eq(<span class="number">0</span>) <span class="comment">// jQuery 物件</span></span><br><span class="line">$(<span class="string">&#x27;li&#x27;</span>)[<span class="number">0</span>] <span class="comment">// JavaScript 的原生 DOM</span></span><br><span class="line">$(<span class="string">&#x27;li&#x27;</span>).get(<span class="number">0</span>) <span class="comment">// JavaScript 的原生 DOM</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>與偽類 :eq 相同功能，3.4 不推薦使用</p>
</blockquote>
<h3 id="first"><a href="#first" class="headerlink" title=".first()"></a>.first()</h3><p>選擇一個 jQuery 物件集合（一個或多個）時，可以使用 .first() 找到它們的第一個元素。</p>
<blockquote>
<p>與偽類 :first 相同功能，3.4 不推薦使用</p>
</blockquote>
<div class="admonition info"><p>.first() 等同 .eq(0)</p>
</div>

<h3 id="last"><a href="#last" class="headerlink" title=".last()"></a>.last()</h3><p>選擇一個 jQuery 物件集合（一個或多個）時，可以使用 .last() 找到它們的最後一個元素。</p>
<blockquote>
<p>與偽類 :last 相同功能，3.4 不推薦使用</p>
</blockquote>
<div class="admonition info"><p>.last() 等同 .eq(-1)</p>
</div>

<h3 id="odd"><a href="#odd" class="headerlink" title=".odd()"></a>.odd()</h3><p>選擇一個 jQuery 物件集合（一個或多個）時，index 是<strong>奇數的元素</strong>。注意，index 是從 0 開始，這會與視覺相反，例如 index 1,3，在視覺上是 2,4。</p>
<blockquote>
<p>與偽類 :odd 相同功能，3.4 不推薦使用</p>
</blockquote>
<h3 id="even"><a href="#even" class="headerlink" title=".even()"></a>.even()</h3><p>選擇一個 jQuery 物件集合（一個或多個）時，index 是<strong>偶數的元素</strong>。注意，index 是從 0 開始，這會與視覺相反，例如 index 0,2，在視覺上是 1,3。</p>
<blockquote>
<p>與偽類 :even 相同功能，3.4 不推薦使用</p>
</blockquote>
<h3 id="not-selector"><a href="#not-selector" class="headerlink" title=".not(selector)"></a>.not(selector)</h3><p>選擇一個 jQuery 物件集合（一個或多個）時，篩選選擇不符合 .not() 該 selector 條件的對象，selector 為符合 CSS 選擇器規範的字串。</p>
<blockquote>
<p>:not(selector) 相同功能，雖然 CSS 選擇器也有 :not()，但仍推薦使用 .not(selector)</p>
</blockquote>
<h3 id="filter-selector"><a href="#filter-selector" class="headerlink" title=".filter(selector)"></a>.filter(selector)</h3><p>選擇一個 jQuery 物件集合（一個或多個）時，對該對象篩選出符合 filter 該條件的對象，selector 為符合 CSS 選擇器規範的字串。</p>
<ul>
<li>可使用函式：</li>
</ul>
<p>使用該方法的第二個形式是，通過函數而不是選擇器來篩選元素。對於每個元素，如果該函數返回 true，則元素會被包含在已篩選集合中；否則，會排除這個元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">  .filter(<span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="string">&#x27;strong&#x27;</span>, <span class="built_in">this</span>).length == <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .css(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="find-selector"><a href="#find-selector" class="headerlink" title=".find(selector)"></a>.find(selector)</h3><p>選擇一個 jQuery 物件集合（一個或多個）時，對該對象裡面搜尋指定對象的所有節點，包括子、孫、曾孫節點，selector 為符合 CSS 選擇器規範的字串，不能省略參數。<br>selector 可以一次找多個用逗號分開。</p>
<h3 id="has-selector"><a href="#has-selector" class="headerlink" title=".has(selector)"></a>.has(selector)</h3><p>選擇一個 jQuery 物件集合（一個或多個）後，在這個集合中擁有<strong>後代子孫元素</strong>符合 selector 的元素的才是要被選取到的元素。</p>
<blockquote>
<p>:has(selector) 相同功能，不推薦使用</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).has(<span class="string">&#x27;.active&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="is"><a href="#is" class="headerlink" title=".is()"></a>.is()</h3><p>與其它方法不同，.is()不會創建新的 jQuery 物件，.is()取一個<strong>CSS 選擇器字串或 jQuery 物件</strong>作為它的引數，測試選擇的 jQuery 物件的內容，並且回傳一個 Boolean，若是所選元素至少有一個元素符合指定選擇，它就會回傳 true。</p>
<blockquote>
<p>$(selector).is(selector or elements or jQuery Object)<br>$(selector).is(function(index,element){})</p>
</blockquote>
<ul>
<li>selector: 它是必需的參數，用於指定 CSS 選擇器，元素或 jQuery 物件以匹配當前的元素集。如果給定參數至少有一個匹配項，則返回 true；否則返回 false。</li>
<li>function(index, element): 它是一個可選參數，用於指定要為所選元素組運行的函數。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ($(<span class="built_in">this</span>).is(<span class="string">&#x27;:hidden&#x27;</span>)) <span class="keyword">return</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title=".slice()"></a>.slice()</h3><ul>
<li><p>.slice(start,end)<br>選擇一個 jQuery 物件集合（一個或多個）時，選擇 start 至 end 之前的節點（不包含 end）。</p>
</li>
<li><p>.slice(index)<br>選擇 index 開始之後的節點。</p>
</li>
</ul>
<h2 id="DOM-遍歷"><a href="#DOM-遍歷" class="headerlink" title="DOM 遍歷"></a>DOM 遍歷</h2><h3 id="兄弟（同層）"><a href="#兄弟（同層）" class="headerlink" title="兄弟（同層）"></a>兄弟（同層）</h3><p>prevAll()、nextAll()、prevUntil()、nextUntil() 裡面可以放 CSS 選擇器參數再做一次篩選。</p>
<h4 id="next"><a href="#next" class="headerlink" title=".next()"></a>.next()</h4><p>選擇與指定對象同層的後一個弟元素，如果有指定參數 CSS 選擇器，則只有在與這個 CSS 選擇器匹配且也為弟弟時，才會有效果。如同 JavaScript 的 .nextElementSibling。</p>
<blockquote>
<p>$(selector).next([selector])</p>
</blockquote>
<h4 id="nextAll"><a href="#nextAll" class="headerlink" title=".nextAll"></a>.nextAll</h4><p>選擇與指定對象同層的後面所有弟元素，如果有指定參數 CSS 選擇器，則只有在與這個 CSS 選擇器匹配且也為弟弟時，才會有效果。</p>
<blockquote>
<p>$(selector).nextAll([selector])</p>
</blockquote>
<h4 id="nextUntil"><a href="#nextUntil" class="headerlink" title=".nextUntil()"></a>.nextUntil()</h4><p>選擇與指定對象同層的後一個到 nextUntil(selector) 選擇器之間的弟元素，不包括指定對象本身。</p>
<h4 id="prev"><a href="#prev" class="headerlink" title=".prev()"></a>.prev()</h4><p>選擇與指定對象同層的前一個兄元素。如果有指定參數 CSS 選擇器，則只有在與這個 CSS 選擇器匹配且也為哥哥時，才會有效果。</p>
<blockquote>
<p>$(selector).prev([selector])</p>
</blockquote>
<h4 id="prevAll"><a href="#prevAll" class="headerlink" title=".prevAll()"></a>.prevAll()</h4><p>選擇與指定對象同層的前面所有兄元素，如果有指定參數 CSS 選擇器，則只有在與這個 CSS 選擇器匹配且也為哥哥時，才會有效果。</p>
<blockquote>
<p>$(selector).prevAll([selector])</p>
</blockquote>
<h4 id="prevUntil"><a href="#prevUntil" class="headerlink" title=".prevUntil()"></a>.prevUntil()</h4><p>選擇與指定對象同層的前一個到 prevUntil(selector) 選擇器之間的兄元素，不包括指定對象本身。</p>
<blockquote>
<p>$(selector).prevUntil( [selector ] [, filter ] )</p>
</blockquote>
<h4 id="siblings"><a href="#siblings" class="headerlink" title=".siblings()"></a>.siblings()</h4><p>選擇指定對象的其他兄弟節點，不包括指定對象。</p>
<blockquote>
<p>$(selector).siblings([selector])</p>
</blockquote>
<h3 id="父元素（上層）"><a href="#父元素（上層）" class="headerlink" title="父元素（上層）"></a>父元素（上層）</h3><h4 id="parent"><a href="#parent" class="headerlink" title=".parent()"></a>.parent()</h4><p>往上一層選擇指定對象的父元素，如同 JavaScript 的 .parentNode。</p>
<h4 id="parents"><a href="#parents" class="headerlink" title=".parents()"></a>.parents()</h4><p>選擇指定對象的祖先元素，parents() 往上查找，不會停止，找出所有符合條件的祖先們。</p>
<h4 id="parentsUntil"><a href="#parentsUntil" class="headerlink" title=".parentsUntil()"></a>.parentsUntil()</h4><p>選擇對象到 parentsUntil() 參數條件之間的祖先節點，直到那個目標為止之間的對象。</p>
<blockquote>
<p>$(selector).parentsUntil(selector)</p>
</blockquote>
<h4 id="closest"><a href="#closest" class="headerlink" title=".closest()"></a>.closest()</h4><p>根據 css 選擇器，返回第一個祖先節點，參數可指定第一個祖先節點是誰。closest() 往上查找，只要找到符合條件的就停止。</p>
<blockquote>
<p>$(selector).closest(selector)</p>
</blockquote>
<h4 id="offsetParent"><a href="#offsetParent" class="headerlink" title=".offsetParent()"></a>.offsetParent()</h4><p>返回第一個被定位的祖先對象，有設定 position 屬性 (static 除外)且最近的元素。</p>
<h3 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h3><h4 id="children"><a href="#children" class="headerlink" title=".children()"></a>.children()</h4><p>.children() 只會選取子元素，並且可以使用 selector 進行過濾。</p>
<blockquote>
<p>$(selector).children([selector])</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 選擇所有兒子</span></span><br><span class="line">$(<span class="string">&#x27;#menu&#x27;</span>).children().css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"><span class="comment">// 選擇有 .c 兒子</span></span><br><span class="line">$(<span class="string">&#x27;#menu&#x27;</span>).children(<span class="string">&#x27;.c&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="雜項遍歷"><a href="#雜項遍歷" class="headerlink" title="雜項遍歷"></a>雜項遍歷</h2><h3 id="add"><a href="#add" class="headerlink" title=".add()"></a>.add()</h3><p>指定該對象 jQuery 物件集合後，可再增加新的選擇對象，一起設定接下來的動作。</p>
<blockquote>
<p>$(selector).add(selector)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).add(<span class="string">&#x27;p&#x27;</span>).css(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>$(selector).add(html)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).add(<span class="string">&quot;&lt;p id=&#x27;new&#x27;&gt;new paragraph&lt;/p&gt;&quot;</span>).css(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>$(selector).add(selection)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;li&#x27;</span>).add(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>)).css(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;li&#x27;</span>).add($(<span class="string">&#x27;p&#x27;</span>)).css(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;red&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="addBack"><a href="#addBack" class="headerlink" title=".addBack()"></a>.addBack()</h3><p>指定該對象 jQuery 物件集合後，若遇到排除該選擇對象的方法，例如 nexAll()，它不會選擇到自己，該方法會選擇到自己之後的目標，此時可以使用 addBack() 再把自己加回去，一起建立一個 jQuery 物件。<br>.addBack() 是用來代替 .andSelf()，.andSelf() 在 3.0 後已經移除。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#week li.selected&#x27;</span>).nextAll().addBack()</span><br></pre></td></tr></table></figure>

<h3 id="contents"><a href="#contents" class="headerlink" title=".contents()"></a>.contents()</h3><p>指定該對象 jQuery 物件集合後，<strong>獲取裡面所有的子元素</strong>並存入 jQuery 物件陣列，包含 text 與 comment nodes。</p>
<h3 id="end"><a href="#end" class="headerlink" title=".end()"></a>.end()</h3><p>當 jQuery 對象物件因為操作而被改變目標後，可利用 end()結束目前處理並回傳上一次所選的 jQuery 物件。</p>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第五章 - 事件處理</title>
    <url>/2020/10/07/lesson-jq-05.events/</url>
    <content><![CDATA[<h1 id="事件處理"><a href="#事件處理" class="headerlink" title="事件處理"></a>事件處理</h1><p>事件處理是網頁互動行為很重要的核心，通常當一個事件發生時，會去呼叫一個事件處理程序（event handler）的回呼函式，也就是事件發生時要做的事情。jQuery 對事件有許多特別的貼心設定。</p>
<a id="more"></a>

<h1 id="事件觸發"><a href="#事件觸發" class="headerlink" title="事件觸發"></a>事件觸發</h1><p>要觸發一個事件要有三個步驟，第一個是<code>指定選取對象</code>、第二個是<code>指派事件</code>、第三個是<code>傳遞一個函式</code>，在語意上是<strong>誰、在甚麼時候、做了甚麼事情</strong>，事件觸發有下列兩種方式。</p>
<h2 id="一、使用事件名稱直接觸發"><a href="#一、使用事件名稱直接觸發" class="headerlink" title="一、使用事件名稱直接觸發"></a>一、使用事件名稱直接觸發</h2><p>此方法為便捷方式，是方法二的捷徑，但只能夠用在 DOM 元素已經存在時有作用，在網頁讀取完畢時，若 DOM 元素還不存在，也就是後來產生的 DOM 元素，無法使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myElement&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert($(<span class="built_in">this</span>).text())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>不帶參數直接呼叫事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;button&#x27;</span>).click()</span><br></pre></td></tr></table></figure>

<h2 id="二、使用-on-方法觸發"><a href="#二、使用-on-方法觸發" class="headerlink" title="二、使用 on()方法觸發"></a>二、使用 on()方法觸發</h2><p>建議使用這種方式，on 方法提供了事件處理程序所有功能，而且語意上與 JavaScript 的 addEventListener() 相似，其實，on 是以 addEventListener 實作，且第三個參數是 false，也就是 jQuery 事件是以「事件冒泡」來實作，而不是「事件捕獲」，這很符合 JavaScript addEventListener 第三參數 useCapture 的預設 false。該方法又分為「直接綁定」與「委派綁定」。</p>
<blockquote>
<p>.on(events [, selector ] [, data ], handler)</p>
</blockquote>
<ul>
<li>events 可以多個事件，空格分隔事件名稱。</li>
<li>指定 css selector 為委派綁定，參考下方。</li>
<li>指定 data（可以任何資料類型），當事件發生時將通過 event.data 傳遞。</li>
</ul>
<div class="admonition warning"><p>請忘記 bind() 與 live()，on() 都可以做到。</p>
</div>

<h3 id="直接綁定"><a href="#直接綁定" class="headerlink" title="直接綁定"></a>直接綁定</h3><p>當 selector 省略或是 null，事件處理程序稱為直接綁定，會發生在選定的元素上，也就是呼叫該事件的元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#myElement&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert($(<span class="built_in">this</span>).text())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="委派綁定"><a href="#委派綁定" class="headerlink" title="委派綁定"></a>委派綁定</h3><p>又稱為事件委派(delegation)，當提供 selector 參數時，事件處理程序稱為委派綁定。<strong>事件不被綁定元素所使用，而只對綁定元素的後代 selector 使用</strong>，委派事件綁定的優勢在於<strong>可以處理來自後代元素的事件，也就是程式後來產生的後代 DOM 元素</strong>。</p>
<pre><code>委託事件處理程序不適用於SVG。</code></pre>
<h3 id="多事件觸發"><a href="#多事件觸發" class="headerlink" title="多事件觸發"></a>多事件觸發</h3><p>on 可以使用多種事件觸發，以下 click，keypress 都會觸發不具名函式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;click keypress&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;#lightBox&#x27;</span>).hide()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h1><p>可以使用 off() 來移除事件，要移除元素的所有事件，不要傳任何參數給 off()函式，這是殺傷力很強的方式，大部分情況下不會移除元素所有的事件處理程序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;input[type=&quot;submit&quot;]&#x27;</span>).off()</span><br></pre></td></tr></table></figure>

<p>也可以指定移除的事件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="built_in">this</span>).off(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>named space 命名空間移除特定目標的事件，可以為事件命名一個名字，這樣移除時可以指定該名稱。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).on(<span class="string">&#x27;click.main&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;click1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).on(<span class="string">&#x27;click.sub&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;click2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除 sub</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#box&#x27;</span>).off(<span class="string">&#x27;click.sub&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="事件類型"><a href="#事件類型" class="headerlink" title="事件類型"></a>事件類型</h1><table>
<thead>
<tr>
<th>分類</th>
<th>事件名稱</th>
</tr>
</thead>
<tbody><tr>
<td>鍵　　　盤</td>
<td>keydown,keyup,keypress</td>
</tr>
<tr>
<td>滑　　　鼠</td>
<td>click,dblclick,hover,mousedown,mouseenter,mouseleave,mouseup,,mousemove,mouseout,mouseover,toggle</td>
</tr>
<tr>
<td>表　　　單</td>
<td>blur,change,focus,focusin,focusout,select,submit,reset</td>
</tr>
<tr>
<td>瀏　覽　器</td>
<td>error,resize,scroll</td>
</tr>
<tr>
<td>文　　　件</td>
<td>load,unload,ready</td>
</tr>
</tbody></table>
<h2 id="載入事件"><a href="#載入事件" class="headerlink" title="載入事件"></a>載入事件</h2><table>
<thead>
<tr>
<th>名稱</th>
<th>常用</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>.ready()</td>
<td></td>
<td>DOM 載入完成後（不等待其他資源載入），ready 就觸發</td>
</tr>
</tbody></table>
<h2 id="瀏覽器事件（Browser-Events）"><a href="#瀏覽器事件（Browser-Events）" class="headerlink" title="瀏覽器事件（Browser Events）"></a>瀏覽器事件（Browser Events）</h2><table>
<thead>
<tr>
<th>與瀏覽器事件有關的設定</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>.resize()</td>
<td>設定瀏覽器視窗大小改變時執行的處理</td>
</tr>
<tr>
<td>.scroll()</td>
<td>設定瀏覽器視窗被捲動時執行的處理</td>
</tr>
</tbody></table>
<h2 id="滑鼠事件（Mouse-Events）"><a href="#滑鼠事件（Mouse-Events）" class="headerlink" title="滑鼠事件（Mouse Events）"></a>滑鼠事件（Mouse Events）</h2><table>
<thead>
<tr>
<th>與滑鼠動作有關的設定</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>.click()</td>
<td>設定元素被點擊時執行的處理</td>
</tr>
<tr>
<td>.dblclick()</td>
<td>設定元素被滑鼠雙擊時執行的處理</td>
</tr>
<tr>
<td>.hover()</td>
<td>設定元素移入、移出時執行的處理</td>
</tr>
<tr>
<td>.mouseover()</td>
<td>設定滑鼠停在元素上時執行的處理</td>
</tr>
<tr>
<td>.mouseout()</td>
<td>設定滑鼠移出元素上時執行的處理</td>
</tr>
<tr>
<td>.mouseenter()</td>
<td>設定滑鼠停在元素上時執行的處理 (包含範圍內的子元素)</td>
</tr>
<tr>
<td>.mouseleave()</td>
<td>設定滑鼠移出元素上時執行的處理 (包含範圍內的子元素)</td>
</tr>
<tr>
<td>.mousedown()</td>
<td>設定元素被按下時執行的處理</td>
</tr>
<tr>
<td>.mousemove()</td>
<td>設定滑鼠在元素上方移動時執行的處理</td>
</tr>
<tr>
<td>.mouseup()</td>
<td>設定滑鼠離開元素上方時執行的處理</td>
</tr>
</tbody></table>
<p>##　表單事件（Form Events）</p>
<table>
<thead>
<tr>
<th>與表單事件有關的設定。</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>.change()</td>
<td>當表單元素內容改變時執行的處理</td>
</tr>
<tr>
<td>.focus()</td>
<td>當表單元素取得焦點時執行的處理</td>
</tr>
<tr>
<td>.focusin()</td>
<td>當表單元素取得焦點時執行的處理 (包含子元素)</td>
</tr>
<tr>
<td>.blur()</td>
<td>當焦點離開表單元素時執行的處理</td>
</tr>
<tr>
<td>.focusout()</td>
<td>當焦點離開表單元素時執行的處理 (包含子元素)</td>
</tr>
<tr>
<td>.select()</td>
<td>表單元素的值被選取時執行的處理</td>
</tr>
<tr>
<td>.submit()</td>
<td>送出表單資料時執行的處理</td>
</tr>
</tbody></table>
<h2 id="鍵盤事件（Keyboard-Events）"><a href="#鍵盤事件（Keyboard-Events）" class="headerlink" title="鍵盤事件（Keyboard Events）"></a>鍵盤事件（Keyboard Events）</h2><table>
<thead>
<tr>
<th>與鍵盤輸入有關的設定</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>.keydown()</td>
<td>按下鍵盤按鈕時執行的處理</td>
</tr>
<tr>
<td>.keypress()</td>
<td>鍵盤輸入時執行的處理</td>
</tr>
<tr>
<td>.keyup()</td>
<td>放開鍵盤按鈕時執行的處理</td>
</tr>
</tbody></table>
<h1 id="事件應用"><a href="#事件應用" class="headerlink" title="事件應用"></a>事件應用</h1><h2 id="hover-事件"><a href="#hover-事件" class="headerlink" title="hover 事件"></a>hover 事件</h2><p>hover 是常使用的滑鼠事件，它是由 mouseenter 與 mouseleave 來實作，可由 e.type 確認，它可以傳入兩個匿名函式分別給 mouseenter 與 mouseleave 使用。如果只傳入一個引數給 hover()，那個函式會同時被用作 mouseenter 與 mouseleave 事件的處理器。</p>
<blockquote>
<p>.hover(handlerIn, handlerOut)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;a&#x27;</span>).hover(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.type)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.type)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>兩種滑鼠移入、移出的操作，<strong>第一種說明了 on 也可以物件實字來操作多種事件</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一種用 on 並傳入一個選項物件</span></span><br><span class="line">$(<span class="string">&#x27;img&#x27;</span>).on(&#123;</span><br><span class="line">  mouseover: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">0.1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mouseout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二種用 hover()，使用兩個參數</span></span><br><span class="line">$(<span class="string">&#x27;img&#x27;</span>).hover(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">0.1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).stop().fadeTo(<span class="number">3000</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="事件物件"><a href="#事件物件" class="headerlink" title="事件物件"></a>事件物件</h1><p>事件物件（event object），當一個或多集合 jQuery 物件觸發事件時，會記錄著該物件包含與該次事件有關的資訊屬性與方法，被稱為事件物件（<a href="https://api.jquery.com/category/events/event-object/">Event Object</a>），它會被帶入第一參數，通常以<code>e</code>作為參數名稱。事件物件主要基於 W3C 的標準，也結合了業界的事件標準，jQuery 從原生的 JavaScript Event 物件中複製了常用屬性到每個 jQuery Event 物件中，因此屬性、方法名稱一樣，<strong>但對某些特定事件類型來說，其中部分屬性的值會是 undefined</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e) <span class="comment">// 事件物件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="e-target"><a href="#e-target" class="headerlink" title="e.target"></a>e.target</h2><p>event.target 屬性即實際被點擊的元素，可以記為最深處的目標，儲存著發生事件的目標元素，透過這個屬性可以確定 DOM 中首先接收到事件的元素。而且，this 引用的是處理事件的 DOM 元素，藉由 event.target 與 this 比對，可以做出以下的判斷。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#switcher&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.target == <span class="built_in">this</span>) &#123;</span><br><span class="line">    $(<span class="string">&#x27;#switcher&#x27;</span>.button).toggleClass(<span class="string">&#x27;hidden&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>或者是當 event.target 是 a 時忽略。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ($(event.target).is(<span class="string">&#x27;a&#x27;</span>)) <span class="keyword">return</span> <span class="comment">// 忽略發生於連結上的事件</span></span><br></pre></td></tr></table></figure>

<h2 id="e-currentTarget"><a href="#e-currentTarget" class="headerlink" title="e.currentTarget"></a>e.currentTarget</h2><p>currentTarget 屬性指出哪個元素註冊了事件，<code>永遠與 this 相同</code>。如果 target 與 currentTarget 不同，表示所處理的事件就是自其發生處產生氣泡上浮後的事件，可以透過 is()方法來測試 target 元素。</p>
<h2 id="e-clientX、e-clientY"><a href="#e-clientX、e-clientY" class="headerlink" title="e.clientX、e.clientY"></a>e.clientX、e.clientY</h2><p>事件觸發時，返回滑鼠相對瀏覽器可視區域左上角的偏移量，<strong>固定不隨頁面而改變</strong>，可視區域不包括工具欄和滾動條。兼容性：所有瀏覽器均支持。</p>
<h2 id="e-pageX、e-pageY"><a href="#e-pageX、e-pageY" class="headerlink" title="e.pageX、e.pageY"></a>e.pageX、e.pageY</h2><p>事件觸發時，滑鼠游標到 document 文件左上角的偏移量，<strong>會隨著頁面卷軸滾動而改變</strong>，這 2 個屬性雖不是標準屬性，但得到了廣泛支持，除了 IE6/7/8。</p>
<h2 id="e-offsetX、e-offsetY"><a href="#e-offsetX、e-offsetY" class="headerlink" title="e.offsetX、e.offsetY"></a>e.offsetX、e.offsetY</h2><p>事件觸發時，滑鼠游標<strong>相對父元素左上角的偏移量</strong>，左上角的基準點在不同瀏覽器各有不同，IE 以內容區左上角為基準點不包括邊框。Chrome 以邊框左上角為基準點。</p>
<h2 id="e-screenX、e-screenY"><a href="#e-screenX、e-screenY" class="headerlink" title="e.screenX、e.screenY"></a>e.screenX、e.screenY</h2><p>事件觸發時，滑鼠游標相對於螢幕顯示器螢幕左上角的 X,Y 坐標。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;e.clientX&#x27;</span>, e.clientX, <span class="string">&#x27;e.clientY&#x27;</span>, e.clientY)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;e.pageX&#x27;</span>, e.pageX, <span class="string">&#x27;e.pageY&#x27;</span>, e.pageY)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;e.offsetX&#x27;</span>, e.offsetX, <span class="string">&#x27;e.offsetY&#x27;</span>, e.offsetY)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;e.screenX&#x27;</span>, e.screenX, <span class="string">&#x27;e.screenY&#x27;</span>, e.screenY)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="e-preventDefault"><a href="#e-preventDefault" class="headerlink" title="e.preventDefault()"></a>e.preventDefault()</h2><p>阻止瀏覽器事件預設回應的函式，此函式是事件物件的一部分，可以在事件處理函式內存取。若網頁有個連結，點擊連結時通常瀏覽器會連結到該網址，如果要阻止它的預設行為。當在事件的環境中完成了某些作用，例如頁面滾動到錨點 id 的位置，通常會用到 e.preventDefault()。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;a&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault() <span class="comment">// 連結無作用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>也可以寫成以下這樣：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#menu&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">//事件不會發生</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="event-stopPropagation"><a href="#event-stopPropagation" class="headerlink" title="event.stopPropagation()"></a>event.stopPropagation()</h2><p>阻止事件冒泡，event.stopPropagation() 可以阻止 click 事件冒泡到父元素，透過呼叫 event.stopPropagation() 就可以避免其他所有 DOM 元素回應這個事件。點擊按鈕的事件會被按鈕處理，而且只會被按鈕處理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#theLink&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.stopPropagation()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="鍵盤事件的事件物件屬性"><a href="#鍵盤事件的事件物件屬性" class="headerlink" title="鍵盤事件的事件物件屬性"></a>鍵盤事件的事件物件屬性</h2><table>
<thead>
<tr>
<th>鍵盤事件</th>
<th>解說</th>
</tr>
</thead>
<tbody><tr>
<td>keyCode</td>
<td>當 keypress 事件時，返回 character code；當 keydown 或 keyup 事件時，返回 key code</td>
</tr>
<tr>
<td>which</td>
<td>當按下滑鼠按鍵，取得是哪個按鍵，值同 keyCode</td>
</tr>
<tr>
<td>charCode</td>
<td>當 keypress 事件時，返回 character code</td>
</tr>
<tr>
<td>altKey</td>
<td>布林值 (boolean)，用來判斷使用者是否有按 alt 鍵</td>
</tr>
<tr>
<td>ctrlKey</td>
<td>布林值 (boolean)，用來判斷使用者是否有按 ctrl 鍵</td>
</tr>
<tr>
<td>shiftKey</td>
<td>若事件發生時 shift 按著則為 true;</td>
</tr>
<tr>
<td>metaKey</td>
<td>布林值 (boolean)，用來判斷使用者是否有按 meta 鍵</td>
</tr>
</tbody></table>
<ul>
<li><p>metaKey<br>若是原生的事件物件沒有 metaKey 屬性，jQuery 會將此設為與 ctrlKey 屬性相同的值。MacOS 中會是 Command 鍵設定 metaKey 屬性。</p>
</li>
<li><p>which</p>
<p>jQuery 正規化（normalize）這個非標準事件屬性，指出在事件中按下了哪個滑鼠鍵或鍵盤按鍵。<br>對鍵盤事件來說，若是原生的事件沒有定義 which，但定義了 charCode 或 keyCode，which 會被設為這些屬性所定義的值。<br>對滑鼠事件來說，若是 which 無定義，但 button 屬性有定義，which 會依據 button 的值來設定。</p>
<p>0 代表沒有按下任何滑鼠按鍵。<br>1 代表按下左鍵。<br>2 代表按下中鍵。<br>3 代表按下右鍵。（某些瀏覽器不會為右鍵點擊產生滑鼠事件）</p>
</li>
</ul>
<p><a href="https://www.fooish.com/posts/ascii-code-table.html">ASCII character 對照表</a><br><a href="https://www.fooish.com/javascript/dom/keyboard-event-key-codes.html">Key codes 對照表</a></p>
<h2 id="其他事件物件屬性"><a href="#其他事件物件屬性" class="headerlink" title="其他事件物件屬性"></a>其他事件物件屬性</h2><table>
<thead>
<tr>
<th>常用</th>
<th>解說</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td>返回事件類型，例如 “click”</td>
</tr>
<tr>
<td>timeStamp</td>
<td>事件發生時的時間 timestamp (單位是 milliseconds 毫秒)</td>
</tr>
<tr>
<td>eventPhase</td>
<td>返回為一個數字，表示事件處於目前所處的傳播狀態 (event flow)</td>
</tr>
<tr>
<td></td>
<td>有這些值：0: None，1: capturing phase。2: target phase，3: bubbling phase</td>
</tr>
<tr>
<td>data</td>
<td>用於 on()函式傳遞資料給事件處理函式的 jQuery 物件。</td>
</tr>
</tbody></table>
<ul>
<li>timeStamp<br>事件發生的時間點，格式為 Date.getTime()方法所回傳那樣，單位式毫秒。jQuery 會自行設定這個屬性，以避開 FireFox 一個存在已久的臭蟲。</li>
</ul>
<h1 id="事件旅行"><a href="#事件旅行" class="headerlink" title="事件旅行"></a>事件旅行</h1><p>事件旅行指的是事件傳遞的順序，分為「事件捕獲」、「事件冒泡」兩種，也就是 HTML 層級間若有事件存在，那麼點擊某一個元素，會依據這兩種其中一種方式來傳遞事件。而在 jQuery 裡面， 已經將 addEventListener 的第三參數設定為 false，也就是「事件冒泡」，所以事件傳遞會由內而外。</p>
<h2 id="事件捕獲（event-capturing）"><a href="#事件捕獲（event-capturing）" class="headerlink" title="事件捕獲（event capturing）"></a>事件捕獲（event capturing）</h2><p>事件傳遞會由外而內，addEventListener 第三參數為 true。</p>
<h2 id="事件冒泡（event-bubbling）"><a href="#事件冒泡（event-bubbling）" class="headerlink" title="事件冒泡（event bubbling）"></a>事件冒泡（event bubbling）</h2><p>事件傳遞會由內而外，addEventListener 第三參數為 false。</p>
<h2 id="事件冒泡範例"><a href="#事件冒泡範例" class="headerlink" title="事件冒泡範例"></a>事件冒泡範例</h2><p>點擊「我是最裡面」，傳遞會由 a &gt; inner &gt; outer &gt; document。a 設定 e.preventDefault()因此連結會無效，若再設定 e.stopPropagation() 可以阻止事件冒泡傳遞，就不會觸發其他事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  html,</span><br><span class="line">  body &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  body &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#777</span>;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  a &#123;</span><br><span class="line">    width: 50%;</span><br><span class="line">    height: 50%;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.example.com&quot;</span>&gt;</span>我是最裡面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;document&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.outer&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;outer&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.inner&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;inner&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;a&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    e.preventDefault() <span class="comment">// 連結預設無效</span></span></span><br><span class="line"><span class="javascript">    e.stopPropagation() <span class="comment">// 阻止事件冒泡傳遞</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第四章 - 元素的位置與大小</title>
    <url>/2020/10/07/lesson-jq-04.geometry/</url>
    <content><![CDATA[<h1 id="寬度與高度"><a href="#寬度與高度" class="headerlink" title="寬度與高度"></a>寬度與高度</h1><p>有三種設置及查詢元素的寬度（width）、高度（height）的方式。</p>
<img data-src="/images/jquery/jq-04-dimensions.gif">

<h2 id="width-與-height"><a href="#width-與-height" class="headerlink" title="width() 與 height()"></a>width() 與 height()</h2><p>width()與 height()方法回傳元素的寬度與高度，在 jQuery 指的是內容區域的寬度與高度，因此不包括內距（padding）、邊框（border）。若設定 box-sizing:border-box，width()、height()取值會被影響，但依舊指的是內容區域，此時 CSS 設定的 width 值扣掉 padding、border 才是 width()、height()真正的值。</p>
<p>width(value) 與 height(value) value 可以設定 <code>數字</code>、<code>px</code>、<code>%</code>、<code>auto</code>。如果傳入的是數字（未設定任何單位），視為預設以像素為單位的尺寸大小，如果傳入的是字串值，會被用作 CSS width 或 height 屬性的值，因此可以套用任何 CSS 單位，但不能設定 Window 或 Document 物件的寬度或高度。</p>
<a id="more"></a>

<div class="admonition warning"><p>css('width') 與 width() 在 box-sizing:content-box，兩者取的值一樣，差別在於css('width')是有數字的字串'px'，width()只有數字。不過，在設定 box-sizing:border-box 時，css('width')依舊是直接取得css設定的 width 值，而 width() 則必須要扣除掉 padding、border，jQuery 的 width() 指的是取得內容區域的寬高。</p>
</div>

<h2 id="innerWidth-與-innerHeight"><a href="#innerWidth-與-innerHeight" class="headerlink" title="innerWidth() 與 innerHeight()"></a>innerWidth() 與 innerHeight()</h2><p>innerWidth() 與 innerHeight() 回傳元素的寬度或高度（內容區域的寬高）加上它內距（padding），但不包括邊框（border）。</p>
<div class="admonition info"><p>與 JavaScript 的 clientWidth、clientHeight 屬性一樣。</p>
</div>

<h2 id="outerWidth-與-outerHeight"><a href="#outerWidth-與-outerHeight" class="headerlink" title="outerWidth() 與 outerHeight()"></a>outerWidth() 與 outerHeight()</h2><p>outerWidth() 與 outerHeight() 通常回傳元素的寬度或高度，加上其內距（padding）、邊框（border），但若傳入 true 值給上面任何一個方法，它們也會將該元素外距（margin）的大小計算在內。例如 outerWidth(true)，預設是 false。</p>
<div class="admonition info"><p>與 JavaScript 的 offsetWidth、offsetHeight 屬性一樣。</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;innerWidth&#x27;</span>, $(<span class="built_in">this</span>).innerWidth(), <span class="string">&#x27;clientWidth&#x27;</span>, <span class="built_in">this</span>.clientWidth)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;outerWidth&#x27;</span>, $(<span class="built_in">this</span>).outerWidth(), <span class="string">&#x27;offsetWidth&#x27;</span>, <span class="built_in">this</span>.offsetWidth)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="捲軸的偏移量"><a href="#捲軸的偏移量" class="headerlink" title="捲軸的偏移量"></a>捲軸的偏移量</h1><h2 id="scrollTop-與-scrollLeft"><a href="#scrollTop-與-scrollLeft" class="headerlink" title="scrollTop() 與 scrollLeft()"></a>scrollTop() 與 scrollLeft()</h2><p>可查詢元素在捲動軸（scrollbar）的偏移量，或設定元素在捲動軸的偏移量（px）。可用於 Window 物件，也可用於文件元素，而在 document 上呼叫時，它會設定內含該文件的 window 的捲動軸位置，與 window 相同，兩者都可以取得整個文件的捲動值。如果用在$(‘div’)等區塊元素，則可取得內嵌捲動框的捲動值。有別於其他 setters，不能傳入一個函式給 scrollTop()或 scrollLeft()。scrollTop()為垂直偏移量，scrollLeft()為水平偏移量。如果滾動條位於最頂部，或者元素不可滾動，則此數字為 0。</p>
<p>scrollTop()是以 viewport 最頂端為一條基準線，捲軸往下拉動 100px，則表示內容往上移動 100px。相同的概念可以應用到 JavaScript 的 pageYOffset（scrollY）。</p>
<blockquote>
<p>.scrollTop()<br>.scrollTop(value)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">&#x27;scroll&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log($(<span class="built_in">window</span>).scrollTop())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<div class="admonition info"><p>scrollTop() 與 scrollLeft() 是用 JavaScript 的 pageXOffset、pageYOffset 實作，pageXOffset、pageYOffst是 scrollX、scrollY 的別名，在跨瀏覽器兼容，應該使用pageXOffset、pageYOffst。</p>
</div>

<h3 id="捲軸捲到某位置出現"><a href="#捲軸捲到某位置出現" class="headerlink" title="捲軸捲到某位置出現"></a>捲軸捲到某位置出現</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 移動到頁尾卷軸需要的距離 = 頁尾到頂部的距離 - 視窗的高度(一開始的高度卷軸不需要移動)</span></span><br><span class="line"><span class="keyword">let</span> endZone = $(<span class="string">&#x27;#footer&#x27;</span>).offset().top - $window.height()</span><br><span class="line">$(<span class="built_in">window</span>).on(<span class="string">&#x27;scroll&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 移動到頁尾卷軸需要的距離 小於 當前捲軸移動的距離</span></span><br><span class="line">  <span class="keyword">if</span> (endZone &lt; $window.scrollTop()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`endZone:<span class="subst">$&#123;endZone&#125;</span>`</span>)</span><br><span class="line">    $(<span class="string">&#x27;#ad&#x27;</span>).animate(&#123;<span class="attr">right</span>: <span class="string">&#x27;0&#x27;</span>&#125;, <span class="number">250</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">&#x27;#ad&#x27;</span>).stop(<span class="literal">true</span>).animate(&#123;<span class="attr">right</span>: <span class="string">&#x27;-360px&#x27;</span>&#125;, <span class="number">250</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="元素的座標"><a href="#元素的座標" class="headerlink" title="元素的座標"></a>元素的座標</h1><h2 id="offset"><a href="#offset" class="headerlink" title="offset()"></a>offset()</h2><p>只返回元素從視窗左上角至該元素邊框的座標偏移距離，沒錯，它只以視窗計算至元素邊框的座標偏移距離，但如果有 margin 會與 top、bottom、left、right 一起加入計算，內部的子元素如果用此方法，計算方式也是從視窗開始計算。offset() 可以加入物件參數回傳這個物件的 left 與 top 屬性（存有元素 X 與 Y 的座標數字）。如果使用 top、left 屬性，它會設定所指定的位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pos = $(<span class="string">&#x27;#a&#x27;</span>).offset() <span class="comment">// 回傳一個 jQuery物件 並且具有 top、left 屬性</span></span><br><span class="line">pos.top = <span class="number">100</span> <span class="comment">// 更改這個物件 top 屬性</span></span><br><span class="line">pos.left = <span class="number">100</span> <span class="comment">// 更改這個物件 left 屬性</span></span><br><span class="line">$(<span class="string">&#x27;#a&#x27;</span>).offset(pos) <span class="comment">// 回傳此物件，重新設定元素位置</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>.offset()<br>.offset({top:value,left:value})<br>.offset().top、.offset().left</p>
</blockquote>
<ul>
<li>使用回呼函式</li>
</ul>
<blockquote>
<p>$(selector).offset(function(index, oldOffset))</p>
</blockquote>
<div class="admonition warning"><p>注意，與 JavaScript 的 offsetTop、offsetLeft 屬性不同，即便它們名字很像，JavaScript 的 offsetTop、offsetLeft 與 position() 一樣。</p>
</div>

<h2 id="position"><a href="#position" class="headerlink" title="position()"></a>position()</h2><p>position() 用法類似 offset()，<strong>但它只能作為 getter</strong>，並且從指定元素開始往上尋找，找到第一個 position 為 relative 或 absolute 為定位點來做計算，如果都沒有找到，則該方法就與 offset()一樣，會以視窗左上角為偏移量。返回的對象包含兩個整型屬性：top 和 left，此方法只對可見元素有效。</p>
<blockquote>
<p>.position()</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).position().left</span><br><span class="line">$(<span class="string">&#x27;.box&#x27;</span>).position().top</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>注意，它與 JavaScript 的 offsetTop、offsetLeft 屬性相同。</p>
</div>

<h2 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent()"></a>offsetParent()</h2><p><strong>獲取被定位的最近祖先元素對象</strong>，每個元素都有個 offsetParent 屬性，用來指定元素的位置是相對於誰。已定位的元素永遠都是他們子裔元素的 offsetParent，jQuery 只會把已定位的元素當作 offsetParent，而 jQuery 物件的 offsetParent()方法則會把每個元素對應至最接近它的已定位祖（ancestor）元素，或最後是 body 元素。</p>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章 - 插入、取代、刪除元素</title>
    <url>/2020/10/02/lesson-jq-03.insert-replace/</url>
    <content><![CDATA[<h1 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h1><p>before()、prepend()、append()、after()都是用來指定要被插入至文件的內容，皆取一個引數，可以是用來指定新內容的「純文字」或 「HTML 字串」，也可以是個「jQuery 物件」。</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以選擇器為主，指定要插入的內容，此方式可以有函式引數</span></span><br><span class="line">$(selector).append(content)</span><br></pre></td></tr></table></figure>

<p>插入的位置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[before] &lt;p&gt; [prepend] 我是內容 [append] &lt;&#x2F;p&gt; [after]</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).append(<span class="string">&#x27;&lt;span&gt;P結束標籤前面&lt;/span&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).prepend(<span class="string">&#x27;&lt;span&gt;p開始標籤後面&lt;/span&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).before(<span class="string">&#x27;&lt;span&gt;p開始標籤前面&lt;/span&gt;&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).after(<span class="string">&#x27;&lt;span&gt;p開始標籤後面&lt;/span&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>這四個更動文件結構的方法也都接受函式，<br>append()、prepend()，第二個引數是指當下選擇目標的 HTML 字串表示的<strong>原內容</strong>，<br>before()、after() 不會有第二引數。</p>
<blockquote>
<p>$(selector).append(function(index,oldContent))<br>$(selector).prepend(function(index,oldContent))<br>$(selector).before(function(index))<br>$(selector).after(function(index))</p>
</blockquote>
<hr>
<h1 id="replaceWith-取代元素"><a href="#replaceWith-取代元素" class="headerlink" title="replaceWith() 取代元素"></a>replaceWith() 取代元素</h1><p>replaceWith() 方法用指定的 HTML 內容或元素替換被選元素。<br>replaceWith()與 replaceAll()作用相同。差異在於語法：內容和選擇器的位置，以及 replaceAll()無法使用函數進行替換。</p>
<p>跟上面四個插入內容一樣可接受函式：</p>
<blockquote>
<p>$(selector).replaceWith(function(index,oldContent))</p>
</blockquote>
<p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;hr&#x27;</span>).replaceWith(<span class="string">&#x27;&lt;br&gt;&#x27;</span>) <span class="comment">// 用 &lt;br&gt; 取代 &lt;hr&gt; 元素，hr被取代後不會存在於文件中</span></span><br><span class="line">$(<span class="string">&#x27;h2&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用 h1 取代 h2，內容不變</span></span><br><span class="line">  <span class="keyword">var</span> h2 = $(<span class="built_in">this</span>)</span><br><span class="line">  h2.replaceWith(<span class="string">&#x27;&lt;h1&gt;&#x27;</span> + h2.html() + <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用 map()，遍歷每一個元素，並在每個 h1 開頭加上章節符號</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstChild <span class="comment">//注意使用 this，去抓 JavaScript 的 firstChild</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .before(<span class="string">&#x27;§&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner first&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner second&quot;</span>&gt;</span>And<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner third&quot;</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// replaceWith()　以選擇器開始，指定要插入的內容</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;div.second&#x27;</span>).replaceWith(<span class="string">&#x27;&lt;h2&gt;New heading&lt;/h2&gt;&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// replaceAll()　反過來以建立內容開始，並插入指定的位置</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;&lt;h2&gt;New heading&lt;/h2&gt;&#x27;</span>).replaceAll(<span class="string">&#x27;.inner&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上五個方法都是在目標元素上呼叫，並傳入要插入的內容作為引數。<br>也可以反過來，用內容來呼叫，並傳入目標元素作為引數。<br>它們是 appendTo()、prependTo()、insertAfter、insertBefore()、replaceAll()，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以內容為主，指定要被插入到哪個選擇器，選擇器可以是一個 jQuery 物件、Element、文字節點，這種方式沒有函式引數</span></span><br><span class="line">$(content).appendTo(selector)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="clone-複製元素"><a href="#clone-複製元素" class="headerlink" title="clone() 複製元素"></a>clone() 複製元素</h1><p>clone() 複製出一份選取集合的副本（包含所有的後代子孫以及文字），<br>如果想要將文件上的元素複製到新的位置，而非移動它們，必須先用 clone() 方法來複製它們的副本。<br>clone()會製作並回傳每個所選元素（連同這些元素的所有子元素）的副本。</p>
<p>但是，回傳的 jQuery 物件中的元素尚未成為文件的一部分，要使用上面提到的的方法<strong>插入</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;clone&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.google.com&quot;</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 複製 a元素到 p</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> content = $(<span class="string">&#x27;a.clone&#x27;</span>).clone()</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;p.box&#x27;</span>).append(content)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="刪除元素"><a href="#刪除元素" class="headerlink" title="刪除元素"></a>刪除元素</h1><h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><p>只有清空子元素，移除每個所選元素全部的子元素（包括文字節點），不會更動到所選元素本身。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .hello 裡面的子元素及內容會被清空</span></span><br><span class="line">$(<span class="string">&#x27;.hello&#x27;</span>).empty()</span><br></pre></td></tr></table></figure>

<h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p>連同自己以及子孫元素都一併從 DOM 樹中移除，而且還會移除任何先前已繫結的事件處理器。<br>remove()通常不帶引數，並會移除 jQuery 物件中所有的元素。不過如果傳入一個引數，那個引數會被視為選擇器，當然，也可以使用 filter 來篩選。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以指定要移除的對象</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).remove(<span class="string">&#x27;.hello&#x27;</span>)</span><br><span class="line"><span class="comment">// 這種做法相當於使用 filter</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).filter(<span class="string">&#x27;.hello&#x27;</span>).remove()</span><br></pre></td></tr></table></figure>

<h2 id="detach"><a href="#detach" class="headerlink" title="detach()"></a>detach()</h2><p>detach() 就像 remove()，但不會移除事件處理器與資料。仍會保留所有事件處理器，若只想暫時自文件中移除某些元素，之後還要放回去的話，detach()會比較適合。<br>會在記憶體中保留一份相同的複製資料。</p>
<h1 id="包住自己"><a href="#包住自己" class="headerlink" title="包住自己"></a>包住自己</h1><h2 id="unwrap-、wrap-、wrap"><a href="#unwrap-、wrap-、wrap" class="headerlink" title="unwrap()、wrap()、wrap"></a>unwrap()、wrap()、wrap</h2><ul>
<li>.unwrap 是解包裹的概念，它會將選擇到的元素集合的父元素移除掉。</li>
<li>.wrap 是包裹的概念，它會將選擇到的元素集合，<strong>每一個</strong>都加上一個父元素。</li>
<li>.wrapAll 是全包裹的概念，它會將選擇到的元素集合，全部包裹在一個指定的父元素中。</li>
</ul>
<p>不同於 remove()、detach()，unwrap()並不接受一個額外的選擇器引數。</p>
<h3 id="wrap-html-各別包住匹配到的元素"><a href="#wrap-html-各別包住匹配到的元素" class="headerlink" title="wrap(html) - 各別包住匹配到的元素"></a>wrap(html) - 各別包住匹配到的元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;.inner&#x27;</span>).wrap(<span class="string">&#x27;&lt;div class=&quot;new&quot;&gt;&lt;/div&gt;&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 結果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;new&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;new&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="wrapAll-html-一起包住所有匹配到的元素"><a href="#wrapAll-html-一起包住所有匹配到的元素" class="headerlink" title="wrapAll(html) - 一起包住所有匹配到的元素"></a>wrapAll(html) - 一起包住所有匹配到的元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 例如 HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;.inner&#x27;</span>).wrapAll(<span class="string">&#x27;&lt;div class=&quot;new&quot; /&gt;&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 結果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;new&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="wrapInner-html-各別包到匹配的元素裡面"><a href="#wrapInner-html-各別包到匹配的元素裡面" class="headerlink" title="wrapInner(html) - 各別包到匹配的元素裡面"></a>wrapInner(html) - 各別包到匹配的元素裡面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 例如 HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;.inner&#x27;</span>).wrapInner(<span class="string">&#x27;&lt;div class=&quot;new&quot;&gt;&lt;/div&gt;&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 得到的結果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;new&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;new&quot;</span>&gt;</span>Goodbye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 - 變更及取得內容</title>
    <url>/2020/10/02/lesson-jq-02.set-and-get/</url>
    <content><![CDATA[<h1 id="變更及取得內容"><a href="#變更及取得內容" class="headerlink" title="變更及取得內容"></a>變更及取得內容</h1><p>jQuery 變更與取得元素的內容是非常容易的事情：</p>
<ul>
<li>變更內容：$(選擇器).html(變更的內容)</li>
<li>取得內容：$(選擇器).html()</li>
</ul>
<a id="more"></a>

<p>需要注意的是 jQuery 物件與正常的 DOM 物件不同，使用者不能夠為 jQuery 物件呼叫 DOM 屬性或方法，也不能夠為 DOM 物件呼叫 jQuery 的方法和屬性。因此須知道當下操縱的是 DOM 物件，還是 jQuery 物件，這樣才能正確使用各自物件的方法、屬性。接著，介紹各種常用變更及取得的設定：</p>
<hr>
<h1 id="text-、html-取得與設定元素內容"><a href="#text-、html-取得與設定元素內容" class="headerlink" title="text()、html() 取得與設定元素內容"></a>text()、html() 取得與設定元素內容</h1><p>text()與 html()方法用來查詢與設定一或多個元素的純文字或 HTML 內容。<br>text() 不帶引數呼叫時，回傳所有符合元素裡面的所有純文字內容。它等同於 JavaScript 的 textContent 與 innerText。<br>html() 不帶引數呼叫時，回傳第一個符合元素的 HTML 內容。它等同於 JavaScript 的 innerHTML。</p>
<h2 id="可以使用回呼函式"><a href="#可以使用回呼函式" class="headerlink" title="可以使用回呼函式"></a>可以使用回呼函式</h2><p>做到讀取與寫入的功能，此時 index 為符合 selector 的 text 或 html 索引值, oldcontent 為原內容，可以在返回時用 return “新內容” 取代原內容。</p>
<blockquote>
<p>$(selector).text(function(index, oldcontent))<br>$(selector).html(function(index, oldcontent))</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> txt = $(<span class="string">&#x27;.card&#x27;</span>).text()</span><br><span class="line"><span class="keyword">var</span> html = $(<span class="string">&#x27;card&#x27;</span>).html()</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;.card-body p&#x27;</span>).text(<span class="function"><span class="keyword">function</span> (<span class="params">idx, oldContent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`第<span class="subst">$&#123;idx + <span class="number">1</span>&#125;</span>個：<span class="subst">$&#123;oldContent&#125;</span>`</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="val-取得與設定-HTML-表單值"><a href="#val-取得與設定-HTML-表單值" class="headerlink" title="val() 取得與設定 HTML 表單值"></a>val() 取得與設定 HTML 表單值</h1><p>val() 是用來設定與查詢 HTML 表單元素 value 屬性的方法，也可用來查詢與設定 checkboxs（多選鈕）、radio buttons（單選鈕）及 select 元素的選取狀態。它等同於 javascript 的 value。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;select#foo option:checked&#x27;</span>).val()</span><br><span class="line">$(<span class="string">&#x27;select#foo&#x27;</span>).val()</span><br><span class="line">$(<span class="string">&#x27;input[type=checkbox][name=bar]:checked&#x27;</span>).val()</span><br><span class="line">$(<span class="string">&#x27;input[type=radio][name=baz]:checked&#x27;</span>).val()</span><br></pre></td></tr></table></figure>

<h2 id="可以使用回呼函式-1"><a href="#可以使用回呼函式-1" class="headerlink" title="可以使用回呼函式"></a>可以使用回呼函式</h2><blockquote>
<p>$(selector).val(function(index, oldvalue))</p>
</blockquote>
<hr>
<h1 id="attr-取得與設定-HTML-屬性"><a href="#attr-取得與設定-HTML-屬性" class="headerlink" title="attr() 取得與設定 HTML 屬性"></a>attr() 取得與設定 HTML 屬性</h1><p>attr()方法是可以取得與設定 HTML 屬性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;img&#x27;</span>).attr(<span class="string">&#x27;width&#x27;</span>) <span class="comment">// 取得屬性值</span></span><br><span class="line">$(<span class="string">&#x27;img&#x27;</span>).attr(<span class="string">&#x27;width&#x27;</span>, <span class="string">&#x27;500&#x27;</span>) <span class="comment">// 設定屬性值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>).attr(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>) <span class="comment">// 替所有連結新增 target 屬性</span></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>).attr(<span class="string">&#x27;target&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 本地連結在原處載入，他站連結則在新視窗載入</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.host == location.host) <span class="keyword">return</span> <span class="string">&#x27;_self&#x27;</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">&#x27;_blank&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="使用選項物件設定多屬性"><a href="#使用選項物件設定多屬性" class="headerlink" title="使用選項物件設定多屬性"></a>使用選項物件設定多屬性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#banner&#x27;</span>).attr(&#123;</span><br><span class="line">  src: <span class="string">&#x27;banner.gif&#x27;</span>,</span><br><span class="line">  alt: <span class="string">&#x27;廣告&#x27;</span>,</span><br><span class="line">  width: <span class="number">720</span>,</span><br><span class="line">  height: <span class="number">64</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="可以使用回呼函式-2"><a href="#可以使用回呼函式-2" class="headerlink" title="可以使用回呼函式"></a>可以使用回呼函式</h2><blockquote>
<p>$(selector).attr(attribute,function(index,oldvalue))</p>
</blockquote>
<h2 id="removeAttr-移除屬性"><a href="#removeAttr-移除屬性" class="headerlink" title="removeAttr() 移除屬性"></a>removeAttr() 移除屬性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需指定屬性</span></span><br><span class="line">$(<span class="string">&#x27;a&#x27;</span>).removeAttr(<span class="string">&#x27;target&#x27;</span>) <span class="comment">// 移除掉所有連結的 target，原視窗載入</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="取得與設定-CSS-類別"><a href="#取得與設定-CSS-類別" class="headerlink" title="取得與設定 CSS 類別"></a>取得與設定 CSS 類別</h1><p>jQuery 定義了以下方法處理 class 屬性：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>addClass()</td>
<td>為指定的對象增加類別，增加類別可複數</td>
</tr>
<tr>
<td>removeClass()</td>
<td>為指定的對象移除類別 移除類別可複數</td>
</tr>
<tr>
<td>toggleClass()</td>
<td>為指定的對象切換類別</td>
</tr>
<tr>
<td>hasClass()</td>
<td>測試指定的類別存在與否</td>
</tr>
</tbody></table>
<h2 id="addClass"><a href="#addClass" class="headerlink" title="addClass()"></a>addClass()</h2><p>新增一個或多個類別（不會覆蓋移除原有的 class），只做添加類別，新增多個類別使用空格分隔類別。</p>
<blockquote>
<p>$(選擇器).addClass(class_name)<br>$(selector).addClass(function(index, oldclass))</p>
</blockquote>
<h2 id="removeClass"><a href="#removeClass" class="headerlink" title="removeClass()"></a>removeClass()</h2><p>僅移除類別（保留其他 class），多類別使用空格分隔類別，如果沒有參數，則該方法將從被選元素中刪除所有類。</p>
<blockquote>
<p>$(選擇器).removeClass(class_name)<br>$( selector ).removeClass( function(index, oldclass) )</p>
</blockquote>
<h2 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h2><p>對設置或移除被選元素的一個或多個類進行切換。該方法檢查每個元素中指定的類。如果不存在則添加類，如果已設置則刪除之。這就是所謂的切換效果。<br>不過，通過使用”switch” 參數，您能夠規定只刪除或只添加類。</p>
<blockquote>
<p>$( selector ).toggleClass( class [, switch])<br>$( selector ).toggleClass( function(index, class) , switch )</p>
</blockquote>
<h2 id="hasClass"><a href="#hasClass" class="headerlink" title="hasClass()"></a>hasClass()</h2><p>測試指定的類別存在與否。<br>hasClass 方法的彈性比 addClass、removeClass()、toggleClass 還要低，hasClass()只能處理單一個類別名稱，而且不支援函式引數。在相比之下，is()比較有彈性。<br>這些 jQuery 方法就像 classList 方法，但這些 jQuery 方法能夠在所有的瀏覽器運作，不限於那些支援 HTML5 classList 屬性的瀏覽器。jQuery 方法還可以作用於多個元素上，並且可以鏈串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// addClass</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).addClass(<span class="string">&#x27;box&#x27;</span>) <span class="comment">// 為所有 h1 新增一個類別 box</span></span><br><span class="line">$(<span class="string">&#x27;h1+p&#x27;</span>).addClass(<span class="string">&#x27;box border&#x27;</span>) <span class="comment">// 為相鄰h1後的p元素，新增兩個類別</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).addClass(<span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 為所有 section 傳入一個函式，該函式會帶入索引值參數，並回傳一個值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;section&#x27;</span> + idx</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeClass</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).removeClass(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).removeClass(<span class="string">&#x27;box border&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).removeClass(<span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;section&#x27;</span> + idx</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).removeClass() <span class="comment">// 為所有 div 移除全部類別</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toggleClass</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="string">&#x27;box&#x27;</span>) <span class="comment">// 切換 box 類別</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="string">&#x27;box border&#x27;</span>) <span class="comment">// 一次切換兩個類別</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;big bold h1-&#x27;</span> + idx</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="string">&#x27;box&#x27;</span>, <span class="literal">true</span>) <span class="comment">// 等同於使用 addClass</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).toggleClass(<span class="string">&#x27;box&#x27;</span>, <span class="literal">false</span>) <span class="comment">// 等同於使用 removeClass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasClass</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).hasClass(<span class="string">&#x27;first&#x27;</span>) <span class="comment">// p元素是否有 first 類別</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).is(<span class="string">&#x27;.first&#x27;</span>) <span class="comment">// 也是做同樣的事情，is()注意要有.</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).is(<span class="string">&#x27;.first.title&#x27;</span>) <span class="comment">// is()比 hasClass() 更具彈性</span></span><br></pre></td></tr></table></figure>

<h1 id="取得與設定-CSS-屬性"><a href="#取得與設定-CSS-屬性" class="headerlink" title="取得與設定 CSS 屬性"></a>取得與設定 CSS 屬性</h1><ul>
<li>允許使用連字號的 css 樣式名稱，例如：background-color。</li>
<li>或是駝峰式寫法（Camel case），例如：backgroundColor，養成習慣使用駝峰式寫法。</li>
<li>查詢樣式值時，css()會把數值以字串形式回傳，包括後綴的單位。再設定的時候，它會將數字轉為字串並在必用時為它們加上一個’px’。</li>
<li>設定單值時，可以只寫數字，jQuery 會將數字轉成字串加上 px，例如：20、’20px’、’20’，都是一樣。</li>
<li>也可以設定回呼函式，第一個參數為 index，第二個參數為屬性值。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).css(<span class="string">&#x27;font-weight&#x27;</span>) <span class="comment">// 取值，連字號 font-weight</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).css(<span class="string">&#x27;fontWeight&#x27;</span>) <span class="comment">// 取值，駝峰式寫法也可以使用</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).css(<span class="string">&#x27;font-variant&#x27;</span>, <span class="string">&#x27;smallcaps&#x27;</span>) <span class="comment">// 設定所有 h1 的 font-variant</span></span><br><span class="line">$(<span class="string">&#x27;div.note&#x27;</span>).css(<span class="string">&#x27;border&#x27;</span>, <span class="string">&#x27;2px solid black&#x27;</span>) <span class="comment">// 設定複合屬性值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多屬性可使用選項物件（PlainObject）</li>
</ul>
<p>設定 CSS 屬性時，應該使用選項物件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).css(&#123;</span><br><span class="line">  backgroundColor: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">  color: <span class="string">&#x27;white&#x27;</span>,</span><br><span class="line">  padding: <span class="string">&#x27;10px&#x27;</span>,</span><br><span class="line">  border: <span class="string">&#x27;5px dotted black&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<div class="admonition warning"><p>注意的是 css()會忽略 !important，建議改用 CSS class 類別，否則就得使用 jQuery 套件。</p>
</div>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;p&#x27;</span>).css(<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;red !important&#x27;</span>) <span class="comment">// 不會有作用</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章 - 核心介紹</title>
    <url>/2020/09/30/lesson-jq-01.core/</url>
    <content><![CDATA[<h1 id="jQuery-函式"><a href="#jQuery-函式" class="headerlink" title="jQuery 函式"></a>jQuery 函式</h1><p>jQuery()，也可以寫成$()，兩者相同，它是 jQuery 的起手式，是最重要的函式及核心，用來製造 jQuery 物件的加工廠，也就是說這個工廠回傳的是 <strong>jQuery 物件</strong>。它不是一般我們認知的 JavaScript 物件，而是 jQuery 的特製物件，而且會是一或多個的 DOM 元素集合。</p>
<a id="more"></a>

<p>當此函式建立 jQuery 物件，表示將選取元件集合，它會儲存<strong>一個參考值指向 DOM 樹中對應的元件節點，但並不會複製這些節點</strong>，這些集合（封裝 1 個或多個 DOM 元素），一般稱為符合條件的元件集合（Method set），或稱為 jQuery 選取元件集合（jQuery selection），取得後就可以使用 jQuery 提供的方法和屬性來操作這些元素。記住，<strong>jQuery 物件只能用 jQuery 提供的方法來操作它，它不是 DOM 元素，因此不能使用 JavaScript 的方法，這點很重要</strong>。</p>
<blockquote>
<p>回傳是一個 jQuery.fn.init(n) 物件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery()</span><br><span class="line"><span class="comment">// 縮寫</span></span><br><span class="line">$()</span><br></pre></td></tr></table></figure>

<p>那麼，有甚麼方法取得實際的 DOM，使用 JavaScript 方法？有的，因為<strong>jQuery 物件是類陣列（array-like）物件，它有一些陣列特性但並不是陣列</strong>，跟陣列一樣有個 length 屬性，以及 0 到 length - 1 的數值屬性。這表示它也可用標準的中括號[]陣列記號來存取 jQuery 物件的內容，也就是 DOM 元素，因此你可以這樣做：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用陣列中括號來取得 DOM</span></span><br><span class="line">$(<span class="string">&#x27;.container&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 使用 jQuery 提供的　get() 方法取得 DOM</span></span><br><span class="line">$(<span class="string">&#x27;.container&#x27;</span>).get(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h1 id="jQuery-函式五種使用方式"><a href="#jQuery-函式五種使用方式" class="headerlink" title="jQuery 函式五種使用方式"></a>jQuery 函式五種使用方式</h1><p>jQuery()函式提供 JavaScript 封裝功能，這個封裝工廠可以為我們快速簡化 JavaScript 在網站設計的功能，有五種常使用的方式：</p>
<h2 id="1-傳入-CSS-選擇器（DOM-選擇）"><a href="#1-傳入-CSS-選擇器（DOM-選擇）" class="headerlink" title="1. 傳入 CSS 選擇器（DOM 選擇）"></a>1. 傳入 CSS 選擇器（DOM 選擇）</h2><blockquote>
<p>jQuery( selector [, context ] )</p>
</blockquote>
<p>這是最常使用的方式，傳入符合 CSS 規範的 selector 作為選擇的對象，回傳 jQuery 物件來操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.col&#x27;</span>).length</span><br></pre></td></tr></table></figure>

<p>第二參數很少使用，它必須存在於上下文關係中，例如下方 this，span 被指定在 div.foo 才能有作用，或是選擇一個集合後，第二參數會回傳指定符合的子元素。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div.foo&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">&#x27;span&#x27;</span>, <span class="built_in">this</span>).addClass(<span class="string">&#x27;bar&#x27;</span>) <span class="comment">// $(&#x27;span&#x27;, this) 等同於 $(this).find(&#x27;span&#x27;)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<div class="admonition note"><p>傳回來的是 jQuery 物件，只能用 jQuery 提供的方法來操作，不能用 JavaScript 的方法來操作。</p>
</div>

<h2 id="2-選擇元素操作（DOM-選擇）"><a href="#2-選擇元素操作（DOM-選擇）" class="headerlink" title="2. 選擇元素操作（DOM 選擇）"></a>2. 選擇元素操作（DOM 選擇）</h2><blockquote>
<p>jQuery( element )</p>
</blockquote>
<p>除了 CSS 選擇器，也可以直接抓取 DOM 元素標籤的名稱。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;body&#x27;</span>).css(&#123;</span><br><span class="line">  backgroundColor: <span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="3-建立一個元素（DOM-創建）"><a href="#3-建立一個元素（DOM-創建）" class="headerlink" title="3. 建立一個元素（DOM 創建）"></a>3. 建立一個元素（DOM 創建）</h2><blockquote>
<p>jQuery( html [, optionObject ] )</p>
</blockquote>
<p>可直接傳入 html 標籤建立一個 html 元素， optionObject 是一個可選的物件，可直接設定 html 的屬性，而從 jQuery1.8 開始，所有$.fn.方法都可以指定。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一個引數必須為 HTML 元素</span></span><br><span class="line"><span class="comment">// 第二個引數為可選物件，可以設定該元素的屬性 name/value。</span></span><br><span class="line">$(<span class="string">&#x27;&lt;input&gt;&#x27;</span>, &#123;</span><br><span class="line">  type: <span class="string">&#x27;text&#x27;</span>,</span><br><span class="line">  val: <span class="string">&#x27;Test&#x27;</span>,</span><br><span class="line">  click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).toggleClass(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  focusin: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).addClass(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  focusout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).removeClass(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;).appendTo(<span class="string">&#x27;form&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-傳入一個函式（DOM-加載完成）"><a href="#4-傳入一個函式（DOM-加載完成）" class="headerlink" title="4. 傳入一個函式（DOM 加載完成）"></a>4. 傳入一個函式（DOM 加載完成）</h2><p>傳入一個函式給它，函式會在文件已經載入，DOM 準備就緒可供操作時被呼叫。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  ready do</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// [縮寫]</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//  ready do，與上方相同</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.50 支援 ES6</span></span><br><span class="line">$(() =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="5-複製陣列、物件"><a href="#5-複製陣列、物件" class="headerlink" title="5. 複製陣列、物件"></a>5. 複製陣列、物件</h2><p>jQuery 函式可以複製陣列、物件，注意資料類型，尤其是 JSON 物件，它是被指向同一個記憶體位置，也就是說改變了一個，另一個也會更改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> ary2 = $(ary1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 複製 json 物件須注意</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span>,</span><br><span class="line">  c: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = $(obj1)</span><br><span class="line">obj1.a = <span class="number">100</span> <span class="comment">// obj2[0].a 也會更改為 200</span></span><br></pre></td></tr></table></figure>

<h1 id="ready-和-load-的區別"><a href="#ready-和-load-的區別" class="headerlink" title="ready 和 load 的區別"></a>ready 和 load 的區別</h1><ul>
<li><p>$(document).ready<br>會在 HTML 結構載入後，並且 DOM 就緒後呼叫，但不包含圖片。觸發時間較早，使用了 JavaScript 的 DOMContentLoaded 事件。</p>
</li>
<li><p>$(window).load<br>會在 HTML 結構載入後，DOM 就緒後，頁面渲染結束（iframe、img 圖片加載完成）後呼叫，也就是整份網頁讀取完成，使用了 JavaScript 的 load 事件。</p>
</li>
</ul>
<h1 id="document-readyState"><a href="#document-readyState" class="headerlink" title="document.readyState"></a>document.readyState</h1><p>另外還有一個是 readystatechange 事件，可以藉由 document.readyState 描述文件讀取狀態，分為以下：</p>
<ul>
<li>loading：document 正在讀取中</li>
<li>interactive：文件已經完成讀取和解析，但是其他的子資源，如「圖片樣式層次表」，仍然在讀取。這個狀態表示 DOMContentLoaded 事件已經被觸發。</li>
<li>complete：文件及子資源都完成讀取。這個狀態表示 load 事件即將被觸發。</li>
</ul>
<p>readystatechange 事件在 document 上觸發時可以判斷 readyState 數值的改變，例如以下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// readystatechange 替代 DOMContentLoaded</span></span><br><span class="line"><span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">&#x27;interactive&#x27;</span>) &#123;</span><br><span class="line">    initApplication()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// readystatechange 替代 load</span></span><br><span class="line"><span class="built_in">document</span>.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">&#x27;complete&#x27;</span>) &#123;</span><br><span class="line">    initApplication()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Overload-封裝功能"><a href="#Overload-封裝功能" class="headerlink" title="Overload 封裝功能"></a>Overload 封裝功能</h1><p>jQuery 使用了程式概念 overload（多載）來封裝功能，例如將 <code>$()</code> 去判別傳入參數是甚麼來做出了四個不同的功能。另外，像是 animate 也有兩種設定方式，藉由傳入參數去判斷該使用哪種方式，這也是多載設計的使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多載設計，使用參數判斷資料型態</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">overload</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nothing&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a is a string&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a is a number&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a is a function&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="jQuery-隱式迴圈"><a href="#jQuery-隱式迴圈" class="headerlink" title="jQuery 隱式迴圈"></a>jQuery 隱式迴圈</h1><p>JavaScript 選擇 DOM 元素時，可使用 querySelectorAll 取得符合選取，在 jQuery 中，它有一種包裝式的隱性反覆迴圈系統（隱式迴圈），若沒特別指定，一次選擇全部，稱作隱式反覆運算（implicit iteration）的技術，省去大量的迴圈結構，而大幅減少程式碼。</p>
<h1 id="與-querySelectorAll"><a href="#與-querySelectorAll" class="headerlink" title="$() 與 querySelectorAll()"></a>$() 與 querySelectorAll()</h1><p>兩者皆取一個 CSS 選擇器作為它們的引數，並回傳一個「類陣列物件」。jQuery 的實作會在有支援的瀏覽器中使用 querySelectorAll()，如果使用 $() 來取代 querySelectorAll()有個好處，$() 回傳的類陣列物件是一個 jQuery 物件，它比 querySelectorAll() 所回傳的類陣列物件（一個 NodeList）有用多了，因為 jQuery 物件還可以使用 jQuery 的方法。</p>
<table>
<thead>
<tr>
<th>選擇方法</th>
<th>回傳物件</th>
<th>是否新物件</th>
</tr>
</thead>
<tbody><tr>
<td>$()</td>
<td>jQuery</td>
<td>是</td>
</tr>
<tr>
<td>querySelectorAll()</td>
<td>NodeList()</td>
<td>是</td>
</tr>
<tr>
<td>getElementsByTagName</td>
<td>HTMLCollection()</td>
<td>否</td>
</tr>
<tr>
<td>getElementsByClassName()</td>
<td>HTMLCollection()</td>
<td>否</td>
</tr>
<tr>
<td>querySelector()</td>
<td>元素本身</td>
<td>否</td>
</tr>
<tr>
<td>getElementById()</td>
<td>元素本身</td>
<td>否</td>
</tr>
</tbody></table>
<ul>
<li>NodeList 與 HTMLCollection 這兩個物件是唯讀的類陣列物件（array-like objects），具有 length 屬性可被迴圈索引逐一讀取（但無法寫入）。</li>
<li>使用 $() 選擇元素時，jQuery 都會幫你獨立一個記憶體位置，且每一個都是全新的 jQuery 物件，要特別注意，濫用會造成記憶體的浪費。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.col&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.col&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;jQuery&#x27;</span>, a === b) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript querySelectorAll</span></span><br><span class="line"><span class="keyword">let</span> c = $(<span class="string">&#x27;.col&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> d = $(<span class="string">&#x27;.col&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;querySelectorAll&#x27;</span>, c === d) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript querySelector</span></span><br><span class="line"><span class="keyword">let</span> e = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> f = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#wrap&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;querySelector&#x27;</span>, e === f) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript getElementsByTagName</span></span><br><span class="line"><span class="keyword">let</span> g = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> h = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getElementsByTagName&#x27;</span>, g === h) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript getElementsByClassName</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;col&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> j = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;col&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getElementsByClassName&#x27;</span>, i === j) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript getElementById</span></span><br><span class="line"><span class="keyword">let</span> k = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;wrap&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> l = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;wrap&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;getElementById&#x27;</span>, k === l) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="鍊式串接（Chaining）"><a href="#鍊式串接（Chaining）" class="headerlink" title="鍊式串接（Chaining）"></a>鍊式串接（Chaining）</h1><p>鍊式串接，又稱為方法鍊，是方法間以句點（.）連續串接，可針對單一選擇器執行多個處理。jQuery 大部分的方法其回傳值都是回傳處理後的 jQuery 物件，也就是 return 該物件，<strong>並且會記錄在一個叫 prevObject 的物件（指上一層），它是紀錄鍊式上一層的 jQuery 物件，可以在選擇到 jQuery 物件時可以看到它</strong>。其中，end() 方法就是指向 prevObject，可以一直 end() 到虛無沒東西 <code>S.fn.init &#123;&#125;</code> 。但也有回傳非 jQuery 物件的方法，如果在方法鍊中使用 next()、end()方法，可能會因此改變處理目標的選擇器，回到原本狀態。</p>
<ul>
<li>可以幫助遍歷遨遊 DOM 結構樹，爬樹方便。</li>
<li>可以讓動畫更豐富。</li>
<li>鍊式中一個方法無法正確執行時，後續的方法也不會被執行。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// != 這種選擇是 jQ 獨創的用法，CSS沒有，最好符合CSS規範做選擇</span></span><br><span class="line">$(<span class="string">&#x27;li[id!=&quot;one&quot;]&#x27;</span>).hide().delay(<span class="number">500</span>).fadeIn(<span class="number">1400</span>).css(&#123;</span><br><span class="line">  <span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;#F00&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>序　章 - jQuery 介紹與設定</title>
    <url>/2020/09/30/lesson-jq-00.intro/</url>
    <content><![CDATA[<h1 id="jQuery-介紹"><a href="#jQuery-介紹" class="headerlink" title="jQuery 介紹"></a>jQuery 介紹</h1><p>jQuery 的作者是 John Resig，橫空出世於 2006 年 1 月瀏覽器紛爭的戰場，當時各家瀏覽器對設計者來說相容是個難題，jQuery 解決了這方面的問題。它是 JavaScript 的函式庫，封裝並簡化了 JavaScript 的功能，可以輕鬆找出文件元素 DOM、新增元素內容、編輯 HTML 與 CSS 屬性，定義事件處理器，或是加上動畫效果等等，它使得操作元素變得容易，而且，它也有完善的 Ajax 工具，還有一般用途的函式方法用來處理物件與陣列。這些功能對於當時網站開發都帶來相當的便利，因此 jQuery 很快成為一個時代很重要的函式庫，而如其名稱所示，jQuery 它專注於 Query（查詢）及使用各種功能。</p>
<a id="more"></a>

<h1 id="特色-write-less-do-more"><a href="#特色-write-less-do-more" class="headerlink" title="特色 - write less,do more"></a>特色 - write less,do more</h1><ul>
<li>跨瀏覽器平台，解決不同類型瀏覽器不一致性造成的問題，不需要額外撰寫向下相容的程式碼。</li>
<li>選取元素容易，可以使用 CSS 選擇器。</li>
<li>具有一次選取元素的特性。</li>
<li>事件處理簡單，提供的方法都可在主流瀏覽器正常運作。</li>
<li>提供常用的動畫效果。</li>
<li>有鏈式（method chaining）用來表示一連串的動作。</li>
<li>完善的 AJAX 操作。</li>
</ul>
<h1 id="設定與-CDN-服務"><a href="#設定與-CDN-服務" class="headerlink" title="設定與 CDN 服務"></a>設定與 CDN 服務</h1><p>jQuery 的設定非常簡單，只需要有來源即可使用，可從官方下載：</p>
<p><a href="https://jquery.com/download/">官網下載</a></p>
<p>官網分為幾個版本，一般開發使用會使用 uncompressed 版本，而 compressed 版本則是產品發布時會使用的壓縮版本，可在官網下載頁面找到它們。下載完 jQuery 即可使用 <code>&lt;script&gt;</code> 標籤標記它，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 產品版本</span></span><br><span class="line">&lt;script src = <span class="string">&quot;./js/jquery-3.5.1.min.js&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 開發版本</span></span><br><span class="line">&lt;script src = <span class="string">&quot;./js/jquery-3.5.1.js&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>也可以使用各家提供的 CDN 服務來設定：</p>
<p><a href="https://developers.google.com/speed/libraries#jquery">Google</a><br><a href="https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview#jQuery_Releases_on_the_CDN_0">Mircrosoft</a><br><a href="https://cdnjs.com/libraries/jquery">cdnjs</a><br><a href="https://www.jsdelivr.com/package/npm/jquery">jsdelivr</a></p>
]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Tailwind CSS 大全</title>
    <url>/2020/09/24/lesson-tailwind-css/</url>
    <content><![CDATA[<h1 id="框架介紹"><a href="#框架介紹" class="headerlink" title="框架介紹"></a>框架介紹</h1><h2 id="Component-UI"><a href="#Component-UI" class="headerlink" title="Component UI"></a>Component UI</h2><p>Bootstrap 是 Component UI 型的 CSS Framework，使用過 Bootstrap 都知道它擁有強大的網格系統與 Components UI 提供設計者使用，另外也有貼心的 Utility 工具調整內容、寬度、距離等等，但在操作切版的自由靈活度上稍嫌不足，多組件設計的方便性讓製作出的版型常常長得很像，不過，它之所以成為全球著名的 CSS Framework 之一，設計的核心就是希望被普遍大眾接受且容易使用，它確實做到了，使用組件來設計 RWD 版型，Bootstrap 非常快速。</p>
<a id="more"></a>

<h2 id="Utility-UI"><a href="#Utility-UI" class="headerlink" title="Utility UI"></a>Utility UI</h2><p>Tailwind CSS 屬於實用工具類型（Utility）的 CSS 框架，與 Bootstrap 最大的不同點在於 Tailwind CSS 全力支持使用工具類型的 Class 讓設計者完成客製化的版型，甚至可以不用寫 CSS 或鮮少就能完成版型設計，它可在 HTML 文件的元素內靈活操作 Class，也因為這特性，必須使用 Class 去組合各種 CSS 的觀念技巧，類似一種組合技的概念，所以客製化切版速度非常快，但比起 Bootstrap，它更考驗了設計者對於 CSS 的了解以及 Tailwind CSS 的環境設定，可能比較不適合新手。</p>
<h1 id="核心設計理念"><a href="#核心設計理念" class="headerlink" title="核心設計理念"></a>核心設計理念</h1><h2 id="實用工具優先"><a href="#實用工具優先" class="headerlink" title="實用工具優先"></a>實用工具優先</h2><p>在傳統設計上，您要為一個區塊去制定屬於它的樣式，因此整個區塊會是這樣定義，例如要設計一個 card，會將 card 拆成幾個部分來放置內容。屬於 UI Component 的設計理念。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* card 樣式 */</span></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &gt; <span class="selector-class">.card-header</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &gt; <span class="selector-class">.card-body</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.card</span> &gt; <span class="selector-class">.card-footer</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Tailwind CSS，全部使用 Utility Class 來完成，您看不到任何 class 彼此有關係，而且能完成區塊設計，這就是直覺式 Utility 設計理念。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max-w-sm mx-auto flex p-6 bg-white rounded-lg shadow-xl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-shrink-0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;h-12 w-12&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/img/logo.svg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;ChitChat Logo&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ml-6 pt-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;text-xl text-gray-900 leading-tight&quot;</span>&gt;</span>ChitChat<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-base text-gray-600 leading-normal&quot;</span>&gt;</span>You have a new message!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>會發現這不就是在寫 class 級的行內樣式嗎？真是又臭又髒的結構，沒錯，確實如此，這是因為我們在網頁學習進程裡，學到的是結構、樣式、行為應該要分離，要使用這種方式太可怕了！官網也承認，您是對的喔！</p>
<img data-src="/images/tailwind/tailwind-02.jpg" width="700">

<p>想想，前端似乎來到了顛覆的時代，在 vue.js 也可以發現為了資料驅動畫面，把邏輯、程式述句寫在元素結構裡面，或許是前端的複雜性開始衍生出人類偏愛直覺簡單的邏輯，一潮之後又一潮的循環，因此框架設計的思維也開始轉變。話說回來，雖然 Utility Class 讓結構變長了，換個觀點，您從此不用再浪費時間去為組件想一個 class 名稱，可以很直覺的以 CSS 知識來設計樣式（您得先習慣 Tailwind），所有的 CSS 相關樣式都已經被建置成 Utility 化，盡可能不需要編寫新的 CSS。使用 Tailwind CSS，只需要關心如何使用 Utility Class 來完成區塊設計，設計非常直覺自由，且它與行內樣式不同的是：</p>
<ul>
<li>行內樣式的屬性值是死的，Tailwind 可以系統性自訂 Class，讓外觀具有一致性。</li>
<li>Tailwind 可以在行內 Class 使用響應式設計。</li>
<li>行內樣式無法使用偽類 :hover 或 :focus，Tailwind CSS 可以使用。</li>
</ul>
<h2 id="響應式設計"><a href="#響應式設計" class="headerlink" title="響應式設計"></a>響應式設計</h2><p>您可以在 Utility Class 加入斷點（breakpoints）前綴詞而不用離開 HTML，官方說明每一個 class 都可以使用喔，並提供了四種可被自訂的響應式斷點，它們都可以在 tailwind-config.js 設定。<strong>若覺得裝置尺寸不夠或前綴詞名稱不夠潮，也可以新增來擴充專案需求</strong>。以下範例，在各尺寸會改變文字顏色，注意，它們都加上了響應式的斷點前綴詞。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-6xl sm:text-red-500 md:text-green-500 lg:text-blue-500 xl:text-yellow-500&quot;</span>&gt;</span>KaiFu<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="移動優先"><a href="#移動優先" class="headerlink" title="移動優先"></a>移動優先</h2><p>Tailwind 具有移動優先的概念，這類似於 Bootstrap 與 Foundation 中所使用的系統。也就是您沒加斷點前綴詞，它是對所有尺寸都有效，而加上 md:text-red-500 則表示從 md 尺寸開始之後的文字顏色的改變，在此之前維持另一組樣式（若有設定沒有綴詞的 Class）。在設計時，只需考慮甚麼尺寸開始生效的觀念即可。</p>
<h2 id="使用偽類"><a href="#使用偽類" class="headerlink" title="使用偽類"></a>使用偽類</h2><p>除了響應式設計，也可以在 Class 上使用狀態型偽類（hover:、focus:、active:…），來增加互動性。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;bg-transparent hover:bg-blue-500 text-blue-700 hover:text-white&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://tailwindcss.com/docs/pseudo-class-variants">更多 Tailwind CSS 偽類</a></p>
<h2 id="添加樣式與函式功能"><a href="#添加樣式與函式功能" class="headerlink" title="添加樣式與函式功能"></a>添加樣式與函式功能</h2><p>首先，您應該使用現有 Tailwind Utility Class 來設計版型，而不是編寫新的 CSS，但如果要將某些基本樣式用於特定元素，可以使用 @layer 添加，通過使用 @layer 指令，Tailwind 將自動將這些樣式移到同一位置。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> base &#123;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    @apply text-2xl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    @apply text-xl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="font-face-規則"><a href="#font-face-規則" class="headerlink" title="@font-face 規則"></a>@font-face 規則</h3><p>您可以使用相同的方法為@font-face 正在使用的任何自定義字體添加規則：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> base &#123;</span><br><span class="line">  <span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Proxima Nova;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(/fonts/proxima-nova/<span class="number">400</span>-regular.woff) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Proxima Nova;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(/fonts/proxima-nova/<span class="number">500</span>-medium.woff) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="apply"><a href="#apply" class="headerlink" title="@apply"></a>@apply</h3><p>提取相同重複的 Class 進行組件化，在設計的過程，元素區塊常常重複使用，例如以下的按鈕，使用 Tailwind CSS 來撰寫會需要很長的 Class，按鈕如果重複在文件出現時，會讓整份文件變得又臭又長，此時可以使用 @apply 來提取重複的部分，放在一個制定的 Class 裡面，注意的是，偽類無法直接使用，需要另外寫 .className:hover 來指定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.btn-blue</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="keyword">@apply</span> bg-blue-<span class="number">500</span> text-white font-bold py-<span class="number">2</span> px-<span class="number">4</span> rounded;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.btn-blue</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="keyword">@apply</span> bg-blue-<span class="number">700</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn-blue&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以單行呼叫：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  @apply bg-blue-500;</span><br><span class="line">  <span class="keyword">@apply</span> text-white;</span><br><span class="line">  <span class="keyword">@apply</span> font-bold;</span><br><span class="line">  <span class="keyword">@apply</span> py-<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">@apply</span> px-<span class="number">4</span>;</span><br><span class="line">  <span class="keyword">@apply</span> rounded;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或混合呼叫：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  @apply bg-blue-700;</span><br><span class="line">  <span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-tag">-1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重構-CSS"><a href="#重構-CSS" class="headerlink" title="重構 CSS"></a>重構 CSS</h3><p>重複性還是太多時，依舊要重構，例如以下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@layer</span> components &#123;</span><br><span class="line">  <span class="selector-class">.btn-blue</span> &#123;</span><br><span class="line">    <span class="comment">/* 重複 */</span></span><br><span class="line">    @apply bg-blue-500 text-white font-bold py-2 px-4 rounded;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-blue</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-blue-700;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.btn-gray</span> &#123;</span><br><span class="line">    @apply bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-gray</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-gray-500;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重構後：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@layer</span> components &#123;</span><br><span class="line">  <span class="selector-class">.btn</span> &#123;</span><br><span class="line">    @apply font-bold py-2 px-4 rounded;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.btn-blue</span> &#123;</span><br><span class="line">    @apply bg-blue-500 text-white;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-blue</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-blue-700;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.btn-gray</span> &#123;</span><br><span class="line">    @apply bg-gray-400 text-gray-800;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-gray</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-gray-500;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="layer"><a href="#layer" class="headerlink" title="@layer"></a>@layer</h3><p>將制定的 Class 添加到 Tailwind 對應的區塊。Tailwind 會將這些樣式自動移到與相同的位置 @tailwind components，因此您不必擔心在源文件中正確放置順序。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> components &#123;</span><br><span class="line">  <span class="selector-class">.btn-blue</span> &#123;</span><br><span class="line">    @apply bg-blue-500 text-white font-bold py-2 px-4 rounded;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.btn-blue</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    @apply bg-blue-700;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="responsive"><a href="#responsive" class="headerlink" title="@responsive"></a>@responsive</h3><p>新增自己的 class 且具有 RWD 效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* input */</span></span><br><span class="line"><span class="keyword">@responsive</span> &#123;</span><br><span class="line">  <span class="selector-class">.bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* output */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">640px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sm</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.md</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.lg</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1280px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.xl</span>\<span class="selector-pseudo">:bg-gradient-brand</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, green);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="variants"><a href="#variants" class="headerlink" title="@variants"></a>@variants</h3><p>@variants 可為 Class 產生偽類。請務必注意，偽類是按照您指定的順序產生的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Input */</span></span><br><span class="line"><span class="keyword">@variants</span> hover, focus &#123;</span><br><span class="line">  <span class="selector-class">.banana</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Output */</span></span><br><span class="line"><span class="selector-class">.banana</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hover</span>\<span class="selector-pseudo">:banana</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.focus</span>\<span class="selector-pseudo">:banana</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>產生響應式、偽類並放進 utilities 組件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@layer</span> utilities &#123;</span><br><span class="line">  <span class="keyword">@responsive</span> &#123;</span><br><span class="line">    <span class="keyword">@variants</span> hover, focus &#123;</span><br><span class="line">      <span class="selector-class">.filter-none</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="selector-class">.filter-grayscale</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(<span class="number">100%</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="theme"><a href="#theme" class="headerlink" title="theme()"></a>theme()</h3><p>使用 theme() 函式來設定屬性值，注意，要使用點表示法訪問嵌套的顏色值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content-area</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100vh</span> - theme(<span class="string">&#x27;spacing.12&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.btn-blue</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">theme</span>(<span class="string">&#x27;colors.blue.500&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="安裝與設定"><a href="#安裝與設定" class="headerlink" title="安裝與設定"></a>安裝與設定</h1><p>使用 Node.js 環境，請先安裝 <a href="https://nodejs.org/zh-tw/">Node.js</a>。</p>
<h2 id="初始化專案"><a href="#初始化專案" class="headerlink" title="初始化專案"></a>初始化專案</h2><p>建立一個專案目錄，在此專案目錄下輸入以下指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure>

<h2 id="安裝-Tailwind-CSS"><a href="#安裝-Tailwind-CSS" class="headerlink" title="安裝 Tailwind CSS"></a>安裝 Tailwind CSS</h2><p>在專案目錄下安裝 Tailwind CSS</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install tailwindcss</span><br></pre></td></tr></table></figure>

<h2 id="建立-CSS-檔案"><a href="#建立-CSS-檔案" class="headerlink" title="建立 CSS 檔案"></a>建立 CSS 檔案</h2><ol>
<li>在專案根目錄下建立一個目錄 src，並在 src 下建立 css 目錄。</li>
<li>在 css 目錄下，建立 tailwind.css。</li>
<li>引入 Tailwind CSS 三個組件區塊，分別是 base、components、utilities。Tailwind 主要的組件區塊。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 基本 HTML 樣式，包含調整過的 Normalize.css */</span></span><br><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="comment">/* 組件區塊 */</span></span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="comment">/* Utility區塊 */</span></span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure>

<p>現在，可以做個測試，在根目錄下，輸入以下指令編譯出 CSS，<strong>注意路徑檔名是否正確</strong>，編譯出 Tailwind CSS 檔案有 2MB 以上，容量非常大，Bootstrap 約 10000 多行樣式碼，Tailwind 有 100000 多行樣式碼，可以說是十倍界王拳？不擔心，之後可以使用 PurgeCSS 進行瘦身。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx tailwindcss build .&#x2F;src&#x2F;css&#x2F;tailwind.css -o .&#x2F;src&#x2F;css&#x2F;style.css</span><br></pre></td></tr></table></figure>

<h2 id="建立-postcss-config-js"><a href="#建立-postcss-config-js" class="headerlink" title="建立 postcss.config.js"></a>建立 postcss.config.js</h2><p>在專案根目錄下建立 postcss.config.js，這是編譯 tailwind.css 前的設定檔，等等需要安裝其相關套件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="keyword">const</span> purgecss = <span class="built_in">require</span>(<span class="string">&#x27;@fullhuman/postcss-purgecss&#x27;</span>)(&#123;</span><br><span class="line">  content: [<span class="string">&#x27;./src/**/*.html&#x27;</span>, <span class="string">&#x27;./src/**/*.vue&#x27;</span>, <span class="string">&#x27;./src/**/*.jsx&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  defaultExtractor: <span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> broadMatches = content.match(<span class="regexp">/[^&lt;&gt;&quot;&#x27; `\s]*[^&lt;&gt;&quot;&#x27;` \s:]/g</span>) || []</span><br><span class="line">    <span class="keyword">const</span> innerMatches = content.match(<span class="regexp">/[^&lt;&gt;&quot;&#x27; `\s.()]*[^&lt;&gt;&quot;&#x27;` \s.():]/g</span>) || []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> broadMatches.concat(innerMatches)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="built_in">require</span>(<span class="string">&#x27;tailwindcss&#x27;</span>), <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>), ...(process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span> ? [purgecss] : [])],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PurgeCSS-Postcss"><a href="#PurgeCSS-Postcss" class="headerlink" title="PurgeCSS + Postcss"></a>PurgeCSS + Postcss</h2><p>PurgeCSS 是將 CSS 瘦身的好物，打包時會將沒使用到的 Class 拿掉，而 Postcss 可以編譯 CSS 延伸的功能，例如自動前綴詞，安裝以下的套件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install @fullhuman&#x2F;postcss-purgecss --save-dev</span><br><span class="line">npm i postcss postcss-cli</span><br><span class="line">npm i autoprefixer</span><br></pre></td></tr></table></figure>

<h2 id="打開-package-json-新增指令"><a href="#打開-package-json-新增指令" class="headerlink" title="打開 package.json 新增指令"></a>打開 package.json 新增指令</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指令需對應檔案路徑位置</span></span><br><span class="line"><span class="comment">// npm run tailwind =&gt; 編譯出 css</span></span><br><span class="line"><span class="comment">// npm run postcss =&gt; Tailwind 瘦身 css</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;tailwind&quot;</span>: <span class="string">&quot;npx tailwindcss build ./src/css/tailwind.css -o ./src/css/style.css&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss&quot;</span>: <span class="string">&quot;postcss ./src/css/tailwind.css -o ./src/css/style.css&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>輸入以下指令編譯出瘦身過後的 CSS 檔。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run postcss</span><br></pre></td></tr></table></figure>

<h1 id="重要的-tailwind-config-js"><a href="#重要的-tailwind-config-js" class="headerlink" title="重要的 tailwind.config.js"></a>重要的 tailwind.config.js</h1><h2 id="建立-tailwind-config-js"><a href="#建立-tailwind-config-js" class="headerlink" title="建立 tailwind.config.js"></a>建立 tailwind.config.js</h2><p>tailwind.config.js 是 <strong>Tailwind CSS 最重要的設定檔</strong>，如果要客製化自己的 Tailwind，全部在這裡設定，您也可以在 tailwind.config.js 設置 purge 瘦身，並且再進行一次 npm run tailwind 編譯，就會得到使用過的 class，前提是要先要有文件，並且該文件 link 了樣式檔使用了 Utility Class，tailwind.config.js 才會去偵測。另外，使用 VSCode 套件 Tailwind CSS IntelliSense，沒有該檔案也無法有提示的作用喔。</p>
<ul>
<li>以下指令會產生全部預設的配置，它會在專案根目錄：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx tailwindcss init --full</span><br></pre></td></tr></table></figure>

<ul>
<li>以下指令只會產生設定檔初始架構：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx tailwindcss init</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 tailwind.config.js 設定 purge</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  future: &#123;</span><br><span class="line">    removeDeprecatedGapUtilities: <span class="literal">true</span>,</span><br><span class="line">    purgeLayersByDefault: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  purge: &#123;</span><br><span class="line">    enabled: <span class="literal">true</span>,</span><br><span class="line">    content: [<span class="string">&#x27;./src/**/*.html&#x27;</span>, <span class="string">&#x27;./src/**/*.vue&#x27;</span>, <span class="string">&#x27;./src/**/*.jsx&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自訂-tailwind-config-js"><a href="#自訂-tailwind-config-js" class="headerlink" title="自訂 tailwind.config.js"></a>自訂 tailwind.config.js</h2><ul>
<li>您可以自訂義屬於自己的 class，例如：想新增一個 kaifu class，會定義出 text-kaifu、bg-kaifu、border-kaifu 等相關的 class，可以自由修改 CSS 屬性相關的屬性值，或是修改斷點 RWD 的尺寸，tailwind.config.js 設定檔寫得很清楚。</li>
</ul>
<img data-src="/images/tailwind/tailwind-01.png" width="700">

<h3 id="使用流程建議"><a href="#使用流程建議" class="headerlink" title="使用流程建議"></a>使用流程建議</h3><ul>
<li><p>可先使用 CDN 配合官網文件熟悉 Utility Class。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>或 <code>npm run tailwind</code> 自訂義生成一整包來使用，若有設定 purges，要先 enabled:false。</p>
</li>
<li><p>搭配 VSCode 套件提示 class 名稱 <a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss">Tailwind CSS IntelliSense</a>，<strong>注意，必須要有 tailwind.config.js 才會有提示！</strong></p>
</li>
<li><p>設計完成後再進行瘦身， <code>npm run postcss</code> 或 <code>npm run tailwind</code>。</p>
</li>
</ul>
<h1 id="第三方套件"><a href="#第三方套件" class="headerlink" title="第三方套件"></a>第三方套件</h1><h2 id="awesome-tailwindcss"><a href="#awesome-tailwindcss" class="headerlink" title="awesome-tailwindcss"></a><a href="https://github.com/aniftyco/awesome-tailwindcss">awesome-tailwindcss</a></h2><h1 id="重點補充"><a href="#重點補充" class="headerlink" title="重點補充"></a>重點補充</h1><ul>
<li><a href="https://github.com/tailwindlabs/tailwindcss/blob/master/stubs/defaultConfig.stub.js">tailwind.config.js 改壞了怎麼辦？</a></li>
</ul>
]]></content>
      <tags>
        <tag>TailwindCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 偽元素</title>
    <url>/2020/09/22/lesson-css-10.before-after/</url>
    <content><![CDATA[<h1 id="偽類與偽元素"><a href="#偽類與偽元素" class="headerlink" title="偽類與偽元素"></a>偽類與偽元素</h1><p>偽類（Pseudo-classes ）與偽元素（Pseudo-element）兩者都是 CSS 為了擴張變化性而衍生出的選擇器，偽類以元素狀態、結構為主要的選擇方式：</p>
<a id="more"></a>

<ul>
<li>:checked（狀態）</li>
<li>:focus（狀態）</li>
<li>:root（結構）</li>
<li>:first-child（結構）</li>
<li>:nth-child（結構）</li>
</ul>
<p>而偽元素則是以 before、after 這兩兄弟為主要被探討的對象，可以說是偽元素的代名詞！截至目前為止，偽元素家族比起偽類家族，算是少數。追朔早期，偽元素與偽類一樣，都是以單冒號<code>:</code>為主，至今依舊可以使用單冒號來選擇偽元素，但從 CSS3 開始，偽類與偽元素開始分家，偽元素被定義成雙冒號<code>::</code>作為選擇器，隨著前端技術我們必須修正前進，<strong>應該使用雙冒號來表示偽元素，不要使用單冒號</strong>。</p>
<ul>
<li>::before</li>
<li>::after</li>
<li>::first-line</li>
<li>::first-letter</li>
<li>::selection</li>
<li>::backdrop</li>
</ul>
<p>以瀏覽器來看偽類與偽元素，進入開發者模式，偽類不會出現在 Elements 結構畫面，但是偽元素 ::before、::after 會在被選擇的元素內容前後出現，雖然它們可以長在 DOM 身上，但依舊不被 DOM 接納，只能被 CSSOM 所渲染，因此不能使用 JavaScript 或 jQuery 任何獲取 DOM 元素的方式選擇到偽元素。</p>
<h1 id="偽元素建立與特性"><a href="#偽元素建立與特性" class="headerlink" title="偽元素建立與特性"></a>偽元素建立與特性</h1><p>這裡的偽元素指的是 ::before 與 ::after 。</p>
<ol>
<li>content 是必須的屬性，沒有無法建立偽元素。</li>
<li>被建立時，類型為 inline。</li>
<li>通常要 display 轉型才能做較多的事情。</li>
<li>與絕對定位一起使用時，別忘記本體的定位點。</li>
<li>img、input、iframe 等置換元素無法使用偽元素。</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 建立偽元素時，一定要有 content */</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="偽元素是元素的分身"><a href="#偽元素是元素的分身" class="headerlink" title="偽元素是元素的分身"></a>偽元素是元素的分身</h1><p>元素如果是主體，::before 與 ::after 兩兄弟是元素主體的分身，也就是<strong>元素可以多出兩個容器來做更多事情</strong>。就好像 1942~1945 射擊遊戲兩側的小飛機，好吧，我知道沒人聽過。</p>
<img data-src="/images/css/css-before-after-01.jpg" width="700">

<p>又或像是火影忍者的影分身之術，聽過了．．．吧。</p>
<img data-src="/images/css/css-before-after-02.jpg" width="700">

<p>這兩分身應用非常多元、非常廣，難以一一談論，能發揮在各種場合，大致上可以分為<strong>修飾主體缺少的部分</strong>，或是<strong>替主體增加更多層次的樣式</strong>，又或是<strong>三位一體組合的概念</strong>，舉個例子，我要畫米老鼠的頭部，元素主體畫了圓臉，兩分身再各畫一隻圓耳朵，這樣只用了一個元素做到了三個圓的樣式。因此，<strong>偽元素具有節省元素數量的效果</strong>，不用為了做一個效果而多使用一個元素標籤。</p>
<ul>
<li><a href="https://powerkaifu.github.io/CSS_Naruto_Before_After/">鳴人的影分身</a></li>
</ul>
<h1 id="偽元素的層級"><a href="#偽元素的層級" class="headerlink" title="偽元素的層級"></a>偽元素的層級</h1><p>可以從 html 結構看出在一般流向裡面，::before 之後接著是主體的內容區域，再接著::after。因此若對::before 與::after 進行絕對定位，兩者都會被拉升至定位層蓋住主體的內容區域。當然，若對主體內容區域使用絕對定位，則三者都進入定位層，又會依照排列順序後者蓋過前者（::before &lt; 內容 &lt; ::after）。可以使用 z-index:-1 將一個調至最下層。</p>
<h1 id="實用文章"><a href="#實用文章" class="headerlink" title="實用文章"></a>實用文章</h1><p><a href="https://reurl.cc/Y6kDMX">JS 控制偽元素的方法彙總</a></p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 動畫</title>
    <url>/2020/09/08/lesson-css-09.animation/</url>
    <content><![CDATA[<h1 id="動畫-Animation"><a href="#動畫-Animation" class="headerlink" title="動畫 - Animation"></a>動畫 - Animation</h1><p>「轉場」與「動畫」可說是兄弟，兩人分工負責了 CSS 世界的動態效果。轉場可以在觸發狀態時，讓起始、結束狀態兩組樣式產生一組簡單的補間動畫，它是容易且強大的效果，但若要製作較為複雜的效果時，這就不是轉場的工作囉，因為它屬於<strong>一次性</strong>的動畫，例如黑色與白色的補間動畫。若是要黑色變成黃色，再變成白色，再變其他顏色，這時候就是動畫（animation）登場的時候。</p>
<a id="more"></a>

<p>其概念與早期動畫軟體 Flash 影格（keyframes）一樣（<strong><em>為 Flash 默哀，1996 年 4 月 10 日 - 2020 年 12 月 31</em></strong>），也就是可以設定好幾個關鍵影格的概念，來告訴瀏覽器在目前關鍵影格到下一個關鍵影格之間要渲染的樣式效果，因此，每個關鍵影格與關鍵影格之間都將會是一組補間動畫，可以形成好幾組補間動畫，產生強大複雜且可循環的動畫效果。</p>
<h1 id="動畫設定"><a href="#動畫設定" class="headerlink" title="動畫設定"></a>動畫設定</h1><p>動畫設定以 @keyframes 宣告一組動畫的開始，它必須要一個<strong>動畫名稱</strong>，{} 大括號區塊裡面描述著動畫的循環行為，可以用百分比來告訴動畫時間分配的進度，也可以用 from 或 to 關鍵字。但請記住一件事，@keyframes 只掌管動畫時間的進度分配及紀錄 CSS 屬性，至於持續時間？重複幾次？延遲時間？速率如何？動畫播放方向？動畫終止時的狀態？動畫是否暫停？等等都由動畫其它屬性來設定，動畫很多屬性，對吧，這就是它比轉場可以設定更複雜的效果原因。以下為一個簡單的動畫範例，當滑鼠移到 .box 元素上時，在 5 秒內，<code>紅&gt;綠&gt;藍&gt;綠&gt;紅</code> 順序變化顏色，並且可以無限循環。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: animate <span class="number">5s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> animate &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  25% &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  75% &#123;</span><br><span class="line">    <span class="attribute">background</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="動畫屬性"><a href="#動畫屬性" class="headerlink" title="動畫屬性"></a>動畫屬性</h1><table>
<thead>
<tr>
<th>屬性</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>animation-name</td>
<td>動畫名稱</td>
</tr>
<tr>
<td>animation-duration</td>
<td>動畫持續時間，預設 0，單位 s 或 ms。</td>
</tr>
<tr>
<td>animation-delay</td>
<td>動畫延遲播放時間，預設 0，單位 s 或 ms。</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>動畫播放次數，預設 1。其他還有 infinite。</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>動畫加速度函式，預設 ease。其他還有：linear、ease-in、ease-out、ease-in-out</td>
</tr>
<tr>
<td>animation-direction</td>
<td>動畫播放方向，預設 normal。其他還有 reverse、alternate、alternate-reverse。</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>動畫播放前後模式，預設 none。其他還有 forwards、backwards、both。</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>動畫播放或暫停狀態，預設 running。其他還有 paused。</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 動畫名稱 */</span></span><br><span class="line">  <span class="attribute">animation-name</span>: animate;</span><br><span class="line">  <span class="comment">/* 動畫間隔 */</span></span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="comment">/* 速度函式 */</span></span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="comment">/* 動畫延遲 */</span></span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">0.1s</span>;</span><br><span class="line">  <span class="comment">/* 播放次數 */</span></span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 循環交替或反向播放   */</span></span><br><span class="line">  <span class="comment">/* normal（默認，正常播放）、revers（反向播放） */</span></span><br><span class="line">  <span class="comment">/* alternate（輪流交替播放，動畫在奇數次 1,3,5 正向播放，在偶數次 2,4,6 反向播放） */</span></span><br><span class="line">  <span class="comment">/* alternate-reverse（動畫在奇數次 1,3,5 反向播放，在偶數次 2,4,6 正向播放） */</span></span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">  <span class="comment">/* forwards（保留動畫結束後的樣式，例如顏色、位置） */</span></span><br><span class="line">  <span class="comment">/* backwards（返回動畫一開始的樣式，例如顏色、位置） */</span></span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 縮寫 */</span></span><br><span class="line">  <span class="comment">/* animation: name duration timing-function delay iteration-count direction fill-mode play-state; */</span></span><br><span class="line">  <span class="attribute">animation</span>: animate <span class="number">1s</span> infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 宣告關鍵影格為動畫、動畫名稱、開始、結束 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> animate &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="動畫速率"><a href="#動畫速率" class="headerlink" title="動畫速率"></a>動畫速率</h1><p>「動畫速率」與「轉場速率」是一樣的設定，請參考<a href="https://powerkaifu.github.io/2020/09/07/lesson-css-08.transition/">轉場</a></p>
<h1 id="動畫延遲"><a href="#動畫延遲" class="headerlink" title="動畫延遲"></a>動畫延遲</h1><p>「動畫延遲」與「轉場延遲」是一樣的設定，可以注意的是當延遲時間為負值時，例如 -1s、-2s，得到的結果就「不會延遲，而是快轉」，假設一段動畫 animation-duration 要 5 秒，animation-delay 設定為 -2s，那麼動畫將會直接從第 2 秒的位置開始播放，播放 3 秒後停止 ( 5-2=3 的概念 )。</p>
<h1 id="動畫權重"><a href="#動畫權重" class="headerlink" title="動畫權重"></a>動畫權重</h1><p>關鍵影格中的 CSS 屬性在「動畫執行期間」會擁有最大絕對的優先權，但是一旦脫離了動畫執行期間，就會恢復到下一階的優先權。<br>正在執行元素的動畫（@keyframes），權重會提高至行內樣式權重（比 ID 權重高），此外，不要在動畫宣告區塊的屬性後方加上 !important，沒有這種用法，會被忽略。</p>
<h1 id="多組動畫"><a href="#多組動畫" class="headerlink" title="多組動畫"></a>多組動畫</h1><p>與轉場一樣可以套用多組效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可以套用一個以上的動畫到同個元素，屬性值需對應，fadeIn 1s、blink 3s */</span></span><br><span class="line"><span class="selector-class">.fade</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: fadeIn, blink;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">1s</span>, <span class="number">3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="省略-from-與-to"><a href="#省略-from-與-to" class="headerlink" title="省略 from 與 to"></a>省略 from 與 to</h1><p>沒有指定 0% 或 from 的 keyframe，瀏覽器會以要附加動畫的屬性原始值，建構一個 0% 的 keyframe，同樣的，沒有定義 100% 或 to 的 keyframe，瀏覽器會建構一個 100% 的 keyframe。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 假設原先設定是 background-color:red */</span></span><br><span class="line"><span class="keyword">@keyframes</span> animation &#123;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 瀏覽器會自動建構 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> animation &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>相同的 keyframe 可以歸類為一起</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> animation &#123;</span><br><span class="line">  0%,</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><p>動畫的使用其中一個是常被設計成 CSS class，再使用 JavaScript 或 jQuery 新增或刪除。</p>
<h1 id="position"><a href="#position" class="headerlink" title="position"></a>position</h1><p>使用到 top、right、bottom、left 作為動畫 keyframe 裡面的屬性時，要先確認方框元素有沒有 position。</p>
<h1 id="display-none"><a href="#display-none" class="headerlink" title="display:none"></a>display:none</h1><p>display:none 會中斷動畫的播放，並在下次設定 display:block 或其他不為 none 的值時，動畫會重頭再跑一次，而不會接續在中斷點。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 轉場</title>
    <url>/2020/09/07/lesson-css-08.transition/</url>
    <content><![CDATA[<h1 id="轉場-transition"><a href="#轉場-transition" class="headerlink" title="轉場 - transition"></a>轉場 - transition</h1><p>轉場指的是從一個<strong>初始狀態</strong>到另一個<strong>結束狀態</strong>，兩種狀態樣式轉變補間的過程。它通常發生於與使用者的互動，但也有可能是程式改變了 class、ID 或使用了其他狀態。當觸發條件發生，瀏覽器會套用轉場效果，在兩種樣式間漸進發生。最好的例子就是 :hover 偽類，也就是當滑鼠移到元素時所發生的狀態改變。無論轉場或動畫的使用，關係到與使用者的互動感受，因此 duration 時間拿捏非常重要。</p>
<a id="more"></a>

<p>以下是當滑鼠移到盒子上時，可以讓背景顏色<strong>延遲 1 秒</strong>由灰色慢慢變成黃色<strong>持續 1 秒</strong>的轉場範例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 轉場 bakcground-color 的縮寫 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">1s</span> ease <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="轉場屬性"><a href="#轉場屬性" class="headerlink" title="轉場屬性"></a>轉場屬性</h1><p>轉場可以設定四個屬性值，分別為 transition-property（轉場指定 CSS 屬性）、transition-duration（轉場持續時間）、transition-timing-function（轉場速率）以及　 transition-delay（轉場延遲時間），我們可以個別設定轉場屬性，將先前範例縮寫改成個別屬性如下所示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="comment">/* 適用所有元素以及偽元素::before、::after */</span></span><br><span class="line">  <span class="attribute">transition-property</span>: background-color;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="重要規則"><a href="#重要規則" class="headerlink" title="重要規則"></a>重要規則</h1><ul>
<li>轉場個別屬性若要設定多屬性值，要以逗號來區隔，代表每個屬性轉場持續時間、轉場速率、延遲時間都不相同。</li>
<li>沒有轉場效果或停用可設定 transition-property:none，或將持續與延遲時間設定為 0s，轉場沒有發生作用一樣。</li>
<li>可以用 all 來指定全部 css 可支援 transition 的屬性效果，但預設已經是 all。</li>
<li>border-style 不具備轉場效果。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* 逗號隔開屬性，分別對應了各自屬性、持續時間、轉場速率、延遲時間 */</span></span><br><span class="line">  <span class="attribute">transition-property</span>: color, border, border-radius, transform, opacity;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>, <span class="number">2s</span>, <span class="number">3s</span>, <span class="number">4s</span>, <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease, ease-in, ease-out, linear, ease;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">1s</span>, <span class="number">2s</span>, <span class="number">3s</span>, <span class="number">4s</span>, <span class="number">5s</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 沒有轉場效果 */</span></span><br><span class="line">  <span class="attribute">transition-property</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>當 transform-property 少於持續時間的個數，會忽略多出來的持續時間。</li>
<li>當 transform-property 多於持續時間的個數，則會以流水號重複去分配持續時間，例如 2 個，則會 1,2,1,2,1,2 去分配。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* color、border-radius、opacity、width 會被分配到 1 秒 */</span></span><br><span class="line">  <span class="comment">/* border、transform、box-shadow、padding 會被分配到 2 秒 */</span></span><br><span class="line">  <span class="attribute">transition-property</span>: color, border, border-radius, transform, opacity, box-shadow, width, padding;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>, <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="轉場速率"><a href="#轉場速率" class="headerlink" title="轉場速率"></a>轉場速率</h1><p><strong>轉場速率</strong>與<strong>動畫速率</strong>都是相同的設定，除了分為 ease、ease-in、ease-out、ease-in-out、linear 五個基礎可以設定的數值外，還有 cubic-bezier() 函式與 step-start、step-end、steps(n,start)、steps(n,end) 四種步進函式的設定。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">1s</span> <span class="number">1s</span>;</span><br><span class="line">  <span class="comment">/* 五種基礎速率函式 */</span></span><br><span class="line">  <span class="comment">/* ease（預設）、ease-in、ease-out、ease-in-out、linear */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* cubic-bezier() 函式 */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">cubic-bezier</span>(<span class="number">0.12</span>, <span class="number">0</span>, <span class="number">0.39</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 步進函式 */</span></span><br><span class="line">  <span class="comment">/* step-start 等於 steps(1,start) */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: step-start;</span><br><span class="line">  <span class="comment">/* step-end 等於 steps(1,end) */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: step-end;</span><br><span class="line">  <span class="comment">/* steps(5,start) 第一步動畫開始就步近 */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">steps</span>(<span class="number">5</span>, start);</span><br><span class="line">  <span class="comment">/* steps(5,end) 延遲一步動畫才開始步近 */</span></span><br><span class="line">  <span class="attribute">transition-timing-function</span>: <span class="built_in">steps</span>(<span class="number">5</span>, end);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="速率函式"><a href="#速率函式" class="headerlink" title="速率函式"></a>速率函式</h1><p>更多 cubic-bezier 函式可參考：<a href="https://easings.net/">https://easings.net/</a></p>
<table>
<thead>
<tr>
<th>非官方名稱</th>
<th>三次貝茲速率函式</th>
</tr>
</thead>
<tbody><tr>
<td>easeInSine</td>
<td>cubic-bezier(0.47,0,0.745,0.715)</td>
</tr>
<tr>
<td>easeOutSine</td>
<td>cubic-bezier(0.39,0.575,0.565,1)</td>
</tr>
<tr>
<td>easeInOutSine</td>
<td>cubic-bezier(0.445,0.05,0.55,0.95)</td>
</tr>
<tr>
<td>easeInQuad</td>
<td>cubic-bezier(0.55,0.085,0.68,0.53)</td>
</tr>
<tr>
<td>easeOutQuad</td>
<td>cubic-bezier(0.25,0.46,0.45,0.94)</td>
</tr>
<tr>
<td>easeInOutQuad</td>
<td>cubic-bezier(0.455,0.03,0.515,0.955)</td>
</tr>
<tr>
<td>easeInCubic</td>
<td>cubic-bezier(0.55,0.055,0.675,0.19)</td>
</tr>
<tr>
<td>easeOutCubic</td>
<td>cubic-bezier(0.215,0.61,0.355,1)</td>
</tr>
<tr>
<td>easeInOutCubic</td>
<td>cubic-bezier(0.645,0.045,0.355,1)</td>
</tr>
<tr>
<td>easeInQuart</td>
<td>cubic-bezier(0.895,0.03,0.685,0.22)</td>
</tr>
<tr>
<td>easeOutQuart</td>
<td>cubic-bezier(0.165,0.84,0.44,1)</td>
</tr>
<tr>
<td>easeInOutQuart</td>
<td>cubic-bezier(0.77,0,0.175,1)</td>
</tr>
<tr>
<td>easeInQuint</td>
<td>cubic-bezier(0.755,0.05,0.855,0.06)</td>
</tr>
<tr>
<td>easeOutQuint</td>
<td>cubic-bezier(0.23,1,0.32,1)</td>
</tr>
<tr>
<td>easeInOutQuint</td>
<td>cubic-bezier(0.86,0,0.07,1)</td>
</tr>
<tr>
<td>easeInExpo</td>
<td>cubic-bezier(0.95,0.05,0.795,0.035)</td>
</tr>
<tr>
<td>easeOutExpo</td>
<td>cubic-bezier(0.19,1,0.22,1)</td>
</tr>
<tr>
<td>easeInOutExpo</td>
<td>cubic-bezier(1,0,0,1)</td>
</tr>
<tr>
<td>easeInCirc</td>
<td>cubic-bezier(0.6,0.04,0.98,0.335)</td>
</tr>
<tr>
<td>easeOutCirc</td>
<td>cubic-bezier(0.075,0.82,0.165,1)</td>
</tr>
<tr>
<td>easeInOutCirc</td>
<td>cubic-bezier(0.785,0.135,0.15,0.86)</td>
</tr>
<tr>
<td>easeInBack</td>
<td>cubic-bezier(0.6,-0.28,0.735,0.045)</td>
</tr>
<tr>
<td>easeOutBack</td>
<td>cubic-bezier(0.175,0.885,0.32,1.275)</td>
</tr>
<tr>
<td>easeInOutBack</td>
<td>cubic-bezier(0.68,-0.55,0.265,1.55)</td>
</tr>
</tbody></table>
<h1 id="負值延遲時間"><a href="#負值延遲時間" class="headerlink" title="負值延遲時間"></a>負值延遲時間</h1><p>transition-delay 如果為負數時，會與 transition-duration 相減，得到新的轉場時間。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* 轉場會變成 持續時間只有 1s，如果transition-delay -2s，那麼轉場持續時間會是 0，不會有持續時間的效果  */</span></span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">transition-delay</span>: -<span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="轉場與回場"><a href="#轉場與回場" class="headerlink" title="轉場與回場"></a>轉場與回場</h1><p>若將轉場屬性設定在初始狀態，那麼具有<strong>轉場</strong>與<strong>回場</strong>雙重效果，但若將轉場屬性設定在觸發狀態，那麼只會有轉場效果，而不會有回場效果。例如將 transition-delay 設定在觸發狀態，此時延遲時間只有轉場效果，回場時就沒有延遲時間。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.2s</span> background-color linear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 變形</title>
    <url>/2020/09/07/lesson-css-07.transform/</url>
    <content><![CDATA[<h1 id="變形-transform"><a href="#變形-transform" class="headerlink" title="變形 - transform"></a>變形 - transform</h1><p>transform（變形）、translate（平移）、transition（轉場） 是剛學習 CSS 常搞混的三個名詞，transform 是改變盒子的形狀與行為，translate 是 transform 的其中一個函式，而 transition 指的是樣式屬性兩種狀態的變化。變形（transform）的出現在於早期網頁設計只有四四方方的矩形所組合成版型，而隨著人們的想法，開始有人覺得如果不再是矩形呢？有了想打破這矩形的限制，transform 就這樣誕生了。</p>
<blockquote>
<p>變形有四個函式，分別是平移（translate）、縮放（scale）、旋轉（rotate）、歪斜（skew）。</p>
</blockquote>
<a id="more"></a>

<h1 id="座標系統"><a href="#座標系統" class="headerlink" title="座標系統"></a>座標系統</h1><p>CSS 世界使用的座標系統是「笛卡爾座標系統」，沒錯，就是那位「我思，故我在」的笛卡爾。X 軸跟我們認知是一樣，往右為正值，往左為負值；但有點不同的是，一般我們的認知是 Y 軸 的正值應該是往上，但是對於 CSS 而言，不管是定位（position）、變形（transform）又或是使用文字陰影（text-shadow）、盒陰影（box-shadow）， Y 的正值是相反，也就是往下。而最後的 Z 軸，就如同定位的 z-index，朝著使用者是數值是越大，遠離使用者為數值越小。</p>
<blockquote>
<p>X 軸（右正、左負），Y 軸（下正、上負），Z 軸（朝向使用者數值越大、遠離使用者數值越小）</p>
</blockquote>
<img data-src="/images/css/css-transform-01.png" width="700">

<h1 id="球面系統"><a href="#球面系統" class="headerlink" title="球面系統"></a>球面系統</h1><p>其次，CSS 變形中旋轉（rotate）使用的是球面系統（spherical system）。可以想成每個軸位方向如同一根棍子插入球體時，此時球體可以轉動的方向。</p>
<blockquote>
<p>X 軸（前後翻轉）、Y 軸（左右翻轉）、Z 軸（平面旋轉）</p>
</blockquote>
<img data-src="/images/css/css-transform-02.png" width="700">

<h1 id="重要規則"><a href="#重要規則" class="headerlink" title="重要規則"></a>重要規則</h1><p>變形可以套用多個函式，寫法是之間<strong>不需要逗點分隔</strong>。變形函式的順序會由左至右套用，<strong>順序很重要，它會影響整個變形的結果</strong>。例如先旋轉再做平移，會往旋轉後的角度平移；而先平移再選轉，則是平移後再做旋轉。變形只要任何一個函式不符合語法，就會導致整個變形錯誤被忽略。另外，變形無法對任何行內盒（inline box），必須作用在 block、inline-block、flex-item、grid-item 這些等級盒子上。最後，變形是不會疊加，重寫變形只會讓後方覆寫前方效果，以最後一次變形為主。但這規則卻有個例外，那就是遇到轉場（transition）或動畫（animation），會疊加轉換的效果。</p>
<h1 id="平移-translate"><a href="#平移-translate" class="headerlink" title="平移 - translate"></a>平移 - translate</h1><p>平移可以接受絕對數值或百分比（除了 Z 軸），只有 X、Y 軸接受百分比的設定，它會依據該盒子 width、height 的值為依據，進行百分比的計算。3D 版的 translate <strong>必須要有三個數值</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.translate</span> &#123;</span><br><span class="line">  <span class="comment">/* 可以設定 X、Y 2D 平移 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="comment">/* 可以設定單軸 X 平移 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>);</span><br><span class="line">  <span class="comment">/* 可以設定單軸 Y 平移 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>);</span><br><span class="line">  <span class="comment">/* 也有 3D 版，一定要設定三個數值 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">100px</span>, <span class="number">100px</span>, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="縮放-scale"><a href="#縮放-scale" class="headerlink" title="縮放 - scale"></a>縮放 - scale</h1><p>顧名思義，「縮」就是縮放的縮，「放」就是縮放的放，<strong>倍數縮放</strong>元素的寬、高。3D 版的 scale <strong>必須要有三個數值</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.scale</span> &#123;</span><br><span class="line">  <span class="comment">/* 數值是以倍數顯示 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">/* 若是負數會呈現倒影型態 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(-<span class="number">2</span>);</span><br><span class="line">  <span class="comment">/* 可以設定單軸 X 縮放 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">/* 可以設定單軸 Y 縮放 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 改變原點 */</span></span><br><span class="line">  <span class="comment">/* 預設值為 50% 50%，就是在 box 中心點。如果省略第 2 個值，會視為 center (50%)  */</span></span><br><span class="line">  <span class="comment">/* 數值可以是單位 em、px、%、left、right、top、bottom；center */</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: center center;</span><br><span class="line">  <span class="comment">/* scale3d()設定數值跟 translate3d 一樣要 3 個數值 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="旋轉-rotate"><a href="#旋轉-rotate" class="headerlink" title="旋轉 - rotate"></a>旋轉 - rotate</h1><p>旋轉函式涉及到 3D，是所有變形函式中最不容易理解的函式，因為它並須搭配球體系統以及 trasform-style（選擇 3D 樣式） 與 perspective（透視）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rotate</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="comment">/* 記得要加單位 deg，正為順時針，負為逆時針 */</span></span><br><span class="line">  <span class="comment">/* 可以搭配 transform-style、perspective 屬性作到翻轉透視的效果。 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="comment">/* rotate3D(1, 1, 0, 45deg) 不等於 rotateX(45deg)、rotateY(45deg)、rotateZ(0deg) */</span></span><br><span class="line">  <span class="comment">/* 其實是 rotate3d(300px,300px,300px,45deg)，指旋轉的中心軸會從原點指向右方300px、下方300px，旋轉 45deg */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate3D</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="歪斜-skew"><a href="#歪斜-skew" class="headerlink" title="歪斜 - skew"></a>歪斜 - skew</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.skew</span> &#123;</span><br><span class="line">  <span class="comment">/* 記得要加單位 deg */</span></span><br><span class="line">  <span class="comment">/* 第一個數值為 X 的歪斜角，第二個數值為 Y 的歪斜角 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">45deg</span>, <span class="number">0deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewY</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">transform-origin</span>: center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="原點-transform-origin"><a href="#原點-transform-origin" class="headerlink" title="原點 transform-origin"></a>原點 transform-origin</h1><p>變形大部分的屬性都會有一個原點去支撐該屬性變化的依據，例如旋轉時，原點的初始值為 50%,50%。也就是正中央的位置，因此我們會看到旋轉式依據中心點去做旋轉，我們也可以使用 transform-origin 這個屬性改變原點的位置，讓變形擁有更多變化性。它由水平方向、垂直方向兩個值組成，預設為 50%,50%（center,center），也可以使用關鍵字 left、right、center、bottom、top 去組合，若是以百分比則是以元素尺寸的基準去計算。最後注意的是，<strong>translate（平移）沒有所謂的原點</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transform-origin</span> &#123;</span><br><span class="line">  <span class="comment">/* 改變原點 */</span></span><br><span class="line">  <span class="comment">/* 預設值為 50% 50%，就是在 box 中心點。如果省略第 2 個值，會視為 center (50%)  */</span></span><br><span class="line">  <span class="comment">/* 數值可以是單位 em、px、%、left、right、top、bottom；center */</span></span><br><span class="line">  <span class="attribute">transform-origin</span>: center center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 定位</title>
    <url>/2020/08/30/lesson-css-06.position/</url>
    <content><![CDATA[<h1 id="定位-position"><a href="#定位-position" class="headerlink" title="定位 - position"></a>定位 - position</h1><p>定位（position）在 CSS 扮演了指定元素盒在視埠（瀏覽器視窗）的某個位置，它會根據某個元素或是父元素為基準而進行偏移。常用的定位分為相對定位（relative）、絕對定位（absolute）以及固定定位（fixed）。其中，<strong>相對定位、絕對定位之間的關係，是剛學 CSS 必須要了解的重點</strong>，也就是它們在元素中所扮演的腳色，尤其是以父元素為基準時兩者關係所產生的偏移。定位有著別人沒有的特性，當元素進行定位後，元素會升至「定位層」（position-level），它是比正常流向（normal-flow）與浮動層（float-level）還高的 z 軸層級（z-index）。</p>
<a id="more"></a>

<h1 id="西天取經"><a href="#西天取經" class="headerlink" title="西天取經"></a>西天取經</h1><p>以西遊記舉例，唐僧帶領了師徒三人及白龍馬前往西天取經，遭逢九九八十一難關…，我們現在假設父元素是唐僧，子元素分別是會七十二變的悟空、好色諂媚愛搞分化的八戒、無聲努力辛勤的沙僧以及偶爾串場的白龍馬，我們將它們全部轉型為 inline-block 橫向流動排列，目前取經團子成員都乖乖在唐僧管理下正常流向排列著。</p>
<img data-src="/images/css/css-position-01.png" width="700">

<h1 id="相對定位-relative"><a href="#相對定位-relative" class="headerlink" title="相對定位 - relative"></a>相對定位 - relative</h1><p>此時，諂媚愛分化團隊的八戒使用了相對定位 position:relative，在瀏覽器的視覺上並未有任何改變，但其實八戒已經進入定位層，八戒還使用了偏移（top、bottom、left、right）會在團隊之間遊說不利團隊的話語，在西遊記裡，唐僧對八戒非常容忍，說容忍還是唐僧也愛聽諂媚的話？不會將其趕出團隊，我們發現八戒<strong>原本的位置會被保留空下</strong>，後方的沙僧、白馬並不會遞補上去，沒人敢挑戰二師兄的位置。這也讓我們知道相對定位並不會讓元素原本的位置脫離正常流向，就像八戒空出的位置一樣。</p>
<img data-src="/images/css/css-position-02.png" width="700">

<h1 id="絕對定位-absolute"><a href="#絕對定位-absolute" class="headerlink" title="絕對定位 - absolute"></a>絕對定位 - absolute</h1><p>大師兄孫悟空，師承菩提老祖習成七十二變，偷吃王母娘娘蟠桃、喝壽酒身體變成刀槍不入，又在太上老君煉金爐練成能看穿妖魔的「火眼金睛」，在團隊裡面衝鋒陷陣戰力堪稱第一。八戒的挑撥是非，讓唐僧與悟空的關係好幾次讓團隊陷入危機，悟空氣到使用了絕對定位 position:absolute，下圖可以看到悟空也進入的定位層（腳踏觔斗雲原地起飛），我們也可以看到八戒一心想取代大師兄的位置，此時八戒在悟空的底下，也就是悟空原本的位置，悟空後方的師弟們都向前遞補了，這也讓我們知道了絕對定位的元素會脫離正常流向，後方元素會往前遞補。</p>
<img data-src="/images/css/css-position-03.png" width="700">

<p>若是八戒也如同上方設定了 position:relative，我們會更清楚看見八戒想取代悟空的野心，這是因為八戒是後方元素的關係，當悟空、八戒兩者都進入定位層，八戒會覆蓋悟空。</p>
<img data-src="/images/css/css-position-04.png" width="700">

<p>劇情往下走，被師父誤會的悟空，內心百感交集，心想：「遇到妖怪我來打，Boss 太強師傅被抓找救兵也是靠我的關係，現在師傅盡聽信老豬的廢話，沒把我放在心上」，一氣之下使用了偏移 top:0、left:0，搭上觔斗雲一個跟斗翻了十萬八千里回到了花果山（瀏覽器左上角位置），悟空徹底離開了團隊（唐僧範圍），尋找到最後的位置－花果山。</p>
<img data-src="/images/css/css-position-05.png" width="700">

<h1 id="唐僧的緊箍咒"><a href="#唐僧的緊箍咒" class="headerlink" title="唐僧的緊箍咒"></a>唐僧的緊箍咒</h1><p>這種結果不是我們想看到的結局，那有甚麼辦法讓大師兄悟空繼續留在西天取經團隊呢？有的！那就是觀音姐姐給唐僧的「緊箍咒」，即是唐僧使用了 position:relative，那麼悟空又會回到團隊裡面，即使悟空使用了 top、bottom、left、right 位移，也會以唐僧為基準點偏移。最後我們得到了一個結論，<strong>相對定位常會讓父元素變成子元素的一個定位點，子元素可以依據這個定位點進行絕對定位的偏移，若父元素沒有任何定位點（relative、absolute），則會繼續往外尋找直到瀏覽器為定位點</strong>。</p>
<img data-src="/images/css/css-position-06.png" width="700">

<h1 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 - fixed"></a>固定定位 - fixed</h1><p>position:fixed，固定定位可以說定位裡面最愛刷存在感的傢伙，它就像穿著寬鬆背心愛秀肌肉的猛男，希望成為大眾目光焦點，所以捲軸上下移動是無法脫離這位自戀狂，它就會像醒目的廣告看板固定在一個位置。通常，固定定位只有一個基準點位置，那就是以瀏覽器視窗為偏移基準點，但…若遇到了父元素有 transform 屬性結果就不同了。結論：<strong>絕對定位、固定定位它們都會讓元素脫離正常流向</strong>。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 浮動</title>
    <url>/2020/08/29/lesson-css-05.float/</url>
    <content><![CDATA[<h1 id="浮動-float"><a href="#浮動-float" class="headerlink" title="浮動 - float"></a>浮動 - float</h1><p>浮動（float）屬性的初衷是希望用來設計「文繞圖」，但是，技術始終來自創意，網頁設計師天馬行空的想法，讓 float 屬性有了新的出路，設計師發現原來浮動厲害的很，可以用來佈局設計版型，也因此一股「浮動流」旋風式颳起，在彈性盒（flex box）穩定前，浮動是排版布局的好幫手。</p>
<a id="more"></a>

<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul>
<li>浮動元素會影響排版，它會進入浮動層，後方元素的區塊部分會顯示在它的下方，而內容會圍繞著浮動元素。</li>
<li>有可能會造成父元素高度崩塌。</li>
<li>只有左邊或右邊的設定，沒有中間。</li>
<li>具有內容包覆性，並且讓元素區塊化（block-level）。</li>
<li>BFC（Block formatting context）家族之一。</li>
</ul>
<h1 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 浮動 */</span></span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="comment">/* right */</span></span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 清除浮動 */</span></span><br><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line">  <span class="comment">/* left、right */</span></span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 盒模型</title>
    <url>/2020/08/29/lesson-css-04.box-model/</url>
    <content><![CDATA[<h1 id="盒模型-Box-Model"><a href="#盒模型-Box-Model" class="headerlink" title="盒模型 - Box Model"></a>盒模型 - Box Model</h1><p>CSS 在視覺的呈現是創意無限，就我所知，沒有一本書可以涵蓋介紹完他的屬性與效果間的組合，在這些組合技上，CSS 有時是很容易接近的朋友，但有時會鬧鬧脾氣，需要一段時間了解他。而本篇主題盒模型（Box-Model）的是其中一。</p>
<p>在 CSS 的世界裡，是由各式各樣的盒子組成，而這些盒子指的是網頁最基礎的 HTML 元素，也就是說，當我們建立一個 HTML 元素其實等於建立一個 CSS 盒子，一個矩形的盒子，他通常被稱為元素盒（element box）。每個元素盒的中心是內容區域（content area），也就是放文字、圖片的區域，內容區域的周圍還有內距（padding）、邊框（border）、外距（margin），由這些屬性來形成盒模型。</p>
<a id="more"></a>

<img data-src="/images/css/css-box-model.png" width="700">

<p>其中，這些屬性值得注意的是，他們都是選擇性的，內距（padding）的背景（顏色、重複圖片）預設是可以顯示在內距之內，他決定內容區域（content area）與邊框（border）之間的留白。外距（margin）他一定是透明，但可以顯示父元素的背景，也就是盒子與盒子之間的距離。內距無法使用負數，外距可以使用複數。邊框沒有指定顏色，會自動渲染內容區的前景色，也就是 color，邊框也是不能有負值。</p>
<h1 id="基礎盒"><a href="#基礎盒" class="headerlink" title="基礎盒"></a>基礎盒</h1><p>盒模型可以由兩個基本盒子說起，區塊盒（block-level box）、行內盒（inline box）。這兩個盒子型態是 CSS 世界的大眾居民，大部分元素都是這兩種型態，最經典的範例各自代表為 div、span，當我們建立 div 元素等同建立一個區塊盒，建立 span 則是行內盒，概念如此。</p>
<h1 id="區塊盒-block-box"><a href="#區塊盒-block-box" class="headerlink" title="區塊盒 - block box"></a>區塊盒 - block box</h1><p>區塊盒這個居民是 CSS 世界的地主，他們掌控了土地空間的霸權，所以當他們出現，正常流向由左至右的絕對空間（前、後換行），也就是整塊土地都會完全被他們佔有！區塊盒在正常流向裡會垂直堆疊。若有垂直外距有重疊時，則較大的外距會吃掉較小的外距。區塊盒的盒屬性相關設定都可以正常作用。</p>
<blockquote>
<p>區塊盒例子：div、h1、p、ul、li、table 等等。</p>
</blockquote>
<h1 id="行內盒-inline-box"><a href="#行內盒-inline-box" class="headerlink" title="行內盒 - inline box"></a>行內盒 - inline box</h1><p>行內盒是一般居民，他們是被地主奴役的居民，只能擁有一小塊、一小塊的空間（寬、高只能隨著內容改變，也就是無法設定寬、高）。這些行內居民必須一個一個由左至右乖乖排列著，一般情況下，他們是脫離不了地主的控制。除非…他們有勇氣革命，獨立起來定位自己，讓自己進化成區塊級。</p>
<blockquote>
<p>行內盒例子：span、a、em 等等。</p>
</blockquote>
<h1 id="行內區塊盒-inline-block-box"><a href="#行內區塊盒-inline-block-box" class="headerlink" title="行內區塊盒 - inline-block box"></a>行內區塊盒 - inline-block box</h1><p>行內區塊盒（Inline-Block Box），他是介於居民與地主的角色，他的外在行為是行內居民，也就是會像居民乖乖排列，但內在行為卻是區塊地主，區塊盒的盒屬性相關設定因為他的內在行為關係，都可以正常作用。<br>那麼，最後，誰才是 CSS 世界掌握最多資源的超級大地主？答案呼之欲出。</p>
<h1 id="誰才是超級大地主？"><a href="#誰才是超級大地主？" class="headerlink" title="誰才是超級大地主？"></a>誰才是超級大地主？</h1><p>超級大地主指的是初始容器區塊（initial containing block），body 只算是大地主，隱藏版的超級大地主是根元素，也就是 body 的上層 html 元素，html 元素建立的是初始容器區塊，而初始容器區塊是由瀏覽器視埠（viewport）決定本身的尺寸。這也是為甚麼 body 的高度百分比無效化，他被 html 超級大地主控制著。</p>
<h1 id="Margin、Padding、Border"><a href="#Margin、Padding、Border" class="headerlink" title="Margin、Padding、Border"></a>Margin、Padding、Border</h1><ul>
<li>外距、內距若設定百分比（如果有特殊需求），會根據父元素的寬度來計算，即便是上下外距、內距的百分比也是如此，而不是高度喔。</li>
<li>外距可以負數，內距不可以負數。</li>
<li>外距重疊現象指兩區塊外距發生垂直時，大外距會吃掉小外距，而不是兩者相加；左右外距並不會發生重疊。</li>
<li>內距預設會有背景圖渲染。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* margin 可為負值、padding 沒有 */</span></span><br><span class="line">  <span class="comment">/* margin-top、margin-right、margin-bottom、margin-left */</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">/* top、right、bottom、left*/</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 第一個數字為上下外距，第二個數字為左右外距 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 區塊置中，區塊元素一定要設定寬度 */</span></span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* padding-top、padding-right、padding-bottom、padding-left */</span></span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 邊框 */</span></span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    dotted  一組方格點，會依照邊框 width 的寬度改變方格的大小及間距，如果邊框是 2px，那麼方格是 2px 且每個點之間有 2px 的間距。</span></span><br><span class="line"><span class="comment">    dashed  一組短線</span></span><br><span class="line"><span class="comment">    double  兩條實線 （border-width 屬性值是兩條線的總和）</span></span><br><span class="line"><span class="comment">    groove  看起來像刻入頁面</span></span><br><span class="line"><span class="comment">    ridge   看起來像凸出頁面</span></span><br><span class="line"><span class="comment">    inset   看起來像嵌入頁面</span></span><br><span class="line"><span class="comment">    outset  看起來像浮雕</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    border-top-style</span></span><br><span class="line"><span class="comment">    border-right-style</span></span><br><span class="line"><span class="comment">    border-bottom-style</span></span><br><span class="line"><span class="comment">    border-left-style</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    border-top-color</span></span><br><span class="line"><span class="comment">    border-right-color</span></span><br><span class="line"><span class="comment">    border-bottom-color</span></span><br><span class="line"><span class="comment">    border-left-color</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="comment">/* 縮寫 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="comment">/* 左上、右上、右下、左下 的圓角*/</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 盒子陰影 */</span></span><br><span class="line">  <span class="comment">/* 水平(+右-左)、垂直(+下-上)、模糊半徑(0 或+不能-)、延展性(+為擴展-為內縮)、顏色、inset(內陰影) */</span></span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="display"><a href="#display" class="headerlink" title="display"></a>display</h1><p>display 屬性可以替盒子進行轉型態的設定，</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* inline 轉為 inline-block */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* inline 轉為 block */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* block 轉為 inline-block */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>display:contents</li>
</ul>
<p>作用在元素上時，display:contents 會將元素從頁面格式化移除，將自身的子元素移到自身所在的層級。<br>以下例子會將 ul 視覺格式化，就像從來不曾存在過一般，不只邊框消失，ul 周圍的內容的上下外距也一同消失。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  ul &#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    display: contents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  li &#123;</span><br><span class="line">    border: 1px solid gray;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>link1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>link2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>link3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Box-sizing"><a href="#Box-sizing" class="headerlink" title="Box-sizing"></a>Box-sizing</h1><p>可以重新定義 Box 寬度的計算方式。時下流行將此屬性值設定為 border-box，也就是 padding、border 會被計算在 width 裡面，這樣在排版時，只要把焦點放在處理 margin。</p>
<h1 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h1><p>如果對盒子設定高度 height，內容如果超過高度，則會產生內容溢出，一般頁面元素的高度通常不需要設定，會隨著內容長高。</p>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>學習資源</title>
    <url>/2020/08/29/resource-learn/</url>
    <content><![CDATA[<h3 id="學習資源"><a href="#學習資源" class="headerlink" title="學習資源"></a>學習資源</h3><ul>
<li>無暇的程式碼 JavaScript <a href="https://github.com/AllJointTW/clean-code-javascript">Github</a></li>
<li>網頁動畫大全 <a href="https://github.com/sergey-pimenov/awesome-web-animation">awesome-web-animation</a></li>
<li>一行 JavaScript 處理陣列、日期、數字、DOM 等等 <a href="https://1loc.dev/">前往</a>、<a href="https://github.com/phuoc-ng/1loc">Github</a></li>
<li>一行 CSS Layouts <a href="http://1linelayouts.glitch.me/?fbclid=IwAR2HAWUL1DYbaYLw2T9wQNcvTUEqQ0mZICjCPj9CgUd3y0f-tO8skAFNiTM">前往</a></li>
<li>一個 Div 做出來的 CSS 物件 <a href="https://a.singlediv.com/">Single Div</a></li>
<li>HEAD 大全 <a href="https://htmlhead.dev/">前往</a>、<a href="https://github.com/joshbuchea/HEAD">Github</a></li>
<li>從 ES6 開始的 JavaScript 學習生活<a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/">前往</a></li>
<li>JavaScript 編程精解中文第三版<a href="https://wizardforcel.gitbooks.io/eloquent-js-3e/content/">前往</a></li>
<li>新手入門 freecodecamp<a href="https://www.freecodecamp.org/">前往</a></li>
</ul>
<h3 id="程式遊戲"><a href="#程式遊戲" class="headerlink" title="程式遊戲"></a>程式遊戲</h3><ul>
<li>CODE COMBAT<a href="https://codecombat.com/home">前往</a></li>
</ul>
]]></content>
      <categories>
        <category>學習資源</category>
      </categories>
  </entry>
  <entry>
    <title>設計常用工具及網站</title>
    <url>/2020/08/29/resource-normal-tools/</url>
    <content><![CDATA[<h3 id="截圖"><a href="#截圖" class="headerlink" title="截圖"></a>截圖</h3><ul>
<li><p><a href="https://www.playpcesor.com/2014/02/sharex.html">ShareX</a></p>
<p>截圖工具，截圖後能自動上傳雲端硬碟、加浮水印，也能錄製 GIF</p>
</li>
</ul>
<h3 id="秀圖"><a href="#秀圖" class="headerlink" title="秀圖"></a>秀圖</h3><ul>
<li><a href="https://steachs.com/archives/32681">軟體說明</a></li>
<li><a href="https://www.cherubicsoft.com/en/projects/sagethumbs#.VwKhKUeNjDA">SageThumbs</a></li>
</ul>
<p>檔案總管顯示 Photoshop 檔縮圖、一鍵轉 JPG、PNG、GIF、BMP</p>
<h3 id="套版"><a href="#套版" class="headerlink" title="套版"></a>套版</h3><ul>
<li><a href="https://mobirise.com/">Mobirise</a></li>
</ul>
<h3 id="版型"><a href="#版型" class="headerlink" title="版型"></a>版型</h3><ul>
<li><a href="https://www.webdesignclip.com/">日本風版型(一)</a></li>
<li><a href="https://responsive-jp.com/">日本風版型(二)</a></li>
</ul>
<h3 id="LOGO"><a href="#LOGO" class="headerlink" title="LOGO"></a>LOGO</h3><ul>
<li><a href="https://www.launchaco.com/logo">LOGO 產生器</a></li>
</ul>
<h3 id="圖庫"><a href="#圖庫" class="headerlink" title="圖庫"></a>圖庫</h3><ul>
<li><a href="https://www.deviantart.com/">Deviantart</a></li>
<li><a href="https://pixabay.com/">Pixabay</a></li>
<li><a href="https://unsplash.com/">Unsplash</a></li>
<li><a href="http://www.morguefile.com/">Morguefile</a></li>
<li><a href="https://www.pexels.com/">Pexels</a></li>
<li><a href="http://tw.freeimages.com/">Freeimages</a></li>
<li><a href="http://www.stockvault.net/">Stockvault</a></li>
<li><a href="http://www.freedigitalphotos.net/">Freedigital</a></li>
<li><a href="http://www.dreamstime.com/">Dreamstime/</a></li>
</ul>
]]></content>
      <categories>
        <category>設計常用工具及網站</category>
      </categories>
  </entry>
  <entry>
    <title>網頁設計證照資源</title>
    <url>/2020/08/29/resource-web-license/</url>
    <content><![CDATA[<h3 id="網頁設計乙、丙級素材"><a href="#網頁設計乙、丙級素材" class="headerlink" title="網頁設計乙、丙級素材"></a>網頁設計乙、丙級素材</h3><ul>
<li><a href="https://techbank.wdasec.gov.tw/owInform/TestReferData.aspx#17300">技檢中心乙丙級題目和素材</a></li>
</ul>
<h3 id="網頁設計乙級"><a href="#網頁設計乙級" class="headerlink" title="網頁設計乙級"></a>網頁設計乙級</h3><ul>
<li><a href="http://onlinetest2.slhs.tp.edu.tw/bestcontent.asp?examid=bests">學科測驗</a></li>
<li><a href="https://bquiz.kento520.tw/">術科解題</a></li>
<li><a href="https://bquiz.mackliu.com/">術科解題</a></li>
<li><a href="https://reurl.cc/R10Ex6">術科解題</a></li>
</ul>
<h3 id="網頁設計丙級"><a href="#網頁設計丙級" class="headerlink" title="網頁設計丙級"></a>網頁設計丙級</h3><ul>
<li><a href="http://onlinetest1-5.slhs.tp.edu.tw/bestcontent.asp?examid=t17300">學科測驗</a></li>
</ul>
]]></content>
      <categories>
        <category>網頁設計證照資源</category>
      </categories>
  </entry>
  <entry>
    <title>Coding 資源</title>
    <url>/2020/08/29/resource-coding/</url>
    <content><![CDATA[<h3 id="套件"><a href="#套件" class="headerlink" title="套件"></a>套件</h3><ul>
<li><a href="https://www.highcharts.com/">HighCharts</a> 圖表</li>
<li><a href="https://vestride.github.io/Shuffle/">Shuffle</a> 響應式圖片對齊排版</li>
<li><a href="https://github.com/validatorjs/validator.js">Validator</a> 驗證表單</li>
<li><a href="https://fontawesome.com/">fontawesome</a> 文字型的 icon</li>
</ul>
<h3 id="動畫"><a href="#動畫" class="headerlink" title="動畫"></a>動畫</h3><ul>
<li><a href="https://animate.style/">Animate.css</a></li>
<li><a href="https://www.delac.io/wow/">WOW.js</a></li>
<li><a href="https://elrumordelaluz.github.io/csshake/">CSShake</a></li>
<li><a href="https://loading.io/">Loading.io</a></li>
<li><a href="https://animejs.com/">Anime.js</a></li>
<li><a href="https://css-doodle.com/">CSS-doodle</a></li>
<li><a href="https://maxwellito.github.io/vivus/">vivus</a></li>
<li><a href="https://sarcadass.github.io/granim.js/">Granim.js</a></li>
<li><a href="https://bennettfeely.com/ztext/">ztext.js</a></li>
<li><a href="https://greensock.com/tweenmax/">greensock</a></li>
</ul>
<h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><ul>
<li><a href="https://easings.net/">easings</a></li>
<li><a href="https://cubic-bezier.com/#.17,.67,.83,.67">cubic-bezier</a></li>
<li><a href="https://matthewlein.com/tools/ceaser">調整轉場速率</a></li>
</ul>
<a id="more"></a>

<h3 id="一頁式"><a href="#一頁式" class="headerlink" title="一頁式"></a>一頁式</h3><ul>
<li><a href="https://alvarotrigo.com/fullPage/">FullPage</a></li>
</ul>
<h3 id="視差"><a href="#視差" class="headerlink" title="視差"></a>視差</h3><ul>
<li><a href="https://dixonandmoe.com/rellax/">Dixonand moe</a></li>
</ul>
<h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><ul>
<li><a href="https://collectui.com/">Collect UI</a></li>
<li><a href="https://bootswatch.com/">bootswatch</a></li>
<li><a href="https://useanimations.com/?fbclid=IwAR2n6GIn9IHyt4HMv_SzWBDx-T78Vzkl5FpyHse7E1LUkd9XfFFVP6I0TJw">介面 ICON SVG 動畫</a></li>
</ul>
<h2 id="CSS-Frame"><a href="#CSS-Frame" class="headerlink" title="CSS Frame"></a>CSS Frame</h2><ul>
<li><a href="https://getbootstrap.com/">Bootstrap</a></li>
<li><a href="https://materializecss.com/">Materialize</a></li>
</ul>
<h3 id="字型"><a href="#字型" class="headerlink" title="字型"></a>字型</h3><ul>
<li><a href="https://fonts.google.com/">Google Fonts</a></li>
</ul>
<h3 id="程式碼工具"><a href="#程式碼工具" class="headerlink" title="程式碼工具"></a>程式碼工具</h3><ul>
<li><a href="https://cdnjs.com/">cdnjS</a> cdn 提供</li>
<li><a href="https://j11y.io/jquery/">jQuery source viewer</a> jQuery source</li>
<li><a href="https://regex101.com/">RegEx</a> 正則表達式</li>
<li><a href="https://regexper.com/">Regexper</a> 正則表達式</li>
</ul>
<h3 id="線上程式碼"><a href="#線上程式碼" class="headerlink" title="線上程式碼"></a>線上程式碼</h3><ul>
<li><a href="https://codepen.io/">CODEPEN</a> 程式碼測試、程式創意來源之地。</li>
<li><a href="https://jsbin.com/?html,css,js,output">JSBIN</a> 程式碼測試。</li>
</ul>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ul>
<li><p><a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">大全</a></p>
</li>
<li><p><a href="https://zzetao.github.io/awesome-github-profile/">展示</a></p>
</li>
<li><p><a href="https://github.com/zzetao/awesome-github-profile">展示</a></p>
</li>
<li><p><a href="https://github.com/kautukkundan/Awesome-Profile-README-templates">展示</a></p>
</li>
<li><p><a href="https://github.com/rahuldkjain/github-profile-readme-generator">產生器</a></p>
</li>
<li><p><a href="https://github.com/anuraghazra/github-readme-stats">統計資料</a></p>
</li>
<li><p><a href="https://github.com/vn7n24fzkq/github-profile-summary-cards">統計資料</a></p>
</li>
<li><p><a href="https://github.com/antonkomarev/github-profile-views-counter">瀏覽次數</a></p>
</li>
</ul>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul>
<li><a href="https://jsonplaceholder.typicode.com/">JSONPlaceholder</a> 線上 JSON，方便 API 串接測試。</li>
</ul>
<h3 id="Favicon"><a href="#Favicon" class="headerlink" title="Favicon"></a>Favicon</h3><ul>
<li><a href="https://realfavicongenerator.net/">各裝置、瀏覽器 Favicon 產生器</a></li>
</ul>
<h3 id="RWD-測試"><a href="#RWD-測試" class="headerlink" title="RWD 測試"></a>RWD 測試</h3><ul>
<li><a href="https://responsively.app/">Responsively</a></li>
</ul>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><ul>
<li><a href="https://hackmd.io/">HackMD</a> Markdown 編輯器。</li>
</ul>
<h3 id="打字"><a href="#打字" class="headerlink" title="打字"></a>打字</h3><ul>
<li><a href="https://10fastfingers.com/typing-test/english">打字練習</a></li>
</ul>
]]></content>
      <categories>
        <category>程式資源</category>
      </categories>
  </entry>
  <entry>
    <title>CSS - 背景</title>
    <url>/2020/08/25/lesson-css-03.background/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* background-color 背景顏色 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#faa</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* background-image 背景圖片 */</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://picsum.photos/100/100/?random=1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* background-repeat 背景重複 */</span></span><br><span class="line">  <span class="comment">/* repeat-x、repeat-y、no-repeat */</span></span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* background-size 背景尺寸 */</span></span><br><span class="line">  <span class="comment">/* contain、cover、數值、百分比 */</span></span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* background-position 背景定位 */</span></span><br><span class="line">  <span class="comment">/* 可使用數值、百分比、left、right、center、top、bottom 關鍵字 */</span></span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="漸層"><a href="#漸層" class="headerlink" title="漸層"></a>漸層</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 線性漸層 */</span></span><br><span class="line"><span class="selector-class">.linear-gradient</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(red, yellow, white);</span><br><span class="line">  <span class="comment">/* 設定角度 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, red, yellow, white);</span><br><span class="line">  <span class="comment">/* 設定漸層站點 */</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right top, #fff <span class="number">0%</span>, lightblue <span class="number">25%</span>, #fff <span class="number">50%</span>, lightblue <span class="number">75%</span>, #fff <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 放射漸層 */</span></span><br><span class="line"><span class="selector-class">.radial-gradient</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">radial-gradient</span>(white, #ffffaa, pink);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 文字</title>
    <url>/2020/08/25/lesson-css-02.text/</url>
    <content><![CDATA[<h1 id="字型"><a href="#字型" class="headerlink" title="字型"></a>字型</h1><p>CSS 常用的字型設定：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* 設定字型家族 */</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft JhengHei&#x27;</span>, Verdana, Geneva, Tahoma, sans-serif;</span><br><span class="line">  <span class="comment">/* 設定字體大小 px、em、rem */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* 設定斜體 */</span></span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="comment">/* 設定粗體 */</span></span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="comment">/* 設定字體都變成大寫，但第一個字較大 */</span></span><br><span class="line">  <span class="attribute">font-variant</span>: small-caps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="單位"><a href="#單位" class="headerlink" title="單位"></a>單位</h1><ul>
<li>px：字型大小以像素為絕對單位。</li>
<li>em：字型大小參考父元素為倍數相對縮放尺寸，例如：父元素外層是 10px，子元素 2em 則是 20px。</li>
<li>rem：相對於根元素 (:root or html) 的文字尺寸，預設是 16px，元素設定 2rem 則是 32px。</li>
</ul>
<h1 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* 設定 inline (包含inline-block)的文字位置，left、right */</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="comment">/*  none、overline、line-througn */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  <span class="comment">/* 文字縮排 */</span></span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="comment">/*  capitalize（每個單字第一個英文字大寫）、lowercase（全小寫）、uppercase（全大寫） */</span></span><br><span class="line">  <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">  <span class="comment">/* 水平、垂直、陰影模糊半徑、顏色，可以設定多重陰影 */</span></span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="comment">/* 英文字母或中文字的間隔 */</span></span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="comment">/* 單字間隔，要有空格，中文很難有空格，較適合英文。 */</span></span><br><span class="line">  <span class="attribute">word-spacing</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="comment">/* 文字換行，數字或英文字無空格時會產生不換行超出盒框區域，可用此屬性。 */</span></span><br><span class="line">  <span class="comment">/* break-word 在長單詞或URL地址內部進行換行。 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* break-word（過長的單字會自動折到下一行，可避免一江春水向東流。）*/</span></span><br><span class="line">  <span class="attribute">word-wrap</span>: break-word;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">   normal(預設，以每個瀏覽器喜好不一定相同，通常保留單字全部) </span></span><br><span class="line"><span class="comment">   break-all(允許在單字的字母換行，也就是不一定要完整的單字) </span></span><br><span class="line"><span class="comment">   keep-all(只能在半角空格或連字符處換行) </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">   normal(忽略空白)  </span></span><br><span class="line"><span class="comment">   pre(像pre標籤，保留空白) </span></span><br><span class="line"><span class="comment">   nowrap(不換行，除非有 br，否則不會斷行，會一直顯示超出區塊。) </span></span><br><span class="line"><span class="comment">   pre-wrap(保留空白，但是正常換行) </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">white-space</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h1><p>連結狀態的變化使用了 CSS 的偽類，偽類家族有非常多種，連結這四個須注意其出現的順序。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS資源</title>
    <url>/2020/08/23/resource-css-useful-site/</url>
    <content><![CDATA[<h3 id="漸層"><a href="#漸層" class="headerlink" title="漸層"></a>漸層</h3><ul>
<li><a href="https://uigradients.com/#eXpresso">UI Gradients</a></li>
<li><a href="https://mycolor.space/gradient">Space</a></li>
<li><a href="http://jxnblk.com/shade/">Shade</a></li>
<li><a href="https://gradienthunt.com/">Gradient Hunt</a></li>
<li><a href="https://www.colorzilla.com/gradient-editor/">Colorzilla</a></li>
</ul>
<a id="more"></a>

<h3 id="按鈕"><a href="#按鈕" class="headerlink" title="按鈕"></a>按鈕</h3><ul>
<li><a href="http://bttn.surge.sh/">Button Surge</a></li>
<li><a href="https://www.bestcssbuttongenerator.com/">Best CSS Button</a></li>
</ul>
<h3 id="轉場與動畫"><a href="#轉場與動畫" class="headerlink" title="轉場與動畫"></a>轉場與動畫</h3><ul>
<li>Magic<ul>
<li><a href="https://github.com/miniMAC/magic">官網</a></li>
<li><a href="https://github.com/miniMAC/magic">GitHub</a></li>
</ul>
</li>
<li><a href="https://3d-book-css.netlify.app/">3D Book</a></li>
</ul>
<h3 id="ICON"><a href="#ICON" class="headerlink" title="ICON"></a>ICON</h3><ul>
<li><a href="https://jonsuh.com/hamburgers/">Hamburger 動畫-官網</a></li>
<li><a href="https://github.com/jonsuh/hamburgers">Hamburger 動畫-Github</a></li>
</ul>
<h3 id="語法產生器"><a href="#語法產生器" class="headerlink" title="語法產生器"></a>語法產生器</h3><ul>
<li><a href="https://www.we-shop.net/css3/default.html">We Shop</a></li>
<li><a href="http://css3generator.com/">CSS3 Generator</a></li>
<li><a href="https://www.css3maker.com/index.html">CSS3 Maker</a></li>
<li><a href="https://wweb.dev/resources/css-separator-generator">分隔線產生器</a></li>
</ul>
<h3 id="遮罩路徑"><a href="#遮罩路徑" class="headerlink" title="遮罩路徑"></a>遮罩路徑</h3><ul>
<li><a href="https://www.html.cn/tool/css-clip-path/">Clip Path</a></li>
</ul>
<h3 id="風格"><a href="#風格" class="headerlink" title="風格"></a>風格</h3><ul>
<li><a href="https://nostalgic-css.github.io/NES.css/">8 位元風 CSS</a></li>
<li><a href="https://www.gradientmagic.com/">Gradient Magic</a></li>
</ul>
<h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><ul>
<li><a href="https://static.html.it/app/uploads/blog/layoutgala/index.html">Layout Gala</a></li>
<li><a href="https://www.webdesignrankings.com/resources/csslayoutgenerator/">CSS Layout</a></li>
</ul>
<h3 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h3><ul>
<li><a href="https://colors.eva.design/">Eva Design System</a></li>
</ul>
]]></content>
      <categories>
        <category>CSS資源</category>
      </categories>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2020/08/23/lesson-html/</url>
    <content><![CDATA[<h1 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h1><blockquote>
<p>在網頁裡，每項技術都扮演了一個重要的角色</p>
</blockquote>
<p>指的是 HTML、CSS、JavaScript 三兄弟，若用蓋房子來比喻，三兄弟各有自己執掌的工作，分別為：</p>
<ul>
<li>HTML（結構、內容）：如同蓋房子需要的基礎建材，鋼筋、水泥、門、窗等等。</li>
<li>CSS（樣式、外觀）：如同蓋完房子後的裝潢設計師，打造漂亮的房子。</li>
<li>JavaScript（事件、行為）：如同房子內部設施開關觸發後產生的能源。</li>
</ul>
<a id="more"></a>

<h1 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h1><p>對於 HTML（HyperText Markup Language）而言，它扮演了「結構」的角色。這角色在網頁中，雖是最基礎但卻是很重要的骨幹，如同蓋棟大樓需要的鋼筋、水泥、門、窗的基礎建材，它是網頁的基礎。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html 結構 --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>結構<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="標記"><a href="#標記" class="headerlink" title="標記"></a>標記</h1><p>Markup（標記）是 HTML 的核心，意思是「使用標籤標記內容，產生語義化結構」。標記什麼內容？標記文字、圖片、影音等等，網頁中傳達資訊的媒體元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a 標籤標記了「泰山職訓網頁設計」文字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://wdaweb.github.io/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>泰山職訓網頁設計<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h1><p>元素是由標籤（tag）及標記的內容（content）所組成，它有以下這些特性：</p>
<ul>
<li>不分大小寫，養成使用小寫的習慣。</li>
<li>大部份會有&lt;&gt;起始標籤，&lt;/&gt;結束標籤，之間為標記的內容。</li>
<li>具有屬性與值，屬性之間需要空格。</li>
<li>屬性值不限制用單引號或雙引號，養成使用雙引號的習慣。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/example.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="空元素"><a href="#空元素" class="headerlink" title="空元素"></a>空元素</h1><p>沒有結束標籤的元素，又稱「獨立標籤」、「無結尾標籤」、「空標籤」。<br>常見的空元素有 &lt;meta&gt;、&lt;link&gt;、&lt;br&gt;、&lt;hr&gt;、&lt;img&gt; … 等等。</p>
<!-- ### id 與 class -->

<h1 id="舞台"><a href="#舞台" class="headerlink" title="舞台"></a>舞台</h1><!-- <img data-src="/images/request_response.png" width="500"> -->

<p>若 HTML 是一個舞台，每個元素如同一位演員，瀏覽器在讀取 HTML 這個舞台時，它是由上而下進行解讀，元素會逐一被解讀成一位演員，每位演員有著它要做的基本工作來顯示內容。</p>
<p>「head」 演員像是舞台的後面，標記的是給瀏覽器或搜尋引擎才能看到的資訊，舞台前面的使用者是看不到的。<br>「body」 演員像是舞台的前面，標記的是給使用者欣賞觀看的文字、圖片、影片等等。</p>
<p>此外，還有兩位較為特別的演員，一個是負責外觀的「style」與負責行為的「script」，「style」演員的工作是負責顯示樣式外觀，白話點就是幫演員們化妝，而讀取到最後會遇到「script」演員，我們可以把裡面標記的內容想成一套劇本，告訴演員們該如何表現行為及事件發生時該做甚麼事情。</p>
<blockquote>
<p>記住的是，元素演員得先上場，劇本才能上演好戲，若是劇本先出現，元素演員未上場，等同白念劇本了。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-tw&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- head 紀錄的是給瀏覽器或者是搜尋引擎看的重要資訊，一般瀏覽者無法看到 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;這是我的第一個網頁&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一個網頁<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 本頁使用的 css 樣式外觀，幫網頁化妝　*/</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body 是顯示給瀏覽者觀看的內容，藉由標籤標記的文字、圖片、影片等等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 本頁使用的 js，想成一套劇本</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="語義化"><a href="#語義化" class="headerlink" title="語義化"></a>語義化</h1><p>雖然在排版上，大多數習慣還是用 &lt;div&gt; 來排版，但 HTML5 提供更多語意標籤使用，甚麼是語意標籤？簡單說就是直接給標籤一個好懂的名稱，來表示其結構及意義，例如:</p>
<table>
<thead>
<tr>
<th>標籤名稱</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;header&gt;</td>
<td>定義網頁頁首的區域。</td>
</tr>
<tr>
<td>&lt;nav&gt;</td>
<td>定義網頁導覽區域。</td>
</tr>
<tr>
<td>&lt;footer&gt;</td>
<td>定義網頁頁尾的區域。</td>
</tr>
<tr>
<td>&lt;main&gt;</td>
<td>定義網頁主要內容區域。</td>
</tr>
<tr>
<td>&lt;section&gt;</td>
<td>定義一個區段範圍。</td>
</tr>
<tr>
<td>&lt;aside&gt;</td>
<td>定義一個側邊區域範圍，次要區域。</td>
</tr>
<tr>
<td>&lt;article&gt;</td>
<td>定義文章內容。</td>
</tr>
<tr>
<td>&lt;figure&gt;</td>
<td>定義圖形影像的區塊。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS - 選擇器</title>
    <url>/2020/08/23/lesson-css-01.selectors/</url>
    <content><![CDATA[<h1 id="愛你所擇，擇你所愛"><a href="#愛你所擇，擇你所愛" class="headerlink" title="愛你所擇，擇你所愛"></a>愛你所擇，擇你所愛</h1><p>HTML 負責的是結構，CSS 則是外觀，它是元素的化妝師，負責文件的版型，例如文字、顏色、尺寸、位置、響應式等等。首先登場的即是主角「選擇器」，它是 CSS 世界裡的支柱，如同人類的脊椎支撐了整個身體，我們必須要選擇到目標，才能對元素進行樣式的設計，然而，CSS 選擇器非常多樣貌，認識各種選擇器及使用特性才能夠靈活設計樣式。此外，只要符合 CSS 規範的選擇器，在 jQuery 裡，也能成為$()加工廠的原料產生出 jQuery 物件，選擇到匹配的元素集合，同時也能被 JavaScript 的 querySelector()與 querySelectorAll()方法選擇（與 jQuery 在選擇元素一樣的功能）。</p>
<h1 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h1><p>一個「選擇器」決定選擇的元素目標，連結著大括號「{}」，大括號裡面是屬性、屬性值，以冒號「:」分隔屬性與屬性值，屬性值後面以分號「;」結尾。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">選擇器 &#123;</span><br><span class="line">  屬性: 屬性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="基本選擇器"><a href="#基本選擇器" class="headerlink" title="基本選擇器"></a>基本選擇器</h1><h2 id="元素選擇器"><a href="#元素選擇器" class="headerlink" title="元素選擇器"></a>元素選擇器</h2><p>以元素名稱作為選擇器，又稱為標籤選擇器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="群組選擇器"><a href="#群組選擇器" class="headerlink" title="群組選擇器"></a>群組選擇器</h2><p>選擇器之間以「,」分隔，可以一次選擇指定的選擇對象。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="類別選擇器"><a href="#類別選擇器" class="headerlink" title="類別選擇器"></a>類別選擇器</h2><p>替選擇器取名稱，前面加「.」。此選擇器具有「重覆使用」或「同中求異」的特性，也是使用率最高的選擇器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.txt</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ID-選擇器"><a href="#ID-選擇器" class="headerlink" title="ID 選擇器"></a>ID 選擇器</h2><p>替選擇器取名稱，前面加「#」。此選擇器具有「唯一」的特性，通常被當作區塊的名稱或是 JavaScript 快速獲取 DOM 目標的方式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="admonition note"><p>class、ID 的命名必須以字元開頭，數字不行，之後只允許使用字元、數字、連字 - 符號和底線 _ 符號，且有大小寫之分。可以使用中文命名，就像 JavaScript 變數一樣，但這種作法<strong>不被認同</strong>。</p>
</div>

<h2 id="通用選擇器"><a href="#通用選擇器" class="headerlink" title="通用選擇器"></a>通用選擇器</h2><p>使用 * 作為選擇器，任何類型的元素都會被選取。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="屬性選擇器"><a href="#屬性選擇器" class="headerlink" title="屬性選擇器"></a>屬性選擇器</h2><p>指以 HTML 元素屬性作為選擇器，有許多種選擇方式，如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 以 屬性 + 屬性值 去選擇 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;http://google.com.tw/&quot;</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇 img 元素屬性為 title 的目標 */</span></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇屬性 type=&#x27;text&#x27; 的目標 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;text&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇屬性有 kaifu 單字，根據屬性值中眾多詞中某個詞進行選擇（以空白分隔決定該詞） */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[class~=<span class="string">&#x27;kaifu&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇 href 的屬性值起始字串為 http:// 的目標  */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;http://&quot;</span>]</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選取 href 的屬性值結尾字串為 .pdf 的對象  */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$=<span class="string">&#x27;.pdf&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選取 img 所有 src 屬性值裡面包含單字 kaifu 的對象; */</span></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src*=<span class="string">&#x27;kaifu&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選取所有圖片裡面有 figure- 的圖片，例如:figure-01.jpg、figure-02.jpg */</span></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-attr">[src|=<span class="string">&#x27;figure&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* css */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="複合選擇器"><a href="#複合選擇器" class="headerlink" title="複合選擇器"></a>複合選擇器</h1><h2 id="子代選擇器"><a href="#子代選擇器" class="headerlink" title="子代選擇器"></a>子代選擇器</h2><p>選擇器之間以「&gt;」分隔，選擇到兒子，也就是只選擇到下一層，第三層不會被選擇，常與後代選擇器搞混。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="後代選擇器"><a href="#後代選擇器" class="headerlink" title="後代選擇器"></a>後代選擇器</h2><p>選擇器之間以「空白」分隔，可選擇到子孫們，也就是起始選擇目標之後的後代都會被選擇到，使用率很高的選擇器。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="同層相鄰選擇器"><a href="#同層相鄰選擇器" class="headerlink" title="同層相鄰選擇器"></a>同層相鄰選擇器</h2><p>選擇器之間以「+」分隔，又被稱為兄弟選擇器，指選擇到與自己同一層隔壁的元素，所謂的隔壁是指 HTML 文件下方的意思。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="同全體選擇器"><a href="#同全體選擇器" class="headerlink" title="同全體選擇器"></a>同全體選擇器</h2><p>選擇器之間以「+」分隔，又被稱為兄弟選擇器，指選擇到與自己同一層隔壁的弟元素，所謂的隔壁是指 HTML 文件下方的意思。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="偽類選擇器"><a href="#偽類選擇器" class="headerlink" title="偽類選擇器"></a>偽類選擇器</h1><p>偽類（虛擬類別）（Pseudo-class Selector）本質都與狀態、結構有關，也就是參照到文件的標記結構或是當元素處於某個狀態觸發。偽類有一個需要特別注意的地方：偽類是指向它們本身附屬的元素，沒有任何例外，別誤以為參照的是後代元素。早期偽類與偽元素都是以單冒號（:）表示，CSS3 開始區分它們，偽類依舊是單冒號（:），偽元素則是雙冒號（::），撰寫樣式時務必遵守規範。</p>
<h2 id="連結狀態"><a href="#連結狀態" class="headerlink" title="連結狀態"></a>連結狀態</h2><p>這種偽類出現的順序是必須遵守的喔，值得注意的是一般 a:link 很難在網站樣式中出現，通常都會直接以 a 作為選擇器，而不會是 a:link，差別在於前者是選擇到連結時的狀態，後者則是選擇到 a 本身自己，這樣的寫法好處就是可以少寫幾個字。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/* LoVe f HAte */</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="介面狀態"><a href="#介面狀態" class="headerlink" title="介面狀態"></a>介面狀態</h2><p>介面狀態非常多種，最常被使用的是:checked、:focus，在做表單驗證時會使用到:valid、:invalid，表單取值:required、:read-only，表單使用狀態:enable、:disable，應用隨著設計調整即可。偽類在 CSS 會持續增加，請參照<a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/Pseudo-classes">MDN</a>。</p>
<table>
<thead>
<tr>
<th>名稱</th>
<th>說明</th>
</tr>
</thead>
<tbody><tr>
<td>:checked</td>
<td>選擇被選取的 radio button 或 checkbox，包含使用者選擇或文件本身的預設選取</td>
</tr>
<tr>
<td>:focus</td>
<td>選擇成為焦點的元素，不只有表單，可以為任何元素（使用 html 屬性 tabindex）</td>
</tr>
<tr>
<td>:empty</td>
<td>選擇內容為空的元素</td>
</tr>
<tr>
<td>:enabled</td>
<td>選擇啟用的使用這介面元素（如表單元素），也就是能夠接受輸入的元素。</td>
</tr>
<tr>
<td>:disable</td>
<td>選擇停用的使用這介面元素（如表單元素），也就是無法接受輸入的元素</td>
</tr>
<tr>
<td>:required</td>
<td>選擇必須要設定數值的使用者輸入元素</td>
</tr>
<tr>
<td>:read-only</td>
<td>選擇無法編輯的使用者輸入元素</td>
</tr>
<tr>
<td>:defalut</td>
<td>選擇預設選取的 radio button、checkbox 或 option</td>
</tr>
<tr>
<td>:valid</td>
<td>選擇滿足本身資料驗證條件的使用者輸入元素</td>
</tr>
<tr>
<td>:invalid</td>
<td>選擇不滿足本身資料驗證條件的使用者輸入元素</td>
</tr>
<tr>
<td>:read-write</td>
<td>選擇能夠編輯的使用輸入元素</td>
</tr>
<tr>
<td>:in-range</td>
<td>選擇使用者輸入的值介於最小值與最大值的元素</td>
</tr>
<tr>
<td>:out-of-range</td>
<td>選擇使用者輸入的值超出最大值與最小值範圍之外的元素</td>
</tr>
<tr>
<td>:optional</td>
<td>選擇不一定需要設定數值的使用者輸入元素</td>
</tr>
<tr>
<td>:indetermiate</td>
<td>表示不是選取，也不是未選取的 radio button 或 checkbox，這個狀態只能透過 DOM 腳本設定，無法由使用者輸入設定</td>
</tr>
</tbody></table>
<h2 id="結構元素"><a href="#結構元素" class="headerlink" title="結構元素"></a>結構元素</h2><p>根據結構類型來選擇元素，分為 child 與 type 兩組。</p>
<h3 id="first-child"><a href="#first-child" class="headerlink" title=":first-child"></a>:first-child</h3><p>選擇第一個子元素，等同 nth-child(1)，必須注意，這種選擇方式，第一個子元素必定是你要指定的選擇器。以下範例是正確的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#child</span> <span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>若是這樣就不行，你覺得自己已經選擇到第一個 div 子元素，但不給過，因為選擇的子元素必定要為這裡面真正的第一個子元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#child</span> <span class="selector-tag">div</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="last-child"><a href="#last-child" class="headerlink" title=":last-child"></a>:last-child</h3><p>選擇最後一個子元素，等同:nth-last-child(1)。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#child</span> <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="nth-child-n"><a href="#nth-child-n" class="headerlink" title=":nth-child(n)"></a>:nth-child(n)</h3><p>選擇器的第 n 個兒子，nth-child()，括號還可以放置其他參數，odd 是奇數，even 是偶數。第 n 個兒子必須符合父元素的第 n 個兒子即是該選擇器元素，若第 n 個兒子不是該選擇器元素，則無法成功，child 原理都是如此。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">:nth-child(n)                 第幾個</span></span><br><span class="line"><span class="comment">:nth-child(3n+1)              從第 1 個開始選，每 3 個元素再選取一次，循環...</span></span><br><span class="line"><span class="comment">:nth-child(3n+3)              這樣寫不好，直接寫 :nth-child(3n)</span></span><br><span class="line"><span class="comment">:nth-child(odd)               選擇奇數的子元素</span></span><br><span class="line"><span class="comment">:nth-child(even)              選擇偶數的子元素</span></span><br><span class="line"><span class="comment">:nth-last-child(index)        跟 nth-child 相反，從另一端開始選擇</span></span><br><span class="line"><span class="comment">:only-child                   選擇到的父元素，這父元素只能有唯一子元素，也就是只有他，連其他兄弟都不能有</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="使用負數的-nth-child-來選擇元素"><a href="#使用負數的-nth-child-來選擇元素" class="headerlink" title="使用負數的 nth-child 來選擇元素"></a>使用負數的 nth-child 來選擇元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  li &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="comment">/* 選擇第 1 至第 3 個元素並顯示出來 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(-n</span> + 3) &#123;</span></span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="first-of-type-或-last-of-type"><a href="#first-of-type-或-last-of-type" class="headerlink" title=":first-of-type 或 :last-of-type"></a>:first-of-type 或 :last-of-type</h3><p>可以跟 first-child 相呼應，只是 :first-of-type 顧名思義是以類型為主，選擇同類型的第一個元素。而 :last-of-type 則是選擇同類型的最後一個元素。child 適合用在單一類型的元素項目做選擇，如果混雜許多的元素項目，就必須用 type，例如以下的範例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 選擇 div 同類型的第一個元素 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-id">#type</span> <span class="selector-tag">div</span><span class="selector-pseudo">:first-of-type</span> &#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="comment">/* 選擇 p 同類型的第一個元素 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-id">#type</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first-of-type</span> &#123;</span></span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>標題<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="nth-of-type-n"><a href="#nth-of-type-n" class="headerlink" title=":nth-of-type(n)"></a>:nth-of-type(n)</h3><p>一種類型裡的第 n 個，若子元素們有許多種標籤類型，可依據條件選出特定類型的子元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">:nth-of-type(2n+1)            選擇同類型從第1個開始選，每2個選一次，循環...</span></span><br><span class="line"><span class="comment">:nth-of-type(odd)             選擇同類型奇數的子元素</span></span><br><span class="line"><span class="comment">:nth-of-type(even)            選擇同類型偶數的子元素</span></span><br><span class="line"><span class="comment">:nth-last-of-type(index)      跟 nth-of-type 相反，從另一端開始選擇</span></span><br><span class="line"><span class="comment">:only-of-type                 選擇一個父元素，父元素裡面有眾多類型的元素，選擇其中唯一類型且只有他自己一個的元素。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 奇數圖片往左，偶數圖片往右 */</span></span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:nth-of-type(odd)</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:nth-of-type(even)</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 從第二個開始選取每個 div 類型的目標 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1n</span> + 2) &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="not-反選選擇器"><a href="#not-反選選擇器" class="headerlink" title=":not 反選選擇器"></a>:not 反選選擇器</h2><p>:not() 選擇器為反轉條件，否定掉:not()括號中的條件，不要它們，其他都要。使用 :not() 時要先將它附掛到元素，接著在括號裡填入一個簡單選擇器，也就是類型選擇器、通用選擇器(*)、屬性選擇器、ID 選擇器或虛擬類別其中之一。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 選擇誰:not(排除誰) */</span></span><br><span class="line"><span class="selector-class">.ha</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇所有 p ，排除 p 裡面有 .ha 的元素  */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:not(.ha)</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇所有li，但排除第一個兒子 */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:first-child)</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇 href 開頭為 http://，但排除 http://mysite.com 開頭的對象 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;http://&quot;</span>]</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[href^=<span class="string">&quot;http://mysite.com&quot;</span>]</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 更簡短版 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;http://&quot;</span>]</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[href*=<span class="string">&quot;mysite.com&quot;</span>]</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 選擇沒有勾選 checked 的對象 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;checkbox&#x27;</span>]</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:checked)</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="偽元素（虛擬元素）選擇器"><a href="#偽元素（虛擬元素）選擇器" class="headerlink" title="偽元素（虛擬元素）選擇器"></a>偽元素（虛擬元素）選擇器</h1><p>在此不包含::before、::after 這兩個偽元素，它們可以被獨立討論。偽元素（虛擬元素）（Pseudo-element Selector）擴展了元素本體選擇內容的方式，讓本體多了豐富的樣式選擇，但它們目前是很稀少的，除了::selection 與 ::placeholder 是較新的偽元素，它們只能用雙冒號顯示，其餘的可以單冒號、雙冒號，不過，CSS3 已經規範出偽元素必須是雙冒號，養成習慣，偽元素應該用雙冒號。</p>
<ul>
<li>::first-letter（第一個字母）</li>
<li>::first-line（第一行）</li>
<li>::selection（選取文字反白）</li>
<li>::placeholder（選取有屬性 placeholder 的元素）</li>
</ul>
<h1 id="選擇器權重"><a href="#選擇器權重" class="headerlink" title="選擇器權重"></a>選擇器權重</h1>]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
</search>
